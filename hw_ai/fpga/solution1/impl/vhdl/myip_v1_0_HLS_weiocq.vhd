-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiocq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiocq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000011111000100101010010", 
    1 => "00111110001010100111110111011000", 
    2 => "10111101111010001101011111010001", 
    3 => "10111110010000101111010101100001", 
    4 => "10111101101101011110011010110100", 
    5 => "10111101101001101110000110101110", 
    6 => "10111101111001011100010000011110", 
    7 => "00111110001111010110100100000011", 
    8 => "10111101011010100111110111101110", 
    9 => "00111101100100101111100000000111", 
    10 => "10111100101001011100001110110010", 
    11 => "10111110001011100010011100000101", 
    12 => "00111110010000110100110010000001", 
    13 => "10111110001101111110101111111110", 
    14 => "00111101111000111111000001100001", 
    15 => "00111101100101000001000011101010", 
    16 => "00111100111000011011010011100111", 
    17 => "00111101100100101011001111111001", 
    18 => "00111101111011000011110111000100", 
    19 => "00111101010001001110101001101001", 
    20 => "00111110010100010110101010011000", 
    21 => "00111101100001001100001001000000", 
    22 => "00111100101000100001110000111001", 
    23 => "10111101100101000110011100001010", 
    24 => "00111101000010011110100010011000", 
    25 => "10111110001100101011010111010100", 
    26 => "00111101010100010110000010110110", 
    27 => "10111101110111010111010101101011", 
    28 => "00111100101110000100010001010110", 
    29 => "00111101001100110111010101100010", 
    30 => "00111110010111111000010011001010", 
    31 => "10111101111010001101110011110000", 
    32 => "10111110001010011011101011111101", 
    33 => "00111101010111000011111000000100", 
    34 => "00111110000001101101001011111100", 
    35 => "00111101100100000011110101011111", 
    36 => "10111110000000001000010101001010", 
    37 => "10111101110011011111000000101100", 
    38 => "00111101010100001100111011100000", 
    39 => "00111100000111010001000000101111", 
    40 => "10111101111000010100111100111111", 
    41 => "00111101111001010111001001111000", 
    42 => "00111110010001111010000000010110", 
    43 => "10111110000101100100001110111100", 
    44 => "00111110100001101111000010011000", 
    45 => "10111101000010001000101101000111", 
    46 => "10111110001100001110100100001000", 
    47 => "00111101111110010111110011001010", 
    48 => "10111110000101000000011011100100", 
    49 => "10111110010011110110110100111110", 
    50 => "00111100110001011001111111110111", 
    51 => "00111110000000111011100110010110", 
    52 => "10111101000011110101110001110010", 
    53 => "00111010101110110001101010011101", 
    54 => "00111011110100111111010000110110", 
    55 => "10111101100001011011100111001000", 
    56 => "00111100110011101110001001001111", 
    57 => "10111110000110010011000101011101", 
    58 => "00111110000110101011000000110011", 
    59 => "10111101011011011111101001000101", 
    60 => "10111100111111011011111011011010", 
    61 => "00111110010101101000000000100101", 
    62 => "00111101100001110111110000110101", 
    63 => "10111110000001011110101010101100", 
    64 => "10111110000001001101100000111101", 
    65 => "10111110001010011111111110100111", 
    66 => "00111100101011000001111011001000", 
    67 => "00111100101100011101101011000000", 
    68 => "10111110001101110010011000001110", 
    69 => "00111110100000011000111010111100", 
    70 => "10111110011001101011110001110001", 
    71 => "10111110000011100110011000101101", 
    72 => "00111101110001000100101110101011", 
    73 => "00111110001111110111110010000111", 
    74 => "10111100001100110010011110001010", 
    75 => "10111110000010110001101101010001", 
    76 => "00111110001010010101111011110001", 
    77 => "00111110000010001111110001000010", 
    78 => "00111101100111000111111000111100", 
    79 => "10111110100010001101110101010110", 
    80 => "00111110100010010010101011101110", 
    81 => "10111101101100110000000111101101", 
    82 => "10111110000100101010100111101100", 
    83 => "10111101101010100011011010110011", 
    84 => "00111101100100111100111101000010", 
    85 => "00111101111100000011111010001100", 
    86 => "10111101101111111110000000000001", 
    87 => "10111110001110101101001100111100", 
    88 => "00111100111011101001000000101110", 
    89 => "00111110010000010110100111010110", 
    90 => "10111101010111010101101001110100", 
    91 => "10111101011100101001100101111001", 
    92 => "10111101110000111010000000100001", 
    93 => "10111110000000111011001001011011", 
    94 => "10111110000010101101101010000000", 
    95 => "10111101111100000001101011101001", 
    96 => "10111101111111011110000011000100", 
    97 => "00111011001000000111010010110110", 
    98 => "10111110011010111011110010111011", 
    99 => "00111101101110100100010111000010", 
    100 => "10111100100110001101010101100000", 
    101 => "00111101000011000111001001100001", 
    102 => "10111101010000010100101010111010", 
    103 => "00111101001111110110111111001111", 
    104 => "00111100100100000011101011001000", 
    105 => "10111110001101101001000011001000", 
    106 => "10111101111011111110101010100101", 
    107 => "00111110010000101101101000000000", 
    108 => "10111101010001100110000100101001", 
    109 => "10111101001010111111110001111110", 
    110 => "10111101110101011011001001000100", 
    111 => "00111110001001101010000101011111", 
    112 => "00111101110110111100100011001011", 
    113 => "10111101100010000111110111111010", 
    114 => "10111101011100010111010101010001", 
    115 => "10111110000000000011000111101001", 
    116 => "00111110000000011001010000001101", 
    117 => "00111101000000101110100010011101", 
    118 => "00111101110110011011001000011100", 
    119 => "10111101101001111111101100011011", 
    120 => "10111101101111111001101100000010", 
    121 => "10111010000111100101100011100000", 
    122 => "10111101001011001001110010001110", 
    123 => "10111110000101001100101110000010", 
    124 => "00111110010010011111110110101100", 
    125 => "10111110000111100111111010000010", 
    126 => "00111110000101111001101100010101", 
    127 => "10111011111000100010011011101001", 
    128 => "10111110011000100001011100101101", 
    129 => "00111110010011010011100000001110", 
    130 => "00111011100110000101010101010110", 
    131 => "10111100000011000010010001111000", 
    132 => "00111100101111110111000011001011", 
    133 => "10111101011000101110011111100111", 
    134 => "10111100111101100110010111110000", 
    135 => "10111100100100000011111001100111", 
    136 => "00111101101011100100111101100111", 
    137 => "00111101111100111110110001101011", 
    138 => "00111101111101011010011101100001", 
    139 => "10111101000001001001000000100000", 
    140 => "00111101101011001110000100000110", 
    141 => "00111101001011001001100101010000", 
    142 => "00111110000101001010101111011100", 
    143 => "00111100010010110011110000010010", 
    144 => "10111101100111101001010111011101", 
    145 => "10111101011110110111101111011110", 
    146 => "00111110000010010011110011001110", 
    147 => "10111011111111101111010011111101", 
    148 => "00111110000000101000000111111000", 
    149 => "10111101110111000011011111011100", 
    150 => "10111101011000010110111101011011", 
    151 => "10111101110100110000010101101111", 
    152 => "10111110000010110100111100011110", 
    153 => "10111101101011010011010100001110", 
    154 => "00111110000111010000101001011011", 
    155 => "00111101100101010000010110010000", 
    156 => "00111100000010111000001010100000", 
    157 => "00111110000111001010111111100100", 
    158 => "10111101111111100110101000110101", 
    159 => "10111101010000111000011011111011", 
    160 => "10111110100101011100100110110100", 
    161 => "00111110001101110110110010101001", 
    162 => "10111110011101110011110000001101", 
    163 => "00111100001000100101001000100001", 
    164 => "10111101001000001010101111001000", 
    165 => "10111101100010101101000001110010", 
    166 => "00111110001000001111000101010111", 
    167 => "10111100110000110101000010001010", 
    168 => "00111101110001111010101001000011", 
    169 => "00111110010000100101101110110110", 
    170 => "00111100100001100010000011100010", 
    171 => "10111101001101100111010101110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiocq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiocq is
    component myip_v1_0_HLS_weiocq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiocq_rom_U :  component myip_v1_0_HLS_weiocq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


