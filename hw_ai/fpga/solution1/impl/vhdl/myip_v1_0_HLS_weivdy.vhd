-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weivdy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weivdy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100001101000001100110110", 
    1 => "00111100001000001100111011101010", 
    2 => "00111101010100011010101110001101", 
    3 => "10111100111101010111111000011011", 
    4 => "00111101110010111000001101000001", 
    5 => "00111101001010010111101110110111", 
    6 => "00111110011010010110100001000101", 
    7 => "00111110010000000111100110011101", 
    8 => "00111110110100000100101000010110", 
    9 => "00111100101111110101010000000100", 
    10 => "10111110000100011010110111011001", 
    11 => "00111101000111100000010110101100", 
    12 => "00111101111100101111100111101100", 
    13 => "00111110010111010001100100010000", 
    14 => "10111101110100000101010001101111", 
    15 => "10111110000000101101010001110111", 
    16 => "00111101100101100111111001001100", 
    17 => "10111110001011101111101111111000", 
    18 => "10111110010111001111110111111101", 
    19 => "00111101101010111110100101011001", 
    20 => "00111100110101001001101101101011", 
    21 => "00111110000100100101110110101101", 
    22 => "00111110100010001001100011111110", 
    23 => "00111110000111101111000001011000", 
    24 => "10111101010101010111101101110111", 
    25 => "00111101101100101011111010010000", 
    26 => "00111110001100110101110110111100", 
    27 => "10111101010101111101100001000101", 
    28 => "00111101100110111011111011010010", 
    29 => "00111110011111101110000001110100", 
    30 => "00111011110101111110000000001100", 
    31 => "00111100111011010100100010001110", 
    32 => "10111101001010100111100111110101", 
    33 => "00111110000110111010111111110100", 
    34 => "00111110001110010001011101010101", 
    35 => "00111100010110111000010111000101", 
    36 => "10111101000111000000111111101011", 
    37 => "10111101110101010011001101110101", 
    38 => "10111101001101110111110001110111", 
    39 => "00111101100001010010000101110001", 
    40 => "10111011101101111001000101110011", 
    41 => "00111101101100100100111000111110", 
    42 => "10111110001000000001001100111001", 
    43 => "10111101100000011101011110110010", 
    44 => "00111011111010011110011100111010", 
    45 => "00111101101111110011100100000110", 
    46 => "10111101001010000110001110011001", 
    47 => "00111100111101011110100010100100", 
    48 => "10111101101100010110001110000001", 
    49 => "00111101111101010110010100010001", 
    50 => "10111101100000110100100000100101", 
    51 => "10111110001011110100110100010001", 
    52 => "00111101111010110010010101110001", 
    53 => "00111110000010110001111101100011", 
    54 => "00111110001010110101010111111101", 
    55 => "00111101011000111010111010101101", 
    56 => "10111101010101111110101111011100", 
    57 => "10111110000100000011100000010001", 
    58 => "00111011100100000111000001100010", 
    59 => "10111100110001001011100111111011", 
    60 => "10111101101011001110100010001100", 
    61 => "00111100101011011100001000100011", 
    62 => "10111101111110101011101100000000", 
    63 => "00111101110111001000110011001100", 
    64 => "10111101111111110011101011111011", 
    65 => "10111110000010010110110011001101", 
    66 => "00111110000101000010001011111010", 
    67 => "00111110010101000101111010100101", 
    68 => "10111110000011100001000111100011", 
    69 => "00111110001110111100001010101000", 
    70 => "10111011011000110110011011100001", 
    71 => "00111110001110000110101110111100", 
    72 => "10111101101111000001010111100100", 
    73 => "10111101100011000001011010010110", 
    74 => "00111101100111011010011010001001", 
    75 => "10111101010010000010101001000001", 
    76 => "00111101011001111011110111101000", 
    77 => "00111101111110000110000111011111", 
    78 => "00111100011011000110101111000111", 
    79 => "10111101101101000000100101110100", 
    80 => "10111101110111111000100001100000", 
    81 => "00111101111000001010101111010101", 
    82 => "10111101101111111011100100011111", 
    83 => "10111110011110101101001010110111", 
    84 => "00111101101101001110111010011000", 
    85 => "10111110000110110111000011110001", 
    86 => "00111011011010101110100010001110", 
    87 => "10111101101110010001100111000010", 
    88 => "10111011010001000100111001110111", 
    89 => "10111101111001000010001001011101", 
    90 => "10111110001001000101101101100011", 
    91 => "10111110000110101001110100001000", 
    92 => "10111110010011010000011100111001", 
    93 => "00111110011101111011111000110011", 
    94 => "00111100100111100111100010011111", 
    95 => "10111100101011000010111000011010", 
    96 => "10111011111110001011000001111001", 
    97 => "00111110001110010110010111101001", 
    98 => "10111101011111010000000000101111", 
    99 => "00111110000000011000001100001101", 
    100 => "00111101010000001111001010010000", 
    101 => "00111101111101101110100011000010", 
    102 => "00111110001011111111100100001101", 
    103 => "10111100000001111000001101001001", 
    104 => "00111100100110110001000111010011", 
    105 => "10111101110110110100000101010000", 
    106 => "10111110000000011100000010011000", 
    107 => "10111100111111110001000111011010", 
    108 => "10111101110110010101111100001100", 
    109 => "10111100100100010110101101000011", 
    110 => "10111101101001110111111010101101", 
    111 => "10111101010101111110111111000111", 
    112 => "00111100110111100111001011110110", 
    113 => "10111101100000010111100111101001", 
    114 => "00111101111010110010011110000111", 
    115 => "00111101111100110110010010000100", 
    116 => "00111110001011111110110010000000", 
    117 => "00111101001110000011110111000101", 
    118 => "00111101111000111010000001101110", 
    119 => "10111110100011001001100101101010", 
    120 => "00111100101100101100011001101100", 
    121 => "10111110011000000001011101111000", 
    122 => "00111110010011001001100010101010", 
    123 => "00111100111001110111000100011000", 
    124 => "10111101111110001000101101101010", 
    125 => "10111110000011001110010100000001", 
    126 => "10111101101100001010001111000110", 
    127 => "00111101111110001111011110101010", 
    128 => "10111110011110101010111100011000", 
    129 => "10111100110100011110101111000001", 
    130 => "10111110010110101111000010011010", 
    131 => "10111101010011100110110101010101", 
    132 => "00111101000010111110010111001101", 
    133 => "10111011110000001010011110110110", 
    134 => "00111101000101011101010111000100", 
    135 => "00111110011101000000001111001110", 
    136 => "00111011000011101011100010111100", 
    137 => "00111101001110111100110111000111", 
    138 => "10111100000001110011001100101110", 
    139 => "00111100110000101010110011111101", 
    140 => "10111100101110100111101010100010", 
    141 => "10111101111110110111110111001011", 
    142 => "10111110100001001010001001111110", 
    143 => "10111110000100101101010001101100", 
    144 => "10111101000110010000010111100111", 
    145 => "10111100000011010000000101110100", 
    146 => "10111101101101100110110101010010", 
    147 => "10111011101100111001001010100011", 
    148 => "00111101111100001111001001100110", 
    149 => "00111101001000101101011110000110", 
    150 => "00111110000101111111100010100110", 
    151 => "00111101000010000010001100001110", 
    152 => "10111101111000100011100101010111", 
    153 => "10111101010101010101111011100001", 
    154 => "10111101111011010011011110111000", 
    155 => "10111110010011010110011101010011", 
    156 => "00111100001000101111010000100001", 
    157 => "00111101111101111100101011100001", 
    158 => "10111101011001100111000110000111", 
    159 => "10111101101110011110011110100010", 
    160 => "00111101110110001100100001001100", 
    161 => "00111101000000100010100010100111", 
    162 => "10111101110110001000011001101110", 
    163 => "00111101010100010101101000110111", 
    164 => "00111110001010000010011110010101", 
    165 => "00111110000000011101111001110110", 
    166 => "10111010010011010111101001101111", 
    167 => "00111110100000111001100101110101", 
    168 => "00111101010001101011111011101010", 
    169 => "00111110000101110010011001010111", 
    170 => "10111110001110010111010110101000", 
    171 => "00111101101011111001110110100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weivdy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weivdy is
    component myip_v1_0_HLS_weivdy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weivdy_rom_U :  component myip_v1_0_HLS_weivdy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


