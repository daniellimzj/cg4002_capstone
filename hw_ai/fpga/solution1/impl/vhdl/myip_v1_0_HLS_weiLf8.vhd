-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiLf8_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiLf8_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000001110000001011100111", 
    1 => "00111101011101100101100010101110", 
    2 => "00111101001011111011111101001000", 
    3 => "10111100100001000010010100001111", 
    4 => "10111101110000100111100011101000", 
    5 => "10111101101111011001000001100101", 
    6 => "00111100101001010000110011101101", 
    7 => "10111010111001010101010110000010", 
    8 => "10111101010001001111000000110110", 
    9 => "00111101100100001110110010100001", 
    10 => "00111100010011011110110110000111", 
    11 => "10111101000011111011101011001110", 
    12 => "00111110001010111001110110010001", 
    13 => "00111110000011110101100010010010", 
    14 => "00111101011111101110000110010000", 
    15 => "00111101101011100011100100110001", 
    16 => "00111101100011110101111100101110", 
    17 => "10111110000001001010111100000110", 
    18 => "10111100111001000101011001101011", 
    19 => "00111110001000000001000011111110", 
    20 => "10111101101110001101010110111011", 
    21 => "00111110000100000111100001010100", 
    22 => "10111110010101011010110000011011", 
    23 => "10111101000100001100000110101010", 
    24 => "10111101100100000111110010101101", 
    25 => "10111110010101000110000001001010", 
    26 => "10111110011110100010000011010000", 
    27 => "10111101011010111110100110010111", 
    28 => "10111101111000010011001110110100", 
    29 => "00111110100000100100000101101101", 
    30 => "10111100001111111000111001000001", 
    31 => "00111101001101001111010000001100", 
    32 => "00111110010011111100001001010100", 
    33 => "10111110010101000110100110011011", 
    34 => "10111110000010001000110001110110", 
    35 => "10111110000111101110001001110000", 
    36 => "10111101110011000001001110111100", 
    37 => "00111101010111000011000010011011", 
    38 => "00111110000110101110001000100000", 
    39 => "10111101110010001100100111111111", 
    40 => "10111101001010111011000010101010", 
    41 => "00111101100110000011001111111111", 
    42 => "10111100010100110111001110010101", 
    43 => "10111101110010010111010010110011", 
    44 => "00111110000101011011000101100100", 
    45 => "10111110010111011111100010001111", 
    46 => "10111110010110110010010100010001", 
    47 => "00111110100001001111010010111100", 
    48 => "00111110100100100111111100010111", 
    49 => "10111101110000100011101111000111", 
    50 => "00111101100011011100101110010101", 
    51 => "00111101001111000000100001111100", 
    52 => "10111110100000100110001000010001", 
    53 => "00111101011011110011100101001000", 
    54 => "10111110001100001111000010100101", 
    55 => "00111101110011111110010100110000", 
    56 => "10111110000000101101110111011000", 
    57 => "10111101100010001101111001101010", 
    58 => "10111110000100001100001101111100", 
    59 => "10111110010000111000100000110111", 
    60 => "00111110001011010111100110010110", 
    61 => "00111110011011010100000111110010", 
    62 => "00111110000001101001111101110111", 
    63 => "00111110000010101001001110001000", 
    64 => "10111101010100000000100110101000", 
    65 => "00111110000000010110111111001011", 
    66 => "00111110100001001110101110001011", 
    67 => "10111101110110010100100111111011", 
    68 => "10111101101000000000010011100111", 
    69 => "10111101100000110010101100010101", 
    70 => "00111101010110010111011111100010", 
    71 => "10111110000101000101111111011110", 
    72 => "00111100100100001011000110100010", 
    73 => "00111110011001111110110000101101", 
    74 => "10111101101001101101101110011011", 
    75 => "10111110000100000101100001110101", 
    76 => "00111100110110101011110111000100", 
    77 => "00111110000011111011110010011101", 
    78 => "00111101111110011011101010010111", 
    79 => "00111101100100111010000011101111", 
    80 => "00111101101010010001111101110000", 
    81 => "00111110010111111110010000001011", 
    82 => "00111101111010001001100110011111", 
    83 => "10111101010001100100111111010101", 
    84 => "10111101101000100111000111110010", 
    85 => "00111110000110111100011001011000", 
    86 => "00111110010011100000000010111100", 
    87 => "10111110001100001101101100110010", 
    88 => "00111101111100001010100100110011", 
    89 => "00111100111101110011011100011001", 
    90 => "10111101000001000100111111111110", 
    91 => "10111110010101110110110000011110", 
    92 => "10111110000011111000100001110010", 
    93 => "10111101101110011000101100001100", 
    94 => "10111010100010010001100111001111", 
    95 => "00111110011111010100011010101011", 
    96 => "10111101001010101000011010001100", 
    97 => "00111100110010100111110000100000", 
    98 => "10111101001011001100011100110011", 
    99 => "10111110001101110100110111111001", 
    100 => "10111100101001010110000101011101", 
    101 => "10111110000001010111011000011010", 
    102 => "10111101011110100111010111000001", 
    103 => "00111100111011110101000101010000", 
    104 => "00111101101010100110101110111001", 
    105 => "10111101101011110100011010011001", 
    106 => "00111101001000111101111100110101", 
    107 => "10111101001011010000101011010000", 
    108 => "00111110001001011100010010001100", 
    109 => "10111101010100110100000000001001", 
    110 => "00111011010101111000111111001000", 
    111 => "00111011100110001000000010010001", 
    112 => "00111100111110100110000000110101", 
    113 => "10111110000011111001000001110101", 
    114 => "00111101000100011101000010100010", 
    115 => "00111101111110111001011010000110", 
    116 => "00111101100111011011111000110001", 
    117 => "10111101100011000000011000101110", 
    118 => "10111110001100110101000111001011", 
    119 => "10111101101011001111100101001011", 
    120 => "00111101000101100011111001010011", 
    121 => "10111110000110101010110011100111", 
    122 => "10111101111001110111101011001011", 
    123 => "00111110010001010100011001011100", 
    124 => "00111110010111100011011001000010", 
    125 => "10111101010000111110001000110101", 
    126 => "00111100111110011011000000101111", 
    127 => "00111110010000001000010101011011", 
    128 => "10111011101010110111101101110000", 
    129 => "00111101000110101100001101101000", 
    130 => "00111110000000100101010010011010", 
    131 => "10111110010100000100100101111111", 
    132 => "00111110000000100010100100010110", 
    133 => "00111101100100111101101111001110", 
    134 => "00111110000010101010111011011010", 
    135 => "10111101110000101010010010111111", 
    136 => "10111100110010010100010001010101", 
    137 => "10111110001001000101010110100011", 
    138 => "00111101000101101101001011100001", 
    139 => "10111110000001010010001010001010", 
    140 => "10111101111110000111000001011101", 
    141 => "00111110000101110000101110001110", 
    142 => "10111110100100000101101101001111", 
    143 => "10111101110011111101111110111101", 
    144 => "00111101100101100100101011100001", 
    145 => "00111110000101101001001110001001", 
    146 => "10111110010001101101000111111001", 
    147 => "00111101001110110111001111110111", 
    148 => "00111101010001001010001001111000", 
    149 => "10111110010110011101000000110110", 
    150 => "10111100000110110100010000101001", 
    151 => "10111101000110101101110111001001", 
    152 => "10111110001011010101111100100001", 
    153 => "10111101110100010011001101101111", 
    154 => "00111101001101011011110101101000", 
    155 => "00111101100001011110100010111110", 
    156 => "10111110011111000100111010011101", 
    157 => "00111101111111110001010011011001", 
    158 => "10111110100011001010001001000100", 
    159 => "00111110000010010011111010000000", 
    160 => "10111110000101011110100101111001", 
    161 => "00111101110101101101011011011001", 
    162 => "10111110010000111110110010011001", 
    163 => "00111110010100110000000001110101", 
    164 => "10111100101001001111101011011001", 
    165 => "00111110011011101001011101110010", 
    166 => "10111101000010100101001001001101", 
    167 => "10111110000110100100100111001100", 
    168 => "10111101001001100011001101100111", 
    169 => "10111101000011101001111111001100", 
    170 => "00111101010100100000110000100001", 
    171 => "00111101110100010000110001010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiLf8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiLf8 is
    component myip_v1_0_HLS_weiLf8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiLf8_rom_U :  component myip_v1_0_HLS_weiLf8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


