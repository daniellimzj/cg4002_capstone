-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weizec_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weizec_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010001001001011001011101", 
    1 => "00111110100010000010000010011010", 
    2 => "10111101101010111011000000101011", 
    3 => "00111100110101001001110101110101", 
    4 => "10111110000011011001110101011011", 
    5 => "10111110000100011001001100111000", 
    6 => "10111101000001011010101011101101", 
    7 => "00111101110011001101110100001101", 
    8 => "10111101011101011011100111100000", 
    9 => "00111101110010000101001101010010", 
    10 => "10111100100101001101000011110000", 
    11 => "10111101100010101011010001000111", 
    12 => "10111110000101101011001110000110", 
    13 => "10111110010110000101001111011111", 
    14 => "00111101001111111101010001001110", 
    15 => "10111110000100111101111100010100", 
    16 => "00111110001010110100001011011111", 
    17 => "00111110011100110010001100111010", 
    18 => "00111110000011100100111100011101", 
    19 => "10111101101001110011100110000001", 
    20 => "00111110100010010000000101110010", 
    21 => "10111101110010110001100111000100", 
    22 => "00111101010001000010010101011001", 
    23 => "10111110010001100001011010010000", 
    24 => "10111100011000111000011010100011", 
    25 => "10111110000101010101100010001010", 
    26 => "00111100111000110101101101010100", 
    27 => "10111101001110011001000111100010", 
    28 => "10111101111100100100100001111110", 
    29 => "00111110000000111000101011111111", 
    30 => "10111100001011111010000001101111", 
    31 => "00111110000000110101101111101001", 
    32 => "10111110010010010000011000101011", 
    33 => "00111101100010011100101101011010", 
    34 => "00111110011111010010110101000101", 
    35 => "00111101111110011000010110111010", 
    36 => "00111011101000111101101011111101", 
    37 => "00111101110101011001110000101011", 
    38 => "10111101100111011011101010001100", 
    39 => "00111110011000000100100110001110", 
    40 => "10111101100101111111110011011001", 
    41 => "00111101000101101011111010011110", 
    42 => "00111101100001100000111010001000", 
    43 => "00111101010101000111000001101010", 
    44 => "00111100001101001001101000011100", 
    45 => "00111110010100000000000111111111", 
    46 => "10111101111111110110101000101000", 
    47 => "00111101110101111000110111000100", 
    48 => "00111110000110011100110000011100", 
    49 => "00111100111010100010111100100011", 
    50 => "00111101111010010101111100111110", 
    51 => "00111110011011000101010110010100", 
    52 => "00111100111011111111010011111001", 
    53 => "10111101100000101011001000100111", 
    54 => "00111110000111011100010100011100", 
    55 => "00111101100100100100010111000100", 
    56 => "10111100101000100011101000111101", 
    57 => "10111101101111011101110100101110", 
    58 => "10111101000100001110010100011110", 
    59 => "10111101101100111101111011101111", 
    60 => "00111101100001011000100111001101", 
    61 => "00111101100110000101000000011010", 
    62 => "00111110001010110001001000011111", 
    63 => "10111110011011100000110001001000", 
    64 => "00111101011000011001110101010101", 
    65 => "00111101010010101001000001001100", 
    66 => "10111110010010011001010000111100", 
    67 => "00111101101011010111011111001101", 
    68 => "10111110001010000111011010010110", 
    69 => "00111110000000011111000000100001", 
    70 => "10111100101100111100010110101110", 
    71 => "10111110000110001110010011011011", 
    72 => "00111101111000101110001111011100", 
    73 => "00111110010010100111001110011111", 
    74 => "10111101011010001111110010000011", 
    75 => "10111110100101110011001011000101", 
    76 => "10111110011011111111100110011110", 
    77 => "00111101100101110101110101101001", 
    78 => "00111110010010100011101001010101", 
    79 => "10111110010110110000011111100001", 
    80 => "00111110100001001011101100110000", 
    81 => "10111110000110111001000111100100", 
    82 => "10111101000100001100101101110011", 
    83 => "00111110011100010101001000110011", 
    84 => "00111101000101000100100000001111", 
    85 => "10111101110101000011001011111010", 
    86 => "00111110001101111010001100010110", 
    87 => "10111101101111010000000000011100", 
    88 => "10111011111110101010011100101101", 
    89 => "00111110000010101110111111101011", 
    90 => "10111101000111001110110001010101", 
    91 => "00111110100010001000110100011000", 
    92 => "00111100111101111111111100001010", 
    93 => "10111110101100001001011011011001", 
    94 => "10111100010001111011011100000000", 
    95 => "00111110010000111010101000111101", 
    96 => "00111101110100001011100110111111", 
    97 => "00111110011100010011001011000111", 
    98 => "10111110001110111000110110100111", 
    99 => "00111011111101111011110100101111", 
    100 => "10111010100110001100011011100101", 
    101 => "10111101010101110010011110000110", 
    102 => "00111011101010101001100111101000", 
    103 => "00111101101101100001001010010010", 
    104 => "10111110001000010100110010011101", 
    105 => "10111101010111111011001100111101", 
    106 => "00111110010111010111100011011001", 
    107 => "00111110010101100111101010001100", 
    108 => "00111101111011001111101010011110", 
    109 => "00111101011100000000010001001001", 
    110 => "00111101011011111100001100100101", 
    111 => "10111101111110000010100100000010", 
    112 => "00111110010110101101100100001011", 
    113 => "00111101000110001001010011000110", 
    114 => "00111110000001101100001000001011", 
    115 => "10111101001101100010011101100101", 
    116 => "10111101100110001001100010111111", 
    117 => "10111101111111011110100100011001", 
    118 => "10111110001011001100010100011111", 
    119 => "00111110011110100011000011101001", 
    120 => "10111110011110110101110001000010", 
    121 => "00111101010101001110010100011000", 
    122 => "00111100001010100010101010111101", 
    123 => "10111101011001101110011100010111", 
    124 => "00111110011100100001101000111110", 
    125 => "10111101011101101110110001000001", 
    126 => "10111101100001011011011100110011", 
    127 => "00111101101001111101111100001100", 
    128 => "10111101110010101001000010001010", 
    129 => "00111110010001000010110101111011", 
    130 => "10111110000011000011111001011100", 
    131 => "10111110000011011101101000111001", 
    132 => "10111101100110111000000100110010", 
    133 => "10111011000111000010010011100111", 
    134 => "00111100101011000100110100001011", 
    135 => "00111110000010110111010011000010", 
    136 => "00111110010010101000110100101111", 
    137 => "10111100010101111111010011101011", 
    138 => "10111110010010101100011011111000", 
    139 => "00111101000101110101000010000000", 
    140 => "10111101011011110111110001100110", 
    141 => "00111100011110000100010010011100", 
    142 => "10111101111110011000100111000011", 
    143 => "10111010001110111001010111101101", 
    144 => "00111100101110101001111111110111", 
    145 => "00111010011110001101111010011011", 
    146 => "10111101000011101011001010110000", 
    147 => "00111110001000010001001001001011", 
    148 => "10111101110110011100011001100010", 
    149 => "00111101101000111010011110000101", 
    150 => "10111101101100100100110111010111", 
    151 => "10111110000000010010111110000010", 
    152 => "10111101110011101000101111100101", 
    153 => "10111101101010011000111010000000", 
    154 => "00111110001010001110101100100111", 
    155 => "00111101100100011010000000101001", 
    156 => "10111100111110001110001111101111", 
    157 => "10111101001100111001110111110111", 
    158 => "10111110010000111101001001111101", 
    159 => "10111110011110101001100101001001", 
    160 => "10111110010011010010011011110110", 
    161 => "00111101010110101010101011111001", 
    162 => "10111101011111001000100000000101", 
    163 => "10111100100011001001111000010010", 
    164 => "10111101100101000010011010010000", 
    165 => "10111110001101111010101010101011", 
    166 => "00111110000001010111011100110110", 
    167 => "00111101100011011011100010111011", 
    168 => "10111100101101111010111011011011", 
    169 => "10111101100110000101001110011000", 
    170 => "00111101111110110101100111111101", 
    171 => "00111110001111001000101000000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weizec is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weizec is
    component myip_v1_0_HLS_weizec_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weizec_rom_U :  component myip_v1_0_HLS_weizec_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


