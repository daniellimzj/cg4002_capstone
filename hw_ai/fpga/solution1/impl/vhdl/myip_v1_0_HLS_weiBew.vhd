-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiBew_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiBew_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100101110001111001100101", 
    1 => "10111101110111011101001110100011", 
    2 => "10111101100101011001000011010001", 
    3 => "10111101011000101111010110101010", 
    4 => "00111100010011011100010101011111", 
    5 => "00111101110101001101111000111011", 
    6 => "10111101101000100011110011000010", 
    7 => "00111101111111011110101000011010", 
    8 => "00111100101001001001111100011110", 
    9 => "00111101101101100110001000111111", 
    10 => "10111101110001000100110110110101", 
    11 => "10111101010001001001000100010001", 
    12 => "00111101110011100101000011100110", 
    13 => "00111110011111101101000111101001", 
    14 => "10111100111111100010101100010000", 
    15 => "00111010011011111111111110101110", 
    16 => "10111101111111001000110111011100", 
    17 => "00111100101100110100110111101101", 
    18 => "00111101001110000000011101011000", 
    19 => "10111101100000111001010101011000", 
    20 => "10111100001111111000101000100011", 
    21 => "00111110010100101110111111010100", 
    22 => "10111110000011011010011100011011", 
    23 => "10111110100001110111101111011010", 
    24 => "10111101011110000000111011110111", 
    25 => "10111110010101010001011010010100", 
    26 => "00111101000110011111111101111110", 
    27 => "00111110100001110011011010110001", 
    28 => "10111101001010111101010100111011", 
    29 => "10111101100101010110010100100110", 
    30 => "10111101001111111001010100001110", 
    31 => "10111100110000011000001000011010", 
    32 => "00111110011001000011101000001001", 
    33 => "10111101110110010100110011010001", 
    34 => "10111110000110110100011010001101", 
    35 => "00111101100100111111000100000011", 
    36 => "00111101000100011101011001100100", 
    37 => "10111110001000110001110100111110", 
    38 => "00111101010100101101100000110100", 
    39 => "10111100101110011101000010111111", 
    40 => "10111101000001100010110110100001", 
    41 => "00111101001111101000011111101010", 
    42 => "00111101001010000001110000010011", 
    43 => "00111100100011111111111011111010", 
    44 => "00111101011101011000010011000101", 
    45 => "10111100101011001010000101111001", 
    46 => "00111101011101010011011000010101", 
    47 => "10111101101101110000111100001011", 
    48 => "10111110000001100010010111010100", 
    49 => "00111101010001011001001000100101", 
    50 => "00111110000100001111100110101010", 
    51 => "00111110000000100101010010011001", 
    52 => "10111110001011000111110110011000", 
    53 => "10111101110110000000100100000111", 
    54 => "00111110001011000110101100010001", 
    55 => "10111110000010011111001000100100", 
    56 => "10111101110011011001110000001010", 
    57 => "00111011010110100111111101110100", 
    58 => "10111101101101100101000000110000", 
    59 => "00111100010000111100001010011100", 
    60 => "00111100010111001001101001111101", 
    61 => "00111101000110100100101010001101", 
    62 => "10111101101000000111000110110101", 
    63 => "00111101101011011101001010111000", 
    64 => "10111101000010111010000101000010", 
    65 => "00111110000111010101110011110000", 
    66 => "00111101100111000111111111110111", 
    67 => "10111110010011110111101011010011", 
    68 => "00111101011101010001000001011111", 
    69 => "00111110001000101000000010111111", 
    70 => "00111101100000010001010111010100", 
    71 => "10111101000001000000010101001110", 
    72 => "10111101101011100011011000000011", 
    73 => "00111101010100110001111001101111", 
    74 => "00111101111101101011101110011110", 
    75 => "10111100001001001111010001110100", 
    76 => "10111100101011101110100110011011", 
    77 => "10111110010100101000011100010001", 
    78 => "10111011101111001001001010000011", 
    79 => "10111110010011111101100010101001", 
    80 => "00111101010011011101101010100001", 
    81 => "10111101111010001110111101110111", 
    82 => "00111101100011110011010111000111", 
    83 => "00111101011000101001010011110111", 
    84 => "00111110000101101100000101010001", 
    85 => "00111101010010110001010100001001", 
    86 => "00111101111110011011010010000010", 
    87 => "10111101100111111111111111111110", 
    88 => "00111100101111011001110100000101", 
    89 => "10111101011001011011100000100000", 
    90 => "10111101111111110010010111100011", 
    91 => "00111101110001000010001100100001", 
    92 => "00111100101100001011010100011101", 
    93 => "10111110000110000000001110101111", 
    94 => "10111110001100010001001111111101", 
    95 => "10111110001001011000001101001110", 
    96 => "10111100101100101010011001101010", 
    97 => "00111101111100010110110110100010", 
    98 => "10111101100010001110011110000110", 
    99 => "10111101111000110100010100000001", 
    100 => "00111101101001101110001101111010", 
    101 => "00111110000101111110001010000010", 
    102 => "10111110100001000100001111110000", 
    103 => "00111110001001110001001101111101", 
    104 => "10111110000111111000101011010011", 
    105 => "00111110000000110101011110000000", 
    106 => "10111101110010011101010110111000", 
    107 => "10111100111010100001110101001001", 
    108 => "10111101110111011101011011000011", 
    109 => "00111101101100011101000100101000", 
    110 => "00111110001010001001000111010010", 
    111 => "00111101010001111011100000110000", 
    112 => "00111101011101000100101111111110", 
    113 => "10111101000100011110100000111000", 
    114 => "10111011100100100110001011011000", 
    115 => "00111011100110110001000100000011", 
    116 => "10111101100101000100111110101000", 
    117 => "10111100100111110000110011110000", 
    118 => "00111110001011110111000010100001", 
    119 => "10111101111001110010010110100010", 
    120 => "10111110011010001000110101111110", 
    121 => "10111101101100110111111100110111", 
    122 => "10111101011111000010100011000101", 
    123 => "00111101100010110111101011011111", 
    124 => "10111110010101010000110100110100", 
    125 => "00111110001111001100100100000110", 
    126 => "10111101110110111111010011010011", 
    127 => "00111100100100101000100111101101", 
    128 => "10111110001100000000100111011100", 
    129 => "10111110000111011011010111100111", 
    130 => "00111110000000011101000110111000", 
    131 => "10111110001000110101011000001110", 
    132 => "10111101101101000111010011100111", 
    133 => "10111010001111111110101001001011", 
    134 => "10111101000100000110111001000101", 
    135 => "00111101000101101110100000111100", 
    136 => "00111101110001101111100100110011", 
    137 => "00111101000110001011110101011011", 
    138 => "00111100000110000001100101100000", 
    139 => "00111110011011000101111010111101", 
    140 => "10111101011111101100010010011101", 
    141 => "10111101100001100101101011100010", 
    142 => "00111110010111111101111110001101", 
    143 => "00111101010011110000001100000000", 
    144 => "00111011100111101000110110000011", 
    145 => "00111101011000000001000001011101", 
    146 => "00111011100000010100110001001000", 
    147 => "00111110001100001010111010111111", 
    148 => "10111101101111111000010110110000", 
    149 => "10111100000001010111001001001000", 
    150 => "10111100110100010000001101010000", 
    151 => "10111110001100111100111111111011", 
    152 => "10111110000000001111100111101000", 
    153 => "10111110000000001110111111000100", 
    154 => "00111101001110101001011010101001", 
    155 => "10111101101101100011101011100001", 
    156 => "00111101010000111101011100101001", 
    157 => "10111100100001100001011100001001", 
    158 => "00111100111100101111110000000011", 
    159 => "00111101001100011111000001100010", 
    160 => "00111101101100101001000000001000", 
    161 => "10111101101011000011010100010100", 
    162 => "10111110001001100101111011011100", 
    163 => "00111101001011111110011011010100", 
    164 => "10111101100111010000110100100010", 
    165 => "00111110011011111100000111001010", 
    166 => "10111101101011001010110010001100", 
    167 => "10111101000001101100000110100010", 
    168 => "00111101100000000001001000110111", 
    169 => "10111101100010101111110101011010", 
    170 => "00111101101001010110111010101011", 
    171 => "10111101001001000110000110100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiBew is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiBew is
    component myip_v1_0_HLS_weiBew_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiBew_rom_U :  component myip_v1_0_HLS_weiBew_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


