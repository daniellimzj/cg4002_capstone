-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weincg_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weincg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001010101100110010111010", 
    1 => "00111110001011100000100001010010", 
    2 => "00111110000111110111110001001110", 
    3 => "00111110000111101100110111000001", 
    4 => "00111101110110000000110010000010", 
    5 => "10111110000100101010001001010010", 
    6 => "00111101101100000101110100101011", 
    7 => "00111101101110010100110010000000", 
    8 => "10111110000110100100010011001110", 
    9 => "00111100111111111001111111011000", 
    10 => "10111110000101110010000001011110", 
    11 => "00111101110000011000000100101100", 
    12 => "00111110011001001011111110001101", 
    13 => "10111110001110101000110100000111", 
    14 => "00111101111001001011100000110001", 
    15 => "10111101111111001110110110110110", 
    16 => "00111101100111011101001110100101", 
    17 => "00111101111110011100011001010111", 
    18 => "10111101111001101100000011011100", 
    19 => "00111101101101111100101100101100", 
    20 => "10111101100010111111000001010110", 
    21 => "00111110001110110111011000100010", 
    22 => "00111101011010101110101101111100", 
    23 => "00111110000010000000101011101011", 
    24 => "00111110010011010010111101101001", 
    25 => "00111101100001000010000100101111", 
    26 => "00111101001010101010110101101110", 
    27 => "10111101000110110111010110010110", 
    28 => "00111100000100010000101001101011", 
    29 => "10111110001011000110101100000100", 
    30 => "10111110000111001110100111111001", 
    31 => "10111100011110011111101101001100", 
    32 => "10111110000111001010111011011000", 
    33 => "00111110011111010110001010110111", 
    34 => "10111110000100010000010100111101", 
    35 => "00111101000101011001111011111101", 
    36 => "00111101100010100100010111000100", 
    37 => "10111110000010111011110110101011", 
    38 => "00111101111101011000000011110000", 
    39 => "10111101101001111000111101000010", 
    40 => "10111110000011100100001100000000", 
    41 => "10111101110110101010010100000000", 
    42 => "10111100111000101110001100011101", 
    43 => "10111101101011010101101110010011", 
    44 => "00111101011100010000000001110100", 
    45 => "10111101111100011111100101110000", 
    46 => "10111110010001011000011100101001", 
    47 => "10111110011000100110100000110111", 
    48 => "10111100101000011101111101100100", 
    49 => "10111101100101101110111110001001", 
    50 => "00111100001101010111001111101111", 
    51 => "10111110101100101110011011111111", 
    52 => "00111110011000000001101111011001", 
    53 => "10111110000111111000101100010010", 
    54 => "00111100010011001011100111010111", 
    55 => "10111110010100001010011101011001", 
    56 => "10111101100000010001010010000101", 
    57 => "10111101011001011110111011011100", 
    58 => "00111101101000101010001010101111", 
    59 => "00111110001010101011100011011000", 
    60 => "10111101111011000010011101001100", 
    61 => "10111011111011000001110010110001", 
    62 => "10111101100000001000101010111010", 
    63 => "00111100100110011110100100110100", 
    64 => "00111101100110010011100100100011", 
    65 => "10111101100111101001100001010000", 
    66 => "00111100101000101100101011010101", 
    67 => "00111101011010101100010110001111", 
    68 => "00111101100111100111011010110111", 
    69 => "00111101101000000100101111100001", 
    70 => "00111110000100010001111110110110", 
    71 => "10111101111010110011011110001101", 
    72 => "10111101101010000111001010001111", 
    73 => "10111101000010001000101101001100", 
    74 => "10111110001111011110011110011101", 
    75 => "10111110001111110111011011101011", 
    76 => "10111110000110011111000101011011", 
    77 => "00111101101010110100101001111011", 
    78 => "10111101101011010101111111111100", 
    79 => "10111101111001001001001010010111", 
    80 => "00111100000001110100110111101101", 
    81 => "10111110000000100101111001010011", 
    82 => "10111110011110100101111001011011", 
    83 => "00111101111010000011010101100111", 
    84 => "10111110000101010011000101100100", 
    85 => "00111110001011101111100100110000", 
    86 => "10111101101110100010010100011110", 
    87 => "10111101011101011101011000110010", 
    88 => "10111101101110001011011010000000", 
    89 => "10111101101100111000001000001101", 
    90 => "00111101101100110100011100001111", 
    91 => "00111110001011100001001011110110", 
    92 => "10111110000010110100000000011001", 
    93 => "10111110000011100010011000011001", 
    94 => "10111101001110000011011010010101", 
    95 => "10111101101001100101100011100010", 
    96 => "00111101100000110000101001000110", 
    97 => "10111101110101110001011110100100", 
    98 => "10111110000100110001111110111000", 
    99 => "00111110001011111111111001001100", 
    100 => "00111101101010011101110101010000", 
    101 => "10111100101011100011010000010101", 
    102 => "00111110000111100100000100111010", 
    103 => "10111101110100000101100011110001", 
    104 => "10111110000011011111111110101000", 
    105 => "00111101110101000101110000110101", 
    106 => "00111010100111011100000101101010", 
    107 => "00111110001011000000110100100101", 
    108 => "00111100010111111011101010000010", 
    109 => "00111101011011011111000100000111", 
    110 => "10111101100111011101010100000010", 
    111 => "10111101101001011000011010010001", 
    112 => "00111101011011011010000010100010", 
    113 => "10111101101001111101000101110000", 
    114 => "00111101100110010101010100111001", 
    115 => "00111100100000001100011100010011", 
    116 => "10111110001101010001100100010111", 
    117 => "00111110010110001010100100111010", 
    118 => "00111100101110111101100010101000", 
    119 => "10111101110001111111110000111000", 
    120 => "00111110001011101011100011111111", 
    121 => "10111110000001001001111111011001", 
    122 => "00111100000001011000000100110111", 
    123 => "10111110101100100111100101110111", 
    124 => "10111101000101101010010000111010", 
    125 => "00111011101110001100110110110100", 
    126 => "10111110001110001110101101111101", 
    127 => "00111100111111011011111011001011", 
    128 => "10111101111101001000110100011101", 
    129 => "10111101011011111000110000010010", 
    130 => "00111101101000100100110100101011", 
    131 => "00111100110001010001010111111111", 
    132 => "10111110010011011110001100111010", 
    133 => "10111110000100000110011111100011", 
    134 => "10111100101110101000000100101111", 
    135 => "00111110001001001101101010011110", 
    136 => "10111100110100111101110110000101", 
    137 => "10111101110000011010100111010001", 
    138 => "00111101101000101111010111110000", 
    139 => "00111101111010000011000101101000", 
    140 => "10111110001001101110100001010110", 
    141 => "10111110010001010110101011111111", 
    142 => "00111110010011010011011010101001", 
    143 => "10111100111111001000001110011011", 
    144 => "10111101111101010000010110000101", 
    145 => "10111100001000111111100010100101", 
    146 => "00111110010001100010101001101000", 
    147 => "00111110010110111000011110000101", 
    148 => "00111101110010101000011000000010", 
    149 => "10111100000001010011001001100111", 
    150 => "00111011100000110111111010001100", 
    151 => "10111011011111011110011011010001", 
    152 => "10111101110100010101011110101000", 
    153 => "10111101111001110001010011010000", 
    154 => "00111100011110101000000010011110", 
    155 => "10111101000001100100110010001111", 
    156 => "10111110000010110100100010000100", 
    157 => "00111100101001011101100101110101", 
    158 => "10111110000100001110110111110001", 
    159 => "00111100111111011111010000010100", 
    160 => "10111110000110011101110010100111", 
    161 => "00111110100100011111101100010010", 
    162 => "10111110010011001110100100110100", 
    163 => "10111101101011011100110111110010", 
    164 => "00111110100001000011001111111010", 
    165 => "00111100111110111111111101110010", 
    166 => "00111101110101110010000001100110", 
    167 => "00111110101001111000111010111101", 
    168 => "00111110000110111011111000111111", 
    169 => "00111101101011011010010111110110", 
    170 => "10111110000111011010111100000001", 
    171 => "10111110000011101100101100001010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weincg is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weincg is
    component myip_v1_0_HLS_weincg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weincg_rom_U :  component myip_v1_0_HLS_weincg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


