-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weipcA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weipcA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000000010111010011011000", 
    1 => "10111101100110010010000111101110", 
    2 => "10111101000001100010100011010110", 
    3 => "00111101000110110000011111100100", 
    4 => "10111101111100111111111011111000", 
    5 => "10111100101001110111010010110000", 
    6 => "00111110001001110011100011000110", 
    7 => "00111100101110111011000010011001", 
    8 => "00111101011111100001110011000011", 
    9 => "00111101111111000101011100100111", 
    10 => "00111101101010010010001001001011", 
    11 => "10111101010101110000010100101100", 
    12 => "00111101011011000111001100111001", 
    13 => "00111110010100101000000101001111", 
    14 => "10111101100111100110100011111110", 
    15 => "00111101100100111011110000100111", 
    16 => "10111011101110011001100001101000", 
    17 => "10111101111110110010010100001000", 
    18 => "10111110001100010001110100111110", 
    19 => "00111101110001001010100010111111", 
    20 => "10111110011110111101000111011101", 
    21 => "00111101111111011011010111000111", 
    22 => "00111101111101011011101011101010", 
    23 => "00111101101011110101010011011111", 
    24 => "10111110000011010111001110100000", 
    25 => "10111110001110110000100100001101", 
    26 => "10111101101101111001110111111101", 
    27 => "10111100010100010111101111001111", 
    28 => "00111101000010000000100011011100", 
    29 => "00111110001101000110010001111010", 
    30 => "10111110001011011001000010000111", 
    31 => "00111101110101110101001000000011", 
    32 => "00111110000101010100110111001110", 
    33 => "10111101110100110000100101101100", 
    34 => "00111101000101011011001000000100", 
    35 => "10111101101010010110101101110110", 
    36 => "00111101000101100101010011111100", 
    37 => "00111101101000101010110010010011", 
    38 => "00111100101011001111110011110110", 
    39 => "00111110100000011001100100010101", 
    40 => "10111011110110000101001001011110", 
    41 => "00111100001000011001111101111110", 
    42 => "10111100100001111011001110110111", 
    43 => "00111101101010010110001110111011", 
    44 => "10111110001000101100110000001111", 
    45 => "00111101110100001110001000011001", 
    46 => "10111011110110000101010111110000", 
    47 => "10111011101010010110011001100110", 
    48 => "00111101101010011011001001111110", 
    49 => "10111100110010000111100111001010", 
    50 => "00111100101000100011101101001110", 
    51 => "00111100100110000000010101100101", 
    52 => "00111101100110011111001111110100", 
    53 => "00111110010110101111101100000000", 
    54 => "00111101100000010000000000011111", 
    55 => "10111101100010001101101101011000", 
    56 => "10111110001010110101000010110011", 
    57 => "10111101001110100011111001001010", 
    58 => "10111110000100111110110000111010", 
    59 => "10111110001000111111110010100010", 
    60 => "00111110001100010101000110111001", 
    61 => "00111110011111001011011100101001", 
    62 => "10111101110000100010101100001001", 
    63 => "00111011010011001011001010100101", 
    64 => "10111110001100000100010110011001", 
    65 => "00111100111000111101101001111100", 
    66 => "00111110010100001100000111100001", 
    67 => "10111101111101111010111110110001", 
    68 => "10111101011000110001011100011010", 
    69 => "00111110011000010111100000011000", 
    70 => "10111101110011111011001000100011", 
    71 => "00111101111000110110001001101100", 
    72 => "00111101000001110010100101111000", 
    73 => "10111101000000110011011111000000", 
    74 => "10111010001000001001100101011110", 
    75 => "10111101110110100110000111101011", 
    76 => "00111101110010010100101000001110", 
    77 => "10111101100100011101010011000100", 
    78 => "10111110011100100001111101101001", 
    79 => "10111110001010011000001010010010", 
    80 => "00111100110000110100010101111111", 
    81 => "10111101101111111010110000011010", 
    82 => "10111101111111000001101111100100", 
    83 => "10111110100000111000101001011000", 
    84 => "10111110001111010001110010101111", 
    85 => "10111101111100111010010111111010", 
    86 => "10111100101100110011011000011111", 
    87 => "10111110001100000010010110010110", 
    88 => "10111011110010100101000010011110", 
    89 => "10111011100001110111000011001101", 
    90 => "10111011100101000111010101110111", 
    91 => "10111101001100011000000001011001", 
    92 => "10111110001101111111000011000010", 
    93 => "00111110001100101000111011101100", 
    94 => "10111101110111110001011000001011", 
    95 => "00111101010010000101001101011110", 
    96 => "10111011111001101010001100011101", 
    97 => "00111101010111011000100001001000", 
    98 => "10111110000011101001100011110000", 
    99 => "00111101010111111000101111001111", 
    100 => "00111101101101001110010000001111", 
    101 => "10111001010110110011110010010110", 
    102 => "00111011101101011001010010001010", 
    103 => "10111101101000100100001101011111", 
    104 => "10111100010001100100011100011010", 
    105 => "00111101111111110011011011011001", 
    106 => "10111101110110001111001100011010", 
    107 => "10111101110101110110000110000010", 
    108 => "10111101010100110011001000010010", 
    109 => "00111100001000101000100101111001", 
    110 => "00111101011110111100011010001111", 
    111 => "00111110000111010100101111000111", 
    112 => "00111110001001110111101010011110", 
    113 => "10111100111110010110110111111001", 
    114 => "10111100000111010110001000001100", 
    115 => "10111101101001101100000110111101", 
    116 => "00111110011000000101010010111010", 
    117 => "10111100110011100010011010011011", 
    118 => "00111101100111000000000011001100", 
    119 => "10111101111001100011011111100110", 
    120 => "00111101101110110110001001010110", 
    121 => "10111110011001010100100010010111", 
    122 => "00111110010001001011111011101101", 
    123 => "10111100010000110100111001111010", 
    124 => "00111110000101001000101100000110", 
    125 => "10111110001111110100000111101000", 
    126 => "00111110011010011011111010001011", 
    127 => "10111110001110001011101110011011", 
    128 => "10111101001111101100101001100110", 
    129 => "00111110001111010101010011010110", 
    130 => "00111101110010100001000000111111", 
    131 => "00111101101011100011100110000001", 
    132 => "10111110000110011111101101001000", 
    133 => "10111110001001001111100100010001", 
    134 => "00111101110000010001100000010010", 
    135 => "00111110100001111010000001100101", 
    136 => "10111110000100001001000100001000", 
    137 => "00111101000101100001000101001111", 
    138 => "00111110001000110100001111001110", 
    139 => "10111101110111101101010010001111", 
    140 => "10111101101000011100101111110100", 
    141 => "00111110000000011111100110000011", 
    142 => "00111100001110100000100010000110", 
    143 => "00111101111000011000101000010111", 
    144 => "10111110001101011101010100001011", 
    145 => "10111101110100111001001001000101", 
    146 => "00111101111101011100111001101101", 
    147 => "00111101101110110000110000000000", 
    148 => "00111101100011000110101001000110", 
    149 => "00111101110101001011001111110000", 
    150 => "00111101100110111000011010101100", 
    151 => "10111110000000100110000001110101", 
    152 => "10111100111110011100100110010001", 
    153 => "00111110001100101000111010111111", 
    154 => "10111101101110011110011000100010", 
    155 => "00111110000111100101010111000111", 
    156 => "00111110000100010100000111001101", 
    157 => "00111100011001100110110011011001", 
    158 => "00111101100111001000000000110001", 
    159 => "00111101111000011000100111001101", 
    160 => "10111101101110010100000011111010", 
    161 => "00111110001001101110100110111011", 
    162 => "10111101100110011111010011101000", 
    163 => "00111100000001010110101000001101", 
    164 => "00111110001001010010110001110011", 
    165 => "00111101100100001110011110101001", 
    166 => "10111101010010000110111000111001", 
    167 => "00111100111110111000001010110100", 
    168 => "10111100100011011000100010111111", 
    169 => "00111101110110001011000110011010", 
    170 => "00111101110001000110001110110101", 
    171 => "00111011001011101110111000010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weipcA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weipcA is
    component myip_v1_0_HLS_weipcA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weipcA_rom_U :  component myip_v1_0_HLS_weipcA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


