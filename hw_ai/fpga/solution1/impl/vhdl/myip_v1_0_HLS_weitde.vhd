-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weitde_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weitde_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101001010010001100100101", 
    1 => "00111110010110101010111000000110", 
    2 => "10111101011010010000010100000111", 
    3 => "10111110001011100100111100101011", 
    4 => "10111010111010111001101101011011", 
    5 => "00111110001101111000111111101011", 
    6 => "00111101110100011000010000100011", 
    7 => "10111101111001110110010110010000", 
    8 => "00111110011101101001001010110011", 
    9 => "10111101000001110000000001011000", 
    10 => "10111110000001101100110001101100", 
    11 => "10111101111001011011111000010010", 
    12 => "00111101101000100100111000111101", 
    13 => "00111110100101011111101110000010", 
    14 => "00111110001101100101110000001000", 
    15 => "10111110010110010111000010000001", 
    16 => "10111110000101011110111110110100", 
    17 => "10111110011011101111100010011010", 
    18 => "00111101101000110001110111100101", 
    19 => "10111110100000111010101010001000", 
    20 => "10111110001000110011001110000000", 
    21 => "10111101110000010010000010000001", 
    22 => "10111110001101110000000010010000", 
    23 => "00111101101010001010111001000010", 
    24 => "10111110000010101001100111000110", 
    25 => "10111101111111010110111000000110", 
    26 => "10111101101110000001011010101101", 
    27 => "00111101010001110101011100010000", 
    28 => "10111101001111000100010010100110", 
    29 => "00111101011001111000000111010110", 
    30 => "10111101100011010000000001011111", 
    31 => "10111101110011101100110011111010", 
    32 => "00111110001011000100000111111001", 
    33 => "10111100010001110101100100111000", 
    34 => "00111101000011110010101011000011", 
    35 => "10111110000110010111010011000000", 
    36 => "00111101110011011010000100000110", 
    37 => "10111101110011000110101001100100", 
    38 => "10111101000011010101111101000101", 
    39 => "00111101000111000010010110011000", 
    40 => "00111101011000101000010101100000", 
    41 => "10111101010111001100100111101100", 
    42 => "00111101011110000101000011001111", 
    43 => "10111101000011001110100010000000", 
    44 => "10111101110000001111100001000101", 
    45 => "00111101100110100110010110111110", 
    46 => "10111100100111001010001011010110", 
    47 => "00111110100010000001011110000011", 
    48 => "00111101100000001101001000011101", 
    49 => "10111101100001000011000010111101", 
    50 => "00111110000111101000101000110011", 
    51 => "10111101110000101010011110001001", 
    52 => "00111110011001111100110010000001", 
    53 => "00111110001011011011010001001110", 
    54 => "10111110000101010110000011011100", 
    55 => "10111101111001000110010111101100", 
    56 => "00111011110000000111111111001001", 
    57 => "10111100110000101101001110110001", 
    58 => "00111100011111110110000000001011", 
    59 => "10111110001110100111010111011001", 
    60 => "10111100111000100100010001100111", 
    61 => "00111101111011000100100100111100", 
    62 => "10111101000010011101000001010001", 
    63 => "00111110000010001011100110110111", 
    64 => "00111101110011011111111001011100", 
    65 => "00111101110100000110110100100000", 
    66 => "00111110100001110001011010000001", 
    67 => "00111101001110000001001010110111", 
    68 => "10111101010111101010111111111001", 
    69 => "00111101011101110111100111100101", 
    70 => "10111101001100001110010011110001", 
    71 => "00111101100001001111011111110110", 
    72 => "10111100001100100010010110110100", 
    73 => "10111101010110000010011000010110", 
    74 => "00111110000000110111001001001000", 
    75 => "00111110000100000000111110001001", 
    76 => "10111101000000111010001000111100", 
    77 => "10111101100111010111111111000000", 
    78 => "10111100111110100101000111111010", 
    79 => "00111101101000101010100101000111", 
    80 => "00111110010000100011000010111000", 
    81 => "00111100110001100101111011110110", 
    82 => "10111101101101110001011110010000", 
    83 => "10111100001011100110111111110111", 
    84 => "00111101001010110101101000101011", 
    85 => "00111101100110100011011111101001", 
    86 => "00111110000111010001111011000101", 
    87 => "10111101101010001111100101000100", 
    88 => "00111110000010100011111000010000", 
    89 => "10111110000101100011100001010110", 
    90 => "10111110010100001101111011000000", 
    91 => "10111101011000110010001000111000", 
    92 => "00111101100100001111000011011111", 
    93 => "00111110101101011111111011111101", 
    94 => "10111101110110011101100101011111", 
    95 => "00111101011101001101001010101110", 
    96 => "10111110001101111011000000100111", 
    97 => "00111110010101001011101100010111", 
    98 => "10111101101010101000101001001110", 
    99 => "10111101110100100000101001011010", 
    100 => "10111110010011001010010001001100", 
    101 => "10111101111000000111001100100001", 
    102 => "00111101100001001010100011000010", 
    103 => "10111110000110110000110010111011", 
    104 => "10111110000011100110110101000110", 
    105 => "10111110001101101100101001100101", 
    106 => "00111110000101110100100001011110", 
    107 => "00111101011010010011011000100100", 
    108 => "10111110001110100100110100000000", 
    109 => "00111101101000000011010000010110", 
    110 => "10111011001001001010001111111011", 
    111 => "10111101011111100011101011101111", 
    112 => "00111110001001011001100011000110", 
    113 => "10111101100100000010111100000111", 
    114 => "00111110000110111111000101011110", 
    115 => "00111101110101101010001111001011", 
    116 => "00111110100100001000100101000011", 
    117 => "00111101100010101010000000100110", 
    118 => "00111101100000111010100011110000", 
    119 => "10111101110110001100110100101010", 
    120 => "10111110011010111111011111100011", 
    121 => "00111101101100010101110110000110", 
    122 => "10111100010100001010100101001011", 
    123 => "00111110001010011111000111111010", 
    124 => "10111101100111000111100011100100", 
    125 => "00111101111101100100010111011110", 
    126 => "10111101100000000111011110111110", 
    127 => "10111100101010011011001100001100", 
    128 => "10111101101111101100101001011011", 
    129 => "10111101011101010111101110010101", 
    130 => "00111101000100101101001101011000", 
    131 => "10111101001101010010111011001000", 
    132 => "10111110000011010001000100111001", 
    133 => "00111011100100100000111100010101", 
    134 => "00111110010111110001010101100111", 
    135 => "00111110010110110111001101001011", 
    136 => "00111110010101111010000100110011", 
    137 => "00111101001111111101011010010110", 
    138 => "00111100010110010001011000101010", 
    139 => "10111110000101100101000110001010", 
    140 => "00111101101111110111111100011110", 
    141 => "00111100110100111101010101001101", 
    142 => "00111100000010101101101100000001", 
    143 => "00111110000011001010101100011110", 
    144 => "00111110001011010010001001001010", 
    145 => "00111101011010001000100001111011", 
    146 => "10111100110100000101010101101110", 
    147 => "10111110001000010111010111110110", 
    148 => "00111110001011111100001101100110", 
    149 => "10111110001110000100001111001011", 
    150 => "00111110001001000110110101100001", 
    151 => "10111110011101010011101011111100", 
    152 => "00111101100111010000011110101101", 
    153 => "00111110010111010000100111111010", 
    154 => "00111100000111101011011010011101", 
    155 => "10111101010100101011010101010101", 
    156 => "00111110011010000011010101010110", 
    157 => "10111100110010010100110101110011", 
    158 => "10111101111100110100010000101000", 
    159 => "10111100111001101100110001011011", 
    160 => "10111101011111011111101000111100", 
    161 => "00111101100011111100110010111101", 
    162 => "00111110000100110011111011000011", 
    163 => "00111100001100110000111101110001", 
    164 => "10111110001101100001101010010110", 
    165 => "00111110001001000011001010110000", 
    166 => "00111110001111001110111000011101", 
    167 => "10111101101010111011001011101101", 
    168 => "00111110000001111000011001011111", 
    169 => "00111101101100000010101010001100", 
    170 => "00111101100100010100100110000110", 
    171 => "00111110000000111100110010011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weitde is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weitde is
    component myip_v1_0_HLS_weitde_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weitde_rom_U :  component myip_v1_0_HLS_weitde_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


