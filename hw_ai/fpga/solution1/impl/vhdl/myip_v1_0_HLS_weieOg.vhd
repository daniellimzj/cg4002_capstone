-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weieOg_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weieOg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101101101100000111001011", 
    1 => "10111101110111011100001100001001", 
    2 => "10111101111010110001001111110001", 
    3 => "00111101100010111101100011000100", 
    4 => "00111110001100011111000110110011", 
    5 => "10111110000011100001001011101000", 
    6 => "00111101011010100100101111010110", 
    7 => "10111101110100110001001110111100", 
    8 => "00111110100101111111011001011111", 
    9 => "10111110001000110101011111110010", 
    10 => "10111100110100000010111101110011", 
    11 => "10111101100100001000010011010000", 
    12 => "10111101100111000111010010001011", 
    13 => "00111110011010011111101101011010", 
    14 => "10111100111110100001110010100110", 
    15 => "10111110000101101011111101100101", 
    16 => "00111101110001010001011110000011", 
    17 => "00111101100001010100100001101001", 
    18 => "10111101110010000001001100010010", 
    19 => "10111110000000111010000101100100", 
    20 => "10111101100110011011010001101010", 
    21 => "10111110100110101110111000110011", 
    22 => "10111101010100000101110101101001", 
    23 => "10111110010011100000110011000011", 
    24 => "10111110001011100001001011011110", 
    25 => "10111110011000010011010100010001", 
    26 => "00111101101011000110000011101010", 
    27 => "10111110001010111101000010011100", 
    28 => "10111110100110000001110000111000", 
    29 => "00111101110011101101111111010111", 
    30 => "00111101110100000100000011101111", 
    31 => "00111110011010110110000010010010", 
    32 => "00111100100010010110010011101001", 
    33 => "00111110100010101010100111110011", 
    34 => "00111110000111000010010011101101", 
    35 => "10111101001100100000011010011010", 
    36 => "10111010111101111101001010100000", 
    37 => "00111100100110110001011100011100", 
    38 => "10111101101110001001101101010111", 
    39 => "10111110001010010100101011100011", 
    40 => "00111110010101001110011010010001", 
    41 => "10111101111010100100010100011110", 
    42 => "10111110011110100111001010000110", 
    43 => "00111101111110110111001010001011", 
    44 => "10111101100001000011001110001110", 
    45 => "10111110000100100110110010001001", 
    46 => "00111110001011001000010110111011", 
    47 => "00111110000011101101001010110110", 
    48 => "10111101001110000101011000010000", 
    49 => "00111100011101110010100001100100", 
    50 => "00111110011010000010110111111100", 
    51 => "10111101100100110011111011001101", 
    52 => "00111101001001001000110000100011", 
    53 => "00111101110100001110111000001100", 
    54 => "00111101100001010101001110100000", 
    55 => "00111101001101000111100111001011", 
    56 => "00111110001001100000011101010000", 
    57 => "10111110010101110011100010000001", 
    58 => "10111110001100010000110100110011", 
    59 => "10111110000010010010010110001111", 
    60 => "10111110010101011100000110101001", 
    61 => "10111100101100100011101000100100", 
    62 => "10111110001111100011000000110011", 
    63 => "00111101101110011111100011011101", 
    64 => "00111101111100110001101101011010", 
    65 => "00111110011100001111011110000010", 
    66 => "10111101011001000101011001111101", 
    67 => "10111100111110110101100111011110", 
    68 => "10111110100001010011010010111001", 
    69 => "10111101010000110110011001111010", 
    70 => "10111101101011101001101000111010", 
    71 => "10111101100110010101110000001000", 
    72 => "00111110000000011111100000001110", 
    73 => "00111011100100001011111010100100", 
    74 => "10111101101110000110010100110000", 
    75 => "10111110001111010101000001111000", 
    76 => "10111101110011010110000011100111", 
    77 => "10111101011000000010001010000010", 
    78 => "00111100100100001111011010111001", 
    79 => "10111110001101010110101100011000", 
    80 => "00111100110011101011100101101000", 
    81 => "10111100111011101010001000100110", 
    82 => "10111101111100100000101100110000", 
    83 => "10111101011010001000001001101100", 
    84 => "00111101000010111110110101100101", 
    85 => "10111110001010101101010001111000", 
    86 => "00111011010111010100000110001111", 
    87 => "10111110100000111101010110101001", 
    88 => "10111110010001000101110010011001", 
    89 => "10111101111110001011010101110000", 
    90 => "10111100101111111110000101000001", 
    91 => "00111101011001111110101000100011", 
    92 => "10111101101100011011110111000010", 
    93 => "00111110010001110111001011101100", 
    94 => "10111101101110001010001011110000", 
    95 => "10111101111001010001110110111011", 
    96 => "10111110001010011011110101011111", 
    97 => "00111110010100001000100010010110", 
    98 => "10111101110000001010001010110101", 
    99 => "10111110011101000001000010000100", 
    100 => "00111101000101111011100001101101", 
    101 => "00111101100001110101011101000010", 
    102 => "00111101111000010010010100010110", 
    103 => "10111101001111100100001011100000", 
    104 => "10111110100010000000111000100101", 
    105 => "10111110000000000000001110011000", 
    106 => "10111101000100011101001010000010", 
    107 => "10111101010111110100110111001000", 
    108 => "00111011011010101000001001010111", 
    109 => "10111101110101101111011110100100", 
    110 => "10111110000111000001001000110010", 
    111 => "00111110001010011010111101110000", 
    112 => "10111101111100000111001111111111", 
    113 => "10111100111001001010011010100111", 
    114 => "00111110010001010100100001000101", 
    115 => "10111101010111110001011010110001", 
    116 => "00111110001011110000111111101100", 
    117 => "00111101110101011110000001001101", 
    118 => "10111110010000000001100010010110", 
    119 => "10111100111110110001010010100000", 
    120 => "10111110011010100011101000010110", 
    121 => "10111101100011001110111100100001", 
    122 => "10111101001011000101100100100011", 
    123 => "10111110000111011110111101111110", 
    124 => "10111101100111100000000100011100", 
    125 => "00111110011011010100101101010100", 
    126 => "00111101100010100010100001111001", 
    127 => "00111011100101101000110011011111", 
    128 => "00111101010100011100011100111010", 
    129 => "00111101000000110001001000011010", 
    130 => "10111101100101001000111100111011", 
    131 => "00111101100101101001110111011111", 
    132 => "10111101100011111100001101111111", 
    133 => "10111101110000100100100100000100", 
    134 => "00111110010101101001011011101111", 
    135 => "00111101000110000011101011010101", 
    136 => "00111110001101100010001101110001", 
    137 => "00111110010011011111101000011100", 
    138 => "00111110100000111101110010010011", 
    139 => "10111110001000011110111001001111", 
    140 => "10111101101110011111001110011001", 
    141 => "00111110010000111110010001001101", 
    142 => "10111011011000100111010000100100", 
    143 => "10111110000100001101010010110110", 
    144 => "10111101010000100101001010010100", 
    145 => "00111101011000101011011011110010", 
    146 => "00111110001010110100000010101111", 
    147 => "10111110001101110111010010001111", 
    148 => "00111110001000100010101000110011", 
    149 => "00111101011010110101010011001000", 
    150 => "00111110010011001101000000010101", 
    151 => "00111101100111011111010111100110", 
    152 => "10111110000101000001110011111000", 
    153 => "00111101111000000110010000110101", 
    154 => "10111100001001010010010101010010", 
    155 => "10111110001001110100001010101101", 
    156 => "00111110011100100010110110111100", 
    157 => "00111100111101110110111000100110", 
    158 => "10111110010110001101010000101101", 
    159 => "10111110010001111010010001000011", 
    160 => "00111101101101010111010000110101", 
    161 => "10111110011100001111011010000011", 
    162 => "00111010111110011111011111001110", 
    163 => "00111110001100110011010010000000", 
    164 => "10111100110001100000100001001100", 
    165 => "00111101011001011101111000101110", 
    166 => "00111100100100100110011101110010", 
    167 => "00111010000111000110100111010001", 
    168 => "00111101110110001101110000111001", 
    169 => "00111110001000010010001111010101", 
    170 => "10111101111100101001110000010110", 
    171 => "00111110001100011110101000111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weieOg is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weieOg is
    component myip_v1_0_HLS_weieOg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weieOg_rom_U :  component myip_v1_0_HLS_weieOg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


