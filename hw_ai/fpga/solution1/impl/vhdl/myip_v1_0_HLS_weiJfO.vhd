-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiJfO_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiJfO_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001001001101000111111010", 
    1 => "10111101100010110000011011011000", 
    2 => "10111011100110000111100000011010", 
    3 => "10111101010000100100000111001000", 
    4 => "10111110000111111000100111011111", 
    5 => "00111101110000101110010001001101", 
    6 => "10111100011110100100100101111100", 
    7 => "10111101111100000111111111110001", 
    8 => "00111101111001010101011011111000", 
    9 => "10111101100000101101110001110101", 
    10 => "00111101100011011010100011110100", 
    11 => "10111110011010101110011111000010", 
    12 => "00111101001011101000010100011011", 
    13 => "00111110010110001010011100110000", 
    14 => "10111110000001000011111000000011", 
    15 => "00111101111100001110101010101010", 
    16 => "00111101100100000001011011101000", 
    17 => "00111100110001110000000011000010", 
    18 => "00111101111111001110011111110011", 
    19 => "10111101000010000011110101111000", 
    20 => "00111110001011010100011010010011", 
    21 => "10111011001001000000001101111100", 
    22 => "00111101100110110001011011100100", 
    23 => "10111101000110100101000010101000", 
    24 => "10111110001001011010010011100010", 
    25 => "10111011111000110001100010011010", 
    26 => "10111101100100010011101100100100", 
    27 => "00111110001010110111101100100110", 
    28 => "10111110010010011010001011000110", 
    29 => "10111100111001000110101000000001", 
    30 => "10111100110000010011011100110101", 
    31 => "00111100000100110001000000100010", 
    32 => "00111110010110110111110111111011", 
    33 => "10111110000000111110010011100101", 
    34 => "00111110001001001000000011111110", 
    35 => "10111101111101110001101100001101", 
    36 => "10111110000101000111000110000101", 
    37 => "00111101101011100001111101100101", 
    38 => "10111110010011101001001000110111", 
    39 => "10111101100111110010001110011001", 
    40 => "10111110000100111001000100001010", 
    41 => "00111100100000001101100011101101", 
    42 => "10111101111010101010111010110101", 
    43 => "10111110001110010010110001001100", 
    44 => "00111101010010000111010000101111", 
    45 => "10111110000101010000100001101100", 
    46 => "10111101100101100010111100101010", 
    47 => "00111110000101001011000011001101", 
    48 => "10111110010000100000101100010101", 
    49 => "10111101011000100100100100001001", 
    50 => "00111101011010001100000101101100", 
    51 => "10111101111111101000000011110100", 
    52 => "10111110000110101001011000010110", 
    53 => "10111101001100011010010100000010", 
    54 => "10111100111001010111110110011111", 
    55 => "10111110000111011011000111000111", 
    56 => "00111110000000110010010111011001", 
    57 => "10111101110011100111111111101000", 
    58 => "00111101001110111111010000110001", 
    59 => "10111101011001010110111011000101", 
    60 => "10111101101011111100100110011110", 
    61 => "00111100110101100111011000110101", 
    62 => "10111101000000001100101110110010", 
    63 => "00111101111000101111100100001101", 
    64 => "10111110011011000100110000010000", 
    65 => "00111110001010010101111001010000", 
    66 => "00111110011110100100001110001011", 
    67 => "10111101111100110011000010111101", 
    68 => "10111101100110100101111010100100", 
    69 => "10111100011111011011100110110111", 
    70 => "10111101100011100100110000101000", 
    71 => "00111100100101000110100110110010", 
    72 => "00111101101001110010110100110000", 
    73 => "00111100110000001000010001001011", 
    74 => "00111110010001111001011111000001", 
    75 => "10111110000110001100000101000101", 
    76 => "10111101100000001011100011000011", 
    77 => "10111100110001111110111010010111", 
    78 => "10111110000100111001001101101111", 
    79 => "10111110000110101001000001010010", 
    80 => "00111101111101100100001111010000", 
    81 => "10111100110111100011110101001000", 
    82 => "10111110000101100011011101000101", 
    83 => "00111101110100010001000110110100", 
    84 => "00111101100011100100111111010001", 
    85 => "10111101010111010110001010111001", 
    86 => "00111101111011010001101100010110", 
    87 => "10111100110101000011110111100010", 
    88 => "00111100011111010001000111001001", 
    89 => "00111110000101101100101101100101", 
    90 => "10111110000110101010000000101000", 
    91 => "00111001011100000100111001011110", 
    92 => "00111101111001110011101101011101", 
    93 => "00111110000010000101100011111000", 
    94 => "10111100100010100000001100010111", 
    95 => "00111110000010110100110110110100", 
    96 => "10111101010000000101111110100000", 
    97 => "00111110000001001011010010001010", 
    98 => "00111101011010111111010011110111", 
    99 => "10111101000010000100100011010001", 
    100 => "10111101100100010100110000100011", 
    101 => "00111100101100011101101000000000", 
    102 => "10111101010011110101011011000000", 
    103 => "00111101101111111011101100110110", 
    104 => "00111110000110010110111110011110", 
    105 => "10111101001011101100000001100110", 
    106 => "00111100110011000001001001110011", 
    107 => "10111101100101000000110101111101", 
    108 => "00111101100111001111100001110011", 
    109 => "00111100100111000100000010001110", 
    110 => "10111101100011010111101010101011", 
    111 => "00111101101010110101100001100010", 
    112 => "10111100110111100111110000000100", 
    113 => "10111101100000011111100001110000", 
    114 => "00111101011011100011101011000101", 
    115 => "10111110000100111010100110001111", 
    116 => "10111101100010110101110101000000", 
    117 => "10111101101001011100111111010000", 
    118 => "10111100010100100001000011010110", 
    119 => "00111110000001000010000100011111", 
    120 => "00111100100100100000110101111110", 
    121 => "00111100110111101111001000100101", 
    122 => "00111110000010000101001110100111", 
    123 => "00111101001111111010111001111110", 
    124 => "00111101010101000000110010110010", 
    125 => "00111110010101110111010000100111", 
    126 => "00111110011110100011101101101001", 
    127 => "10111110001111111111111000100110", 
    128 => "00111110010000001011011000111001", 
    129 => "10111110000010101000100011001110", 
    130 => "10111101011101101000001011000100", 
    131 => "10111101111101001000001001001101", 
    132 => "10111101110111001100100100101100", 
    133 => "10111101000000100010001011100100", 
    134 => "10111101100001111010111110100000", 
    135 => "10111110000000101110001010111000", 
    136 => "00111101101011011011100111001011", 
    137 => "10111110001100010100001111010100", 
    138 => "10111101110110000000001110101110", 
    139 => "10111110000110011100000100010110", 
    140 => "10111110001110110011100000001010", 
    141 => "10111110001010001011010101001110", 
    142 => "10111101001010000100101001110000", 
    143 => "10111110000111110111100000100010", 
    144 => "00111101001110000100110000001101", 
    145 => "00111100101001111110110101011100", 
    146 => "00111100010101011111000011011100", 
    147 => "10111101111000001110110011011101", 
    148 => "00111101111001010110011001101010", 
    149 => "10111100101001000100110111100010", 
    150 => "00111110011001000110100010010101", 
    151 => "10111101000000001111010001100010", 
    152 => "00111101111100000001011111110011", 
    153 => "00111110011001010010100010010010", 
    154 => "00111110000100001011100010011111", 
    155 => "10111101100100110011111010100100", 
    156 => "00111110001000101011011011101000", 
    157 => "10111101001010011100000011111101", 
    158 => "10111100011001111001100111011101", 
    159 => "10111101110101110101001111101010", 
    160 => "00111101100011101110000000101000", 
    161 => "00111110011001100011010010011101", 
    162 => "10111110000001010101000101000000", 
    163 => "00111101111001110010000100000011", 
    164 => "10111101010111100101101101110101", 
    165 => "00111110001110110101000010010010", 
    166 => "00111101000101000010001110011100", 
    167 => "00111100001001110111110000100111", 
    168 => "00111101101110110100001100101011", 
    169 => "00111101111100100001010111110000", 
    170 => "00111101010101111101100110000011", 
    171 => "00111011110110010101100010010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiJfO is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiJfO is
    component myip_v1_0_HLS_weiJfO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiJfO_rom_U :  component myip_v1_0_HLS_weiJfO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


