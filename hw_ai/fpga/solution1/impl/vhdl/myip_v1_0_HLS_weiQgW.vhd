-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiQgW_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiQgW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011011001000000010001110", 
    1 => "00111110000101111001110011000000", 
    2 => "00111110001010001011011000001101", 
    3 => "10111110001000100111101110001111", 
    4 => "10111100011010100001010101110010", 
    5 => "00111110000010100011101101110110", 
    6 => "10111100101111100010101111011010", 
    7 => "10111110000010000000001000000011", 
    8 => "10111101011011111000101011111101", 
    9 => "10111101010101010110000100001010", 
    10 => "10111101110001111110010111010011", 
    11 => "10111110101110100110111001100110", 
    12 => "00111110011110000111000000110110", 
    13 => "10111110011101101001000110101111", 
    14 => "10111110000111111010111101000111", 
    15 => "10111110001100110100000100010111", 
    16 => "00111110100000101001100000110100", 
    17 => "00111110010101100101011010010110", 
    18 => "10111101001010011111001001110110", 
    19 => "00111110001100000101001100100000", 
    20 => "00111100101000001111001101010111", 
    21 => "10111110010100111111011111011000", 
    22 => "10111100011001100100011010000010", 
    23 => "00111101001110110111111111010011", 
    24 => "00111101101011100100011101100010", 
    25 => "10111110001110101110001111110010", 
    26 => "10111110000110000000111001100000", 
    27 => "00111101000100101001100001100110", 
    28 => "10111110011101101101101111010000", 
    29 => "00111110000000111010111100100001", 
    30 => "00111110010010001111101101110110", 
    31 => "10111100111101011100111000101011", 
    32 => "00111101011011100100010101111110", 
    33 => "00111110000010010011011110100001", 
    34 => "00111101101110111011111010111000", 
    35 => "10111101100111110111011010101011", 
    36 => "10111101111010111110100010000011", 
    37 => "00111110011010111010101011001111", 
    38 => "00111100110101001110111001010101", 
    39 => "10111101111111101101011010100001", 
    40 => "10111101100111101101001111010011", 
    41 => "10111101101110010100111010000011", 
    42 => "00111100011111111011000110110101", 
    43 => "00111110000100011001110100100111", 
    44 => "00111110000111101111000100111101", 
    45 => "10111110011111111000101111001010", 
    46 => "00111101001001101011001001101011", 
    47 => "00111101001010100011101100010011", 
    48 => "00111110011000000011001111010101", 
    49 => "10111101101101011101000011010010", 
    50 => "00111110000011001100101001111100", 
    51 => "00111110010100110101101100000011", 
    52 => "00111101110111111111110110100101", 
    53 => "10111101100000110010110011100001", 
    54 => "00111110001110100000110010100110", 
    55 => "10111110100000000010011101100100", 
    56 => "10111100000000001111110100111000", 
    57 => "10111101100100000101101100111111", 
    58 => "00111100010010001101011011101110", 
    59 => "00111101101111000010000111010011", 
    60 => "10111110001000100011100101010001", 
    61 => "00111110001011101011100010111000", 
    62 => "10111101100100001110101011110011", 
    63 => "00111110011011010111111001011011", 
    64 => "00111101001000010000001101111010", 
    65 => "00111110000100010011011010000010", 
    66 => "00111110011001111011001011101100", 
    67 => "10111101100110111110111101101010", 
    68 => "10111110001011001011001011001101", 
    69 => "00111101001011101111000111000100", 
    70 => "10111110100010100010000000101001", 
    71 => "10111101010011011100010000011000", 
    72 => "00111011101110111010001001010110", 
    73 => "00111101100001100110011110001000", 
    74 => "00111110001100100101011010100110", 
    75 => "10111110101010110110100000000111", 
    76 => "00111110000110110010100000111110", 
    77 => "00111110011001011111100100011001", 
    78 => "10111101100010001001000100101110", 
    79 => "00111110010000100101101101110001", 
    80 => "00111101010100110011110011110100", 
    81 => "00111110011011010111111010110001", 
    82 => "00111110011010011010010110101110", 
    83 => "10111100100111111101100101010111", 
    84 => "10111101101101100101100100010111", 
    85 => "10111110000111100000010111000001", 
    86 => "10111101100111100110001011011100", 
    87 => "00111101100111111001010010010000", 
    88 => "10111110000100100010000000110010", 
    89 => "10111110001100000110011110010101", 
    90 => "10111101101110011100010001010100", 
    91 => "00111101101001111111111100101001", 
    92 => "00111101100010010011100010011101", 
    93 => "10111101100011010011001100010010", 
    94 => "10111110001111111101010111011001", 
    95 => "00111101110100110101101001110100", 
    96 => "00111100100110010001100101011000", 
    97 => "00111101101100010101101111101111", 
    98 => "10111100111001111001111100000000", 
    99 => "10111110001000100010111111010110", 
    100 => "00111101111101100110110110110110", 
    101 => "00111101010000001101101001111111", 
    102 => "10111110000110011111110011001110", 
    103 => "10111100100000001000110001111111", 
    104 => "10111100110011110111000100100011", 
    105 => "10111101010101001101001101101101", 
    106 => "10111101010110011011000010110101", 
    107 => "00111101101001001010010010100000", 
    108 => "10111101100101100110100100100010", 
    109 => "10111100110111011011101010101111", 
    110 => "00111101100001011100111101101101", 
    111 => "10111101110110110111111111000100", 
    112 => "00111100100111100010110000011101", 
    113 => "10111101100011010011000000000111", 
    114 => "10111101101001111100110001001001", 
    115 => "00111101010101111010111100111111", 
    116 => "00111110011101110111000000101110", 
    117 => "00111101111000110010110010001001", 
    118 => "10111101111011111001110000101011", 
    119 => "00111101101101110001000110010110", 
    120 => "10111100111010111000010100001011", 
    121 => "10111101111101111000010000101110", 
    122 => "10111101100110101100111011001010", 
    123 => "00111101110101110011100111010001", 
    124 => "00111101110111000111101010000001", 
    125 => "00111110001101001100000111110100", 
    126 => "00111101110110100100010100100101", 
    127 => "10111100111111010001011110011110", 
    128 => "10111101110100010100011100000001", 
    129 => "00111101001010101100110010001011", 
    130 => "00111110100000111101101000010001", 
    131 => "00111100000110001010001100111100", 
    132 => "10111110000010010110111010100100", 
    133 => "00111101110110101010001011110111", 
    134 => "00111110001100011110111110011000", 
    135 => "10111110100001101100000101101001", 
    136 => "10111101101110000010010010100001", 
    137 => "10111101110111010100100010100111", 
    138 => "00111110001111100011000010010111", 
    139 => "10111110001001001101100100100010", 
    140 => "10111110101001101011111011001010", 
    141 => "10111100110001101001000111100000", 
    142 => "10111110001101000010111110010111", 
    143 => "10111101011000010100001010011001", 
    144 => "10111101100100111011111111111011", 
    145 => "10111101101110000010001101011001", 
    146 => "10111101110010101000011010101010", 
    147 => "10111110000110100011100110111111", 
    148 => "10111101011001000011110110111101", 
    149 => "00111101010111011110111101001111", 
    150 => "00111110001001110100000001000100", 
    151 => "10111011000011011000001101100001", 
    152 => "10111101101111101111101101000110", 
    153 => "10111100111010001111100111010100", 
    154 => "00111110010100111000010011001100", 
    155 => "00111101101111010010110111100000", 
    156 => "10111110001101110110110000101110", 
    157 => "10111101100101000101101010010010", 
    158 => "10111110011100101110111100111010", 
    159 => "10111101001110111100110100010100", 
    160 => "00111011101011001101101000111000", 
    161 => "00111110101100100010011100100100", 
    162 => "10111110011111011011011110000101", 
    163 => "00111110001001010000110010000110", 
    164 => "00111101001111110001111000101101", 
    165 => "00111110010001010010010101010100", 
    166 => "10111110000110100110000110000011", 
    167 => "00111011001101001100101101101001", 
    168 => "10111110001011000001001000111000", 
    169 => "10111110000011110010000111011100", 
    170 => "00111101101001110001000101000010", 
    171 => "10111110010000010011011101000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiQgW is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiQgW is
    component myip_v1_0_HLS_weiQgW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiQgW_rom_U :  component myip_v1_0_HLS_weiQgW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


