-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weicud_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weicud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100010100011110110011000", 
    1 => "00111101110110111010111001110011", 
    2 => "00111101100111001101010111001011", 
    3 => "00111101010101001101100000010010", 
    4 => "00111110000001101100101010011100", 
    5 => "10111100101011001011110000110000", 
    6 => "00111110000000011000011100111011", 
    7 => "00111110011101100100100001101101", 
    8 => "00111110010001000111000001110110", 
    9 => "00111101011111000011011010010100", 
    10 => "10111101011100001110011101110001", 
    11 => "10111100010111110100101001110110", 
    12 => "10111110001010100000011111011101", 
    13 => "00111101110011010010010100000111", 
    14 => "00111110000110000101011010111101", 
    15 => "00111101011011001010000011011001", 
    16 => "10111101101100001111111010011111", 
    17 => "10111101010111111101100011010000", 
    18 => "10111110010111000111110000011110", 
    19 => "00111010010011101100100011011000", 
    20 => "10111110001111011100110100010011", 
    21 => "00111101001010100111011000100110", 
    22 => "00111101111100100100011110011101", 
    23 => "10111101110110101000101001011011", 
    24 => "00111110000101010101110100110010", 
    25 => "10111110001001111010000111001001", 
    26 => "10111110010111111100101000111010", 
    27 => "00111100101101110111101001111100", 
    28 => "00111101101010000100010111000011", 
    29 => "10111101100101111011000010000010", 
    30 => "10111101110011111010110100111100", 
    31 => "00111110000010000000101111000111", 
    32 => "10111101110101100010101011101001", 
    33 => "10111101011111111110001100001110", 
    34 => "10111110000111000110010100111001", 
    35 => "10111101100110101000011011000010", 
    36 => "00111101100110110110011110000100", 
    37 => "00111101111010001001010000111000", 
    38 => "00111110000111011010100100001100", 
    39 => "00111101111101111101100110101011", 
    40 => "10111011101010001011000000110000", 
    41 => "00111110100001110001000011111011", 
    42 => "00111101001111011100000010110011", 
    43 => "00111101101101101000010101101001", 
    44 => "00111101100100010101111100101000", 
    45 => "10111110001001100000101110011101", 
    46 => "10111101111100110010011110011111", 
    47 => "10111100000101100110010010011000", 
    48 => "00111101101110010001111101010001", 
    49 => "00111110000000110000110110111000", 
    50 => "10111101111101000001001010101110", 
    51 => "10111101000101010111011111110010", 
    52 => "10111110000010111101100101011100", 
    53 => "10111101110011110000111111100001", 
    54 => "00111100110101000010001101101110", 
    55 => "10111110010000001101111011011000", 
    56 => "10111110000010001100110011011001", 
    57 => "10111100001010001001001011100111", 
    58 => "00111100110100100101010101100011", 
    59 => "10111101001011010110100001101010", 
    60 => "10111100111010011100100010010101", 
    61 => "00111101111111000101111000100110", 
    62 => "00111100010010100011110101011111", 
    63 => "00111110000010000010110111010010", 
    64 => "00111101001000101111110001010111", 
    65 => "10111100101011001010101011000010", 
    66 => "00111110000011011100101111011100", 
    67 => "00111110001100011100101000100110", 
    68 => "10111101111001001111000010010111", 
    69 => "00111110000010011111110111000010", 
    70 => "10111101001110001101110010001001", 
    71 => "10111101011010110101100000010100", 
    72 => "10111101001000001111100001010001", 
    73 => "00111101010011100011000001010011", 
    74 => "00111101100010110000101001111101", 
    75 => "00111100001111001001010001111111", 
    76 => "10111101100110101010111100000111", 
    77 => "00111101001001011100100001001111", 
    78 => "10111110001011100010001100100000", 
    79 => "10111101100110100100101010011101", 
    80 => "10111101110110101011111000000101", 
    81 => "10111110000110000110011001101101", 
    82 => "10111101001110001001010110001100", 
    83 => "10111101010000000100010001010110", 
    84 => "10111110010010110001010101101010", 
    85 => "10111100010101111001110110001001", 
    86 => "10111101111000110000111111111101", 
    87 => "00111101010110011111010001000010", 
    88 => "00111101110010100000111000110001", 
    89 => "00111101101100000111111000011111", 
    90 => "10111101101111101110110010111100", 
    91 => "00111101101001011011111000101101", 
    92 => "10111101000010100100101111010100", 
    93 => "00111110010110111001111001000011", 
    94 => "00111101011111010001001101011100", 
    95 => "10111101111111000010010101011100", 
    96 => "10111110010101101101110011100010", 
    97 => "00111101100101001101101111000100", 
    98 => "10111101001100010100111011000110", 
    99 => "10111101100101100110101101110100", 
    100 => "10111110001111001100001001111011", 
    101 => "10111101001001110011011001101001", 
    102 => "10111100111110010001111010101011", 
    103 => "10111100001001101110010000010100", 
    104 => "10111101101001001111011010100100", 
    105 => "10111011101110000101110011010010", 
    106 => "00111101110011000010011110011010", 
    107 => "00111101101101000000000110100010", 
    108 => "10111110010100010110100011101111", 
    109 => "00111101000110011110001001001111", 
    110 => "00111101100101000000000101101011", 
    111 => "00111100011011010100010101101101", 
    112 => "10111101010101101110100101010111", 
    113 => "00111101001100101011111001011111", 
    114 => "00111110000101111101100010011110", 
    115 => "10111101100010111001001101111111", 
    116 => "10111101100111110111010011011011", 
    117 => "00111110000111000000010001110011", 
    118 => "00111011110110110111110001010100", 
    119 => "10111100101111001001100011000001", 
    120 => "00111101111100110101111010010100", 
    121 => "00111010111100001011001100000101", 
    122 => "10111101000001001100011111011101", 
    123 => "00111110010110110101100001110011", 
    124 => "10111100110011111011100101010001", 
    125 => "10111101101111111110100000011101", 
    126 => "10111101111011111100111011101101", 
    127 => "00111101111001100011011101100100", 
    128 => "00111101100110111010000000010001", 
    129 => "00111110100100100101111011110001", 
    130 => "00111101011010111001110001101001", 
    131 => "00111100110101111010010000111111", 
    132 => "10111110000001101100001010100111", 
    133 => "10111110010000000011011000011110", 
    134 => "10111101100111111100100000110100", 
    135 => "00111110010011110110010110010000", 
    136 => "00111101111001010100010111001111", 
    137 => "10111110011000011110101000001100", 
    138 => "00111110011011110111101010110110", 
    139 => "00111011111111100101001111011101", 
    140 => "10111101110001100001010000101011", 
    141 => "00111101010000001100011010000111", 
    142 => "00111101011010101100110000111111", 
    143 => "10111101100000110000001101101000", 
    144 => "00111101110111010010001000001111", 
    145 => "00111101001110001011110101011000", 
    146 => "10111110011010010011011010111010", 
    147 => "00111110011010101101000100111000", 
    148 => "10111100100000011101100111111000", 
    149 => "10111110000110000100111001101011", 
    150 => "00111110001101001000110010100000", 
    151 => "10111110000011100010111110111000", 
    152 => "10111101110110010100111110010110", 
    153 => "00111101010001011010010011010011", 
    154 => "00111101101101100001011100001110", 
    155 => "10111110000101010001010010111000", 
    156 => "10111110001011000111000110001110", 
    157 => "00111101100010111111100011110101", 
    158 => "00111101010000101011101010101110", 
    159 => "00111101101110101110110111011101", 
    160 => "10111100110010011001111111001100", 
    161 => "10111110001000011110111111001110", 
    162 => "00111110001001001100100101011000", 
    163 => "00111101100101011010100111011001", 
    164 => "00111101101110100010000101101001", 
    165 => "10111101110010010010010111001011", 
    166 => "10111101001011101010111111111110", 
    167 => "00111110010011110101100101101101", 
    168 => "10111101110100000111101101110011", 
    169 => "00111101101101000110010111010001", 
    170 => "10111101101010101000100111011110", 
    171 => "00111100011101000100111010111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weicud is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weicud is
    component myip_v1_0_HLS_weicud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weicud_rom_U :  component myip_v1_0_HLS_weicud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


