-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weibkb_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weibkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100011101011100100111000", 
    1 => "10111110000010110101010001101001", 
    2 => "10111011110010110010101010011100", 
    3 => "10111101010000000100010010111001", 
    4 => "10111110011001111001111010000010", 
    5 => "10111110010110110100001111010011", 
    6 => "00111101000011110110110111110001", 
    7 => "00111110010001111110001100011001", 
    8 => "00111011110011001110011000101001", 
    9 => "10111101011111111100100101000010", 
    10 => "10111101010010000110101011101000", 
    11 => "00111110000100001101001101101100", 
    12 => "10111101001111101010011111001011", 
    13 => "00111110000111101110111101000101", 
    14 => "10111101011010101010110100001100", 
    15 => "00111101010011100010001010101000", 
    16 => "00111101000001011010101010000101", 
    17 => "10111100101010000000000001001100", 
    18 => "10111101111011111010010001011011", 
    19 => "10111110001001010011001110001101", 
    20 => "10111101111000000001101011111101", 
    21 => "00111110010111111100011000000101", 
    22 => "10111101001111110111000100001010", 
    23 => "10111110011000110001001000111000", 
    24 => "00111101110111010000111000011101", 
    25 => "10111101101000111011010110100011", 
    26 => "10111110101010010111101001011110", 
    27 => "00111110010111001001010001100001", 
    28 => "00111101100100100110010100110000", 
    29 => "10111101101000100110011100111111", 
    30 => "10111101100111000011000110110001", 
    31 => "10111110011000101110001101101111", 
    32 => "00111110001010100010000101000000", 
    33 => "10111110000011110111110110101001", 
    34 => "00111011111001100000011100010010", 
    35 => "10111110100010100111000011001100", 
    36 => "00111110010000001011001101101101", 
    37 => "00111100001110010111101000100000", 
    38 => "10111110000010000100001110001011", 
    39 => "10111100101010100000111110000010", 
    40 => "10111110001011011100001001010100", 
    41 => "00111110100011110110001000000111", 
    42 => "00111101100001011101111110110001", 
    43 => "10111101101000110001001111110010", 
    44 => "00111110011001111100010111100010", 
    45 => "10111110001111110100011111000010", 
    46 => "10111101100111100101101000011010", 
    47 => "10111101110110011100001111000100", 
    48 => "10111101100001100111011011101110", 
    49 => "10111011010000001111010101001001", 
    50 => "00111110001010000011111011010010", 
    51 => "00111110010110010110000100000100", 
    52 => "10111110000101011000011101110111", 
    53 => "10111100101111001000100111000110", 
    54 => "10111110000010000001111001110101", 
    55 => "10111101100111111000011111100000", 
    56 => "10111110001011110110011011101101", 
    57 => "00111101100000001010011100001010", 
    58 => "00111110000100111111001111111110", 
    59 => "00111110000010110000101101010000", 
    60 => "10111100100101111001001110111000", 
    61 => "00111101010011110111110101001100", 
    62 => "00111101100011100110110000001011", 
    63 => "10111110001111011011010110001111", 
    64 => "00111100100001101011000101111001", 
    65 => "00111100101111000000110011000110", 
    66 => "10111101101110000001001000111000", 
    67 => "10111010111011110111011100101101", 
    68 => "00111110010010011111000101110110", 
    69 => "10111101110011111000100110000100", 
    70 => "00111110000010111000011111001000", 
    71 => "10111101100101110100011011010100", 
    72 => "10111110100000111010011000100110", 
    73 => "00111101110100010111001011001100", 
    74 => "10111101101110110011000011001000", 
    75 => "00111101001001101100101000010100", 
    76 => "10111110000010001000010001100010", 
    77 => "00111110000101010110111100000001", 
    78 => "10111110000001100101000111001000", 
    79 => "10111101001011001111010010011101", 
    80 => "00111110000011101011100100110111", 
    81 => "00111100110110001000011000011000", 
    82 => "10111101000011010101101010101101", 
    83 => "10111101000110100001001100111110", 
    84 => "10111110001100111100100011000010", 
    85 => "00111100101001000100000010000001", 
    86 => "10111100110110010100100100011000", 
    87 => "00111101110011101010011001011100", 
    88 => "00111100101101110011100011100010", 
    89 => "00111101101100100000011111100011", 
    90 => "10111101100011000001111100001111", 
    91 => "00111101110000100000101110011111", 
    92 => "00111101000100001111101101010111", 
    93 => "10111110000111101110100000100111", 
    94 => "10111100110100011101001011100110", 
    95 => "00111101000010011000010001110111", 
    96 => "10111101101101111011010010101101", 
    97 => "10111100111111110111001101000110", 
    98 => "10111101101011101110101100100100", 
    99 => "10111101101000011000111001111101", 
    100 => "10111101101100011110010011100000", 
    101 => "00111110010010111011101010010010", 
    102 => "10111110000111000011001100110111", 
    103 => "10111101111000010100110001110000", 
    104 => "00111110000000101000011000101101", 
    105 => "10111101011011000111000001110000", 
    106 => "10111011110101101011110101101100", 
    107 => "00111101100110110001001101101010", 
    108 => "00111101000001100001010100111110", 
    109 => "10111101110010000000001101100111", 
    110 => "00111101011000110011010010101001", 
    111 => "10111110010010111010011100110110", 
    112 => "00111101101110001100110111101011", 
    113 => "00111101100000000101101100001100", 
    114 => "10111110010010011101110111110010", 
    115 => "10111110000010100100001011111011", 
    116 => "00111101101011100100110000111010", 
    117 => "10111101101110001101001010011010", 
    118 => "10111110001110111011110110111100", 
    119 => "10111101011000001111101000111000", 
    120 => "00111110010111110011011011000010", 
    121 => "00111101000011001111001011011100", 
    122 => "00111101110011100101010011000101", 
    123 => "10111100101011011000000010011001", 
    124 => "00111101111110000001000011011110", 
    125 => "00111101101101100101011001100111", 
    126 => "10111101110101000011100111100101", 
    127 => "10111110000001110000011111111101", 
    128 => "10111011111010000100001010011110", 
    129 => "00111100111000000010011011111110", 
    130 => "10111110001101001110011111111111", 
    131 => "10111101100000010101000100000100", 
    132 => "00111101001001001010100110001111", 
    133 => "00111011110110111011100101110010", 
    134 => "10111101011111111110101010110100", 
    135 => "10111011110000111011111011011101", 
    136 => "00111101011010100111101100101111", 
    137 => "10111101110101001110100100110010", 
    138 => "00111101010000100001011101001011", 
    139 => "10111100100101011010001011011111", 
    140 => "00111110001000110000101111101001", 
    141 => "10111110100010011001111110000100", 
    142 => "00111101101010010100101011001001", 
    143 => "00111101000000001111011111111100", 
    144 => "10111110000001010111110110001000", 
    145 => "00111100110100110101100111000001", 
    146 => "10111110001110000101001010111001", 
    147 => "00111101100111111101110101110000", 
    148 => "10111101110011100001011011100100", 
    149 => "10111110010011000010100010001110", 
    150 => "00111101001101110010101101100000", 
    151 => "00111101000111010001111011110000", 
    152 => "00111101100000001010110000000100", 
    153 => "10111110010100000100010011100111", 
    154 => "10111101000101000011110110000111", 
    155 => "00111101101111110011110001011000", 
    156 => "10111101100110001110001111010111", 
    157 => "00111101110100010010001111101110", 
    158 => "00111110011110010111001011111110", 
    159 => "00111101111110110111010010000000", 
    160 => "10111110000001000111011110111110", 
    161 => "00111110000011101011000111111100", 
    162 => "10111011100011100110110111101110", 
    163 => "00111101111110000000001111100100", 
    164 => "00111110000100011011011010000011", 
    165 => "00111100100001110110010010100011", 
    166 => "10111110001111100111001000010111", 
    167 => "00111110011010010101011000110110", 
    168 => "10111101000001101111101111111001", 
    169 => "00111101100010010111001100000011", 
    170 => "00111101111100101100111110100010", 
    171 => "00111101101000111100111100110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weibkb is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weibkb is
    component myip_v1_0_HLS_weibkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weibkb_rom_U :  component myip_v1_0_HLS_weibkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


