-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiFfa_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiFfa_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111001001101001101111001", 
    1 => "00111101100011001111110001110010", 
    2 => "10111101111010011010000000111000", 
    3 => "10111110001100101001001001000111", 
    4 => "10111101100011010101001101010110", 
    5 => "00111110001110100011001000001000", 
    6 => "10111101010100100101010111111101", 
    7 => "00111110100000000101010000001110", 
    8 => "10111101101101101110100000110100", 
    9 => "10111101110001001010101000110001", 
    10 => "10111110000001101110000101110001", 
    11 => "10111100100001110010011010010010", 
    12 => "00111100101101010110100110010010", 
    13 => "00111110110000010010111010001000", 
    14 => "00111100101101010110011100010000", 
    15 => "10111110001110010011001000110000", 
    16 => "10111100111101100101111011001110", 
    17 => "10111101001110001100010010100101", 
    18 => "00111110000011111110110000000001", 
    19 => "10111110011010100010101100011011", 
    20 => "10111101011001100100010111111010", 
    21 => "00111100110101011100100101001100", 
    22 => "10111101111100010000100011111001", 
    23 => "10111110001111011110100101000100", 
    24 => "10111110010011110000111110010010", 
    25 => "10111101111001110000110111101011", 
    26 => "00111100100001010100111101110001", 
    27 => "00111100101100001011010011000001", 
    28 => "10111100101100100101001101100010", 
    29 => "00111110010001100000001101000010", 
    30 => "10111110001111100101011000001000", 
    31 => "00111100011010100010011011000000", 
    32 => "00111110010000111100110100001011", 
    33 => "10111101011100100111110110111110", 
    34 => "00111110101000001111100110110000", 
    35 => "10111100111000011110100110110000", 
    36 => "10111110010111011100011000001001", 
    37 => "00111110011100011001000010000001", 
    38 => "00111101010100011000101100011101", 
    39 => "10111101010100011000100110110000", 
    40 => "00111101100001111011111100111100", 
    41 => "10111101111010110010010010011110", 
    42 => "00111110000110001101000001100010", 
    43 => "00111101110001110111110010101111", 
    44 => "00111101000010011000100010100001", 
    45 => "10111110100100111001101110001001", 
    46 => "10111101111101010100111010010000", 
    47 => "00111101111001101100101011000010", 
    48 => "00111110011011101100111111110111", 
    49 => "10111101010101001000001001001110", 
    50 => "10111110100101101110101010110100", 
    51 => "00111110100101111110111111011101", 
    52 => "00111100101011100010001100010100", 
    53 => "00111101101010111011111010111101", 
    54 => "00111101000100111100101010011000", 
    55 => "00111110010000111101110100011011", 
    56 => "10111101110000001011011000000111", 
    57 => "10111101011111000111000100000111", 
    58 => "00111110010010100111011110100010", 
    59 => "10111101100101010101000111101110", 
    60 => "10111101111011000001100001100100", 
    61 => "00111110001010110100111011011001", 
    62 => "10111101101000100000111101000010", 
    63 => "00111101101111101010010100101110", 
    64 => "10111101001111001000011000110110", 
    65 => "00111110000001101001101001010000", 
    66 => "10111101100001110110000010101101", 
    67 => "00111100111100000111011101000000", 
    68 => "10111101110110010000000111000001", 
    69 => "10111101011001010010111101011001", 
    70 => "00111100111010110001010110101001", 
    71 => "00111101100001110100101011100000", 
    72 => "00111110000001001101111001110011", 
    73 => "00111110010100010101111111001011", 
    74 => "00111101010101010011001011101010", 
    75 => "00111101010001010011000010011000", 
    76 => "10111101000101111010011111000100", 
    77 => "00111110100010100010100000011010", 
    78 => "00111101101110000000011101001101", 
    79 => "10111101101111010001100100111100", 
    80 => "00111101010010000110110101100011", 
    81 => "10111101101100010110000100110001", 
    82 => "00111110001110111010011101100110", 
    83 => "00111110010001110001101010110010", 
    84 => "10111110001001001001101100010101", 
    85 => "00111110001001100111010111101101", 
    86 => "00111101100010101001000110001101", 
    87 => "10111110001001011100100110001001", 
    88 => "00111101001111100000101111000100", 
    89 => "10111010100111111101110011010000", 
    90 => "10111011000011000000001110001110", 
    91 => "00111110000101011110110001011000", 
    92 => "10111110000001010111000110100011", 
    93 => "00111110001111011100001101111100", 
    94 => "00111101011001010000000010010011", 
    95 => "00111110010101100010001011110101", 
    96 => "10111110000111100000000110011000", 
    97 => "00111110011111001111001101111101", 
    98 => "10111101101111000001111101011001", 
    99 => "10111110000100000000100110101000", 
    100 => "10111011110100011100101011110100", 
    101 => "00111110100001010101011001101011", 
    102 => "10111110000000110001110111100001", 
    103 => "00111101100110100110111011110100", 
    104 => "10111110001010100010001010100100", 
    105 => "10111110001011111001101101000110", 
    106 => "10111101100110010000010101010101", 
    107 => "10111101111011010000010100011100", 
    108 => "00111101100001101111101000010110", 
    109 => "10111101110010111001100110110011", 
    110 => "10111110100011000101100001111101", 
    111 => "00111101101010001010100110111110", 
    112 => "10111110100110100001111100110110", 
    113 => "10111101011000010100100101010100", 
    114 => "00111101111011000101110101101111", 
    115 => "00111110011100010111000101111001", 
    116 => "00111110000001001010011000101101", 
    117 => "00111101111010101100010010010110", 
    118 => "10111110000110111001100011111001", 
    119 => "10111101100011000111001111001001", 
    120 => "00111101000000011001000111010111", 
    121 => "00111010111111011111000001110011", 
    122 => "00111101111110001001000101101001", 
    123 => "00111101110110010001000111100111", 
    124 => "10111101110001111100110100010111", 
    125 => "10111100001000000000000100001100", 
    126 => "10111100101101111101010011110100", 
    127 => "00111101101000000111001011000100", 
    128 => "10111101111110001010011100010111", 
    129 => "00111101010010000100000111111010", 
    130 => "00111110011111001101010110001110", 
    131 => "10111101101101001000100010111110", 
    132 => "00111101010010110011010000000010", 
    133 => "00111100101001101101111100100011", 
    134 => "00111110010010010011010000101110", 
    135 => "10111110010100011010011101111110", 
    136 => "00111101000110101001000111101111", 
    137 => "00111101101111100101110000001001", 
    138 => "10111110011111110111000010011110", 
    139 => "10111101110111000011111100001011", 
    140 => "00111101100100100000010011101011", 
    141 => "10111101110010000111100100010000", 
    142 => "10111101111101110010000001000000", 
    143 => "00111110011100111101011110100110", 
    144 => "10111101110000101100111111111101", 
    145 => "00111110100010001111001000011110", 
    146 => "10111110010100110000110101110110", 
    147 => "10111101100000100101111110010010", 
    148 => "00111110100001101010010111100100", 
    149 => "00111101100000010100100111000111", 
    150 => "00111110010101010000110011010110", 
    151 => "00111101001110101011101110110011", 
    152 => "00111101010101010100000001100110", 
    153 => "00111011000001000000101000011110", 
    154 => "10111101110001010011110110101010", 
    155 => "00111101111011001111010000111010", 
    156 => "10111101100000011010011001011010", 
    157 => "10111110010010100111011000010001", 
    158 => "00111101001111100110001100110101", 
    159 => "10111100010011000010010110010011", 
    160 => "10111101111001001001100100110110", 
    161 => "10111101000100001000101001000100", 
    162 => "10111101111011100110100000011011", 
    163 => "00111110100111010110000110010110", 
    164 => "10111110000101111111100001110111", 
    165 => "00111110011100001011010101110001", 
    166 => "00111110001001011010100000001100", 
    167 => "10111100110110000100011011010111", 
    168 => "10111100101111001110101100010011", 
    169 => "10111110010001110001011000000101", 
    170 => "00111110100100001001000010101000", 
    171 => "00111100101010101011100001010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiFfa is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiFfa is
    component myip_v1_0_HLS_weiFfa_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiFfa_rom_U :  component myip_v1_0_HLS_weiFfa_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


