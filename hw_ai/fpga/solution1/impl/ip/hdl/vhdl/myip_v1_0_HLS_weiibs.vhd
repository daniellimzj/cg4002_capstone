-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiibs_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000011111111001111101110", 
    1 => "00111110000010101100101100111110", 
    2 => "00111101111111100110101100101100", 
    3 => "00111101101010100100001101101010", 
    4 => "10111101100111111001101111000111", 
    5 => "10111100101111110110101110110111", 
    6 => "10111101111111111111110111100011", 
    7 => "10111101001111011111011100001011", 
    8 => "10111110001111000011000110111000", 
    9 => "10111101000111110101110110101111", 
    10 => "10111101101010001100110111010010", 
    11 => "10111101111010000101111100011100", 
    12 => "00111100100111111110001100101110", 
    13 => "10111110001101101010100010010101", 
    14 => "00111101000000111010100101111110", 
    15 => "10111100101010111001101001100001", 
    16 => "00111100111000010101100111000011", 
    17 => "00111101010011000001010000110101", 
    18 => "10111010110011011001011011110000", 
    19 => "10111110001000001011101101111100", 
    20 => "00111101011010001101010001101001", 
    21 => "00111110000010100001110010001111", 
    22 => "00111101100101111111001010110010", 
    23 => "00111101110101001001110000110011", 
    24 => "00111101100010101000111001110001", 
    25 => "10111101111000110101000100100100", 
    26 => "10111100010110001010010010101100", 
    27 => "10111101000111110110110011001110", 
    28 => "00111100001011110101101111101101", 
    29 => "00111101110100011100110001010011", 
    30 => "00111110001111011000000011001101", 
    31 => "10111011101100111100111001111111", 
    32 => "00111100101010010111100011010101", 
    33 => "00111101101000000000101010000010", 
    34 => "00111101111111101001100100010110", 
    35 => "00111101010101110111010010101100", 
    36 => "00111101010101011111101100000001", 
    37 => "10111110001010110101101101001000", 
    38 => "00111101110100110101011101110101", 
    39 => "00111110000010101001011110100100", 
    40 => "10111101111110001100111001010000", 
    41 => "10111100000110110010000010000100", 
    42 => "10111101111000111101111101101111", 
    43 => "10111101000011010001010100001101", 
    44 => "10111101110000000001111101111011", 
    45 => "10111101010001001011100111100111", 
    46 => "10111110000111011110010001101111", 
    47 => "00111010101101000011100011111101", 
    48 => "00111100000011110111011010000010", 
    49 => "10111110100001000010010001001000", 
    50 => "00111110011011110100001011111101", 
    51 => "10111110000111100010010111011001", 
    52 => "00111110011100110100001101101011", 
    53 => "00111100101100101011010001000110", 
    54 => "10111101100001100000111011001011", 
    55 => "10111110001101010010010000100010", 
    56 => "10111110001000000101111111010000", 
    57 => "10111101110010001010001000000110", 
    58 => "00111011111000011110100010111111", 
    59 => "00111101110100000001110000001011", 
    60 => "10111110000001111010010000101001", 
    61 => "00111100100000001110001010010011", 
    62 => "10111110000001100111000001000000", 
    63 => "00111100110110010111110001001000", 
    64 => "00111101010010110000101000111010", 
    65 => "10111110011000110011110000110001", 
    66 => "10111100101100111100010110001000", 
    67 => "00111101111011110100011111100101", 
    68 => "10111101001011101001110100001000", 
    69 => "00111101111000100010101010000111", 
    70 => "10111101100110100010010001011111", 
    71 => "10111101101000010111110100110111", 
    72 => "00111101000011010011011000000100", 
    73 => "10111110001011100100010010110110", 
    74 => "10111101110110001001011011110010", 
    75 => "10111110000101011010101010001101", 
    76 => "00111101100100110010100101011101", 
    77 => "10111110000000100000010001001010", 
    78 => "10111101110101000001100000110100", 
    79 => "10111100101001100110010101010000", 
    80 => "00111101111100110011110011000110", 
    81 => "00111101111111110010000110010101", 
    82 => "10111110010110111011101110101100", 
    83 => "00111110000011101110001110111111", 
    84 => "00111101100001111001101001101110", 
    85 => "00111101110000101010111011000001", 
    86 => "10111110100111001001010010101011", 
    87 => "10111110010101101001100110000111", 
    88 => "00111110001000101001010110010111", 
    89 => "00111101010011000111101110100000", 
    90 => "00111101101001011111010001001001", 
    91 => "00111101110101010100101010011011", 
    92 => "10111101011001110001000101101111", 
    93 => "10111110011101111111010010000001", 
    94 => "10111100001010110100101100100010", 
    95 => "10111101000001011001011100100110", 
    96 => "00111101101010100000111111011000", 
    97 => "00111101010011011100000101111011", 
    98 => "10111110011100001001110110101110", 
    99 => "00111101010100001100111100100100", 
    100 => "00111101110001110110101100101101", 
    101 => "00111101100100010110110111001110", 
    102 => "00111110011011101101110010110001", 
    103 => "10111100110100011001001110111110", 
    104 => "00111100100011010110110100111111", 
    105 => "00111110000001110000110000101010", 
    106 => "10111110010000010000000101001001", 
    107 => "00111100000101100101101101001010", 
    108 => "10111101101110110101011011101100", 
    109 => "00111110000010011110100101010000", 
    110 => "10111100111010011111101001010011", 
    111 => "10111101101110100110001000010111", 
    112 => "00111101110001101011000000100000", 
    113 => "10111110010110110101110110111111", 
    114 => "00111101100010010011110100001000", 
    115 => "10111101000010001110000011100110", 
    116 => "10111101010010000100011111000100", 
    117 => "10111100110001011111010001010000", 
    118 => "00111101011011010000010011000010", 
    119 => "10111110001000010101011010110101", 
    120 => "00111101011110010000110110110111", 
    121 => "00111101100110001110100011001001", 
    122 => "00111101011010011001010110010010", 
    123 => "10111011110111010110101010000010", 
    124 => "00111110001000101110011111101001", 
    125 => "10111101101110110011110000010101", 
    126 => "00111101110110111000110101111000", 
    127 => "00111110010110010111010001000011", 
    128 => "00111100100110010000101100110001", 
    129 => "00111110010010111010010111001001", 
    130 => "00111101100010101011010100000001", 
    131 => "10111101111101001101000000111111", 
    132 => "10111110011000010100000110101110", 
    133 => "10111100100011100110111001001000", 
    134 => "00111101111000110011111110101011", 
    135 => "00111101011111011110111001101011", 
    136 => "10111101101101101101010000010010", 
    137 => "00111100101010110001100011000101", 
    138 => "00111101000100000000010000011000", 
    139 => "10111100011001101100011000000110", 
    140 => "00111101000010011100001001000110", 
    141 => "10111110011100001101011111111101", 
    142 => "00111110000010101100010000111001", 
    143 => "00111110001011001110001110010101", 
    144 => "10111110001011010100100110110000", 
    145 => "10111101101000100110101101100100", 
    146 => "00111110000110001000011011011011", 
    147 => "00111110010000101011001100111101", 
    148 => "00111110010110001100111011111010", 
    149 => "10111101011011001001011010011000", 
    150 => "00111110000010011010011000000010", 
    151 => "00111101001001101111111010001100", 
    152 => "10111110001000110000000100011101", 
    153 => "10111100001101100000111100101110", 
    154 => "00111110011110001001010011001100", 
    155 => "00111100101100110101010000100101", 
    156 => "00111110000111000111101000111110", 
    157 => "00111011110101010011100001111100", 
    158 => "10111101111100011111001111001000", 
    159 => "10111100100110100100000010111011", 
    160 => "10111100010001101011110011011110", 
    161 => "00111110011011100000011111110100", 
    162 => "10111100110111111001011000100000", 
    163 => "10111110000100000010001111000001", 
    164 => "00111011001010011101111000001110", 
    165 => "10111011111010001001010100000010", 
    166 => "00111110010010011010011010101000", 
    167 => "10111100000000010100000010000111", 
    168 => "00111101101111001011100110001001", 
    169 => "00111110000101010110000110110000", 
    170 => "10111101101011000101100000011011", 
    171 => "10111101111010110011001110010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiibs is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiibs is
    component myip_v1_0_HLS_weiibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiibs_rom_U :  component myip_v1_0_HLS_weiibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


