-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiEe0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiEe0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101111110111010000011110", 
    1 => "00111101011101111110001000000011", 
    2 => "00111110000011100000000011101111", 
    3 => "10111101100000000001101100111001", 
    4 => "10111101100000000101110011111001", 
    5 => "00111100110110110001111100100100", 
    6 => "00111100100110000110000011111010", 
    7 => "00111100100011100011011111110011", 
    8 => "00111011100000101110101000101011", 
    9 => "10111101110011010011001110001001", 
    10 => "00111110000011110010110101100101", 
    11 => "10111110000010100001010000101110", 
    12 => "00111100000000001011001100101010", 
    13 => "00111110011000010111011010010000", 
    14 => "00111110001110111101101100010010", 
    15 => "10111101010010000000111001011010", 
    16 => "10111100111101111100101100111011", 
    17 => "10111110011111101010000001101100", 
    18 => "00111110001000010111100000010000", 
    19 => "10111101110100011001001000110101", 
    20 => "00111101101100000110010110110001", 
    21 => "10111101110010100110101001100101", 
    22 => "10111101110001011100100000111010", 
    23 => "10111101111111001111111100110111", 
    24 => "00111110000100001111101001110101", 
    25 => "10111110000110001111000011011010", 
    26 => "10111110010100010001111010100001", 
    27 => "00111101100000101010110110101111", 
    28 => "10111101111101110110110011010001", 
    29 => "00111011100101110001110100111101", 
    30 => "00111110000110101010000101011110", 
    31 => "10111101010011101000001011111000", 
    32 => "00111101100011010001010100001101", 
    33 => "00111101011000110011000001100000", 
    34 => "00111110100000111101000101111100", 
    35 => "10111101001111010101111100110101", 
    36 => "00111101110010100011111001011001", 
    37 => "00111110010000001011100111111000", 
    38 => "10111101010001101011110011011000", 
    39 => "10111101000010010101010000111011", 
    40 => "10111101101101010000011110100100", 
    41 => "10111100010111100100001101001100", 
    42 => "00111101110111000011010111100001", 
    43 => "10111110011001101111010110001100", 
    44 => "10111100100100111011111001100100", 
    45 => "10111100100000101000000010100110", 
    46 => "10111101111010011101110100101111", 
    47 => "00111100000100001100010100010101", 
    48 => "00111101101010100011110100100010", 
    49 => "10111110001100111010100001010010", 
    50 => "10111110011000101000010100100000", 
    51 => "10111100111100101110101001110010", 
    52 => "10111110010011100111000111000000", 
    53 => "10111101101000001110000111000001", 
    54 => "10111101010101001001111010000010", 
    55 => "10111100101111101001010010110101", 
    56 => "10111100010010101000001110110001", 
    57 => "10111101101101010101010011001000", 
    58 => "10111110010011111000101100100100", 
    59 => "10111110000110111010011101010001", 
    60 => "10111101100001000010111011000001", 
    61 => "00111101111111001001110001010101", 
    62 => "00111101100001101110000101100100", 
    63 => "10111100100101001100101101001010", 
    64 => "10111110011000001101001011110111", 
    65 => "10111100100000100000111110110100", 
    66 => "00111100110011011000011100000001", 
    67 => "00111100101111011010001111001000", 
    68 => "00111101101000011111010100011101", 
    69 => "00111101011011100001011101010100", 
    70 => "10111110010100100110110000001000", 
    71 => "00111110011101010110101011000011", 
    72 => "10111011011010001010110010001011", 
    73 => "10111101100111110011000010101110", 
    74 => "00111101111011011011100011010010", 
    75 => "10111110000100001001010011100001", 
    76 => "00111110001000010011100100010001", 
    77 => "10111110000011111100100110010100", 
    78 => "00111101110100010101111000011000", 
    79 => "00111101100010001011111001011110", 
    80 => "00111101100010111110100000110000", 
    81 => "10111110000010100000011111011010", 
    82 => "00111101110101000111101111000010", 
    83 => "00111101100011101101000100101110", 
    84 => "00111110000101000001010010001111", 
    85 => "00111100011111001110110011000011", 
    86 => "00111011000010000111100010010101", 
    87 => "10111101000100111101111000011111", 
    88 => "10111101000000011111101110011101", 
    89 => "00111110000010001100110111010111", 
    90 => "00111011110010100100110011100011", 
    91 => "10111100101111110100101001101101", 
    92 => "10111010000100001010101110010110", 
    93 => "00111110010000101010110001011011", 
    94 => "10111100110001011101100000010011", 
    95 => "10111110000010100000010000010000", 
    96 => "00111110000101101101011101000111", 
    97 => "10111101101000110101000101001010", 
    98 => "00111101100001011001100100011101", 
    99 => "00111101101001010000010000001101", 
    100 => "00111101100010100100001001011010", 
    101 => "10111100110101100111100111000010", 
    102 => "10111110011111100001101100110100", 
    103 => "10111100100101100010001101101100", 
    104 => "10111100110000100000101111000110", 
    105 => "10111101110111101100000101111010", 
    106 => "10111110011100010000000110000110", 
    107 => "00111101101100010000010010101101", 
    108 => "00111101111101010101111100001111", 
    109 => "10111110000111100001101100100000", 
    110 => "10111101101101001111100101101001", 
    111 => "00111101100000000110000011101111", 
    112 => "10111110000110101010000010110110", 
    113 => "10111101100101110111010111001100", 
    114 => "10111110010000010101100011011100", 
    115 => "10111110000100001101110101010001", 
    116 => "00111101011110101101100100000100", 
    117 => "10111101111101110011110000001011", 
    118 => "00111100111110110110101100011000", 
    119 => "00111110001111011010111010010111", 
    120 => "00111101110001100100011111010110", 
    121 => "00111101100101000100011000111011", 
    122 => "10111101111010000101011101000100", 
    123 => "10111101001101000111001111110100", 
    124 => "10111101001011000000001110010011", 
    125 => "10111101111010101000101000100001", 
    126 => "00111110100011000010110110100110", 
    127 => "00111110000001101110010100100111", 
    128 => "10111100110110111110000110011010", 
    129 => "00111101010001110010011101101100", 
    130 => "00111101001001001001000000111011", 
    131 => "10111100011101011001101011000011", 
    132 => "10111101111010001000000001001101", 
    133 => "00111110000110101001111100100101", 
    134 => "00111101101100111011010011000100", 
    135 => "10111110010011001111110011111000", 
    136 => "10111101101100100011001001011110", 
    137 => "10111110011111011111001101100010", 
    138 => "00111011100100110001111111111000", 
    139 => "00111101110010000010000110110000", 
    140 => "00111100100100111111111101111110", 
    141 => "10111110011000111101100010000111", 
    142 => "00111100010111011111000101000110", 
    143 => "10111110001000001101111010110001", 
    144 => "00111110011101001000101101110100", 
    145 => "10111101010101100011011111101110", 
    146 => "10111101111101100000111001100111", 
    147 => "00111101101011110110101010111101", 
    148 => "00111101010001101110000111011000", 
    149 => "10111110001011011100100101100111", 
    150 => "10111100010100111111011101101010", 
    151 => "10111100110100010110011101101000", 
    152 => "00111101101100101111110110110111", 
    153 => "00111101011011101100010010000111", 
    154 => "00111101011111001000100100001101", 
    155 => "00111101100111101010000100111001", 
    156 => "10111101110101000001101100110100", 
    157 => "00111110000111110111011110011000", 
    158 => "10111101110110000001010100111000", 
    159 => "10111100101011101100111000110111", 
    160 => "10111101111111000011110001110111", 
    161 => "00111110000100011001001101100000", 
    162 => "00111100100101000000110001010010", 
    163 => "10111101010100101110000101110110", 
    164 => "00111110000100110110110001000000", 
    165 => "00111011100101001010011000111110", 
    166 => "00111101111101010010010100010000", 
    167 => "10111101101110011111001110101101", 
    168 => "10111101100000011101000100111110", 
    169 => "10111101110111000111010101000111", 
    170 => "10111101001000111110001110011000", 
    171 => "00111110010000110111011100111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiEe0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiEe0 is
    component myip_v1_0_HLS_weiEe0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiEe0_rom_U :  component myip_v1_0_HLS_weiEe0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


