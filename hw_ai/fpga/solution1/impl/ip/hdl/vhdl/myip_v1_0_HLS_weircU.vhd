-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weircU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weircU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000001110110111100101100", 
    1 => "10111010100101000010010001001111", 
    2 => "00111110100010001101110010100001", 
    3 => "10111101100000101000110100101100", 
    4 => "00111101100001010111111011001111", 
    5 => "10111101001010110001011100100110", 
    6 => "10111101110111110110111110011111", 
    7 => "10111100000111010010101001001000", 
    8 => "10111110000111101100110110001101", 
    9 => "10111100101000011111101011111100", 
    10 => "00111011101100011110010001101000", 
    11 => "10111110000100101010110011100011", 
    12 => "00111101001011010101111000000111", 
    13 => "10111101101111001110001101011110", 
    14 => "00111101110000110011111100001000", 
    15 => "10111110000110111011010111111111", 
    16 => "00111110001100011110011001110110", 
    17 => "10111110000101100110010001001100", 
    18 => "10111101110110110110101110111100", 
    19 => "10111101100010101010101101010001", 
    20 => "10111110010100011001100001011101", 
    21 => "00111100110100000001001000110000", 
    22 => "00111101101100111111011101010000", 
    23 => "00111101110011001010100000101000", 
    24 => "10111110001111000010010001110011", 
    25 => "10111110000010110000000010111100", 
    26 => "00111110001111000010000110011110", 
    27 => "10111101101011101000011001010110", 
    28 => "00111110000110100101001000000010", 
    29 => "00111101110000111111001011111000", 
    30 => "10111011001111101010110001011100", 
    31 => "10111110001001000111000011101001", 
    32 => "10111110010011011011001101100001", 
    33 => "10111101100100000001110001100110", 
    34 => "10111110010100010011101000000100", 
    35 => "00111110000011111001000010100010", 
    36 => "00111110001011100000110111110110", 
    37 => "00111110001010111000011001101111", 
    38 => "10111101010100001111000010000000", 
    39 => "00111110010111011011000111010101", 
    40 => "10111101111000001111100110100100", 
    41 => "10111110000100110101010001110100", 
    42 => "00111110011011110011011101100100", 
    43 => "10111110001110011101100011001000", 
    44 => "00111101100100100001101000000110", 
    45 => "00111110010001100000001000001000", 
    46 => "00111011001001100011010110101100", 
    47 => "00111101001111111011111000000110", 
    48 => "00111110000000001100100110100011", 
    49 => "10111110001001011100011100011100", 
    50 => "10111101111010111111001111000000", 
    51 => "00111110000101110100001011001001", 
    52 => "10111101100001110110100011111011", 
    53 => "10111100000111111110000011000110", 
    54 => "10111101110100101001001000001110", 
    55 => "10111110011000100010001011101010", 
    56 => "10111100110100000011000100101111", 
    57 => "00111101011000101111101001001001", 
    58 => "00111110010111110101111100001000", 
    59 => "10111101110100010111000000100010", 
    60 => "00111101011111001100100000010000", 
    61 => "00111011111001001101000101100100", 
    62 => "00111101100000111010111110111001", 
    63 => "10111101101011001001110100101110", 
    64 => "10111110011010010101110111011100", 
    65 => "10111101010010011100101110110101", 
    66 => "00111101011111000010010001011000", 
    67 => "10111100000101010100010111100000", 
    68 => "10111110000001110011001111110100", 
    69 => "00111011011110010001011000100011", 
    70 => "00111101011111101101010011001001", 
    71 => "10111101100111011100101100011101", 
    72 => "00111101111111010101011000000100", 
    73 => "10111101001001110010101110100110", 
    74 => "10111110001100011010101011000101", 
    75 => "10111101010011000100001100011100", 
    76 => "00111110001110110010100100000110", 
    77 => "00111110010100101001001011101110", 
    78 => "10111110000100001111011110110001", 
    79 => "10111100110111100010010011100111", 
    80 => "00111101000101000010111100101111", 
    81 => "00111011111001010100111110000110", 
    82 => "00111110010010111110000001110111", 
    83 => "10111101101111100101011000110010", 
    84 => "10111100100011000001011001101111", 
    85 => "10111101000000101011001010110010", 
    86 => "00111110100000011110000101011100", 
    87 => "10111101111111010101000000001010", 
    88 => "10111110011111010100110000101101", 
    89 => "10111101011001111110000011000001", 
    90 => "10111100101101010010000011000111", 
    91 => "00111110001101001101001010000101", 
    92 => "10111101100100100001010000001100", 
    93 => "00111101111100101010111111001111", 
    94 => "00111101100110010110010001001101", 
    95 => "10111100011101011100010001110111", 
    96 => "10111110010000010000011000010011", 
    97 => "00111101000101011010101111000111", 
    98 => "10111101000001010011000111010000", 
    99 => "00111110010100000001101010100111", 
    100 => "10111101101001110011110110010001", 
    101 => "10111100001110001100111101001111", 
    102 => "10111100110001011010000000000001", 
    103 => "00111101111110001000100101100001", 
    104 => "00111101010101110011101100001011", 
    105 => "10111110010011011010100000101010", 
    106 => "10111110000000000001001010110110", 
    107 => "10111001111001111101110010010010", 
    108 => "10111101011100101000011111001100", 
    109 => "10111110001010101100100101101110", 
    110 => "10111101100101001001100000000111", 
    111 => "00111110001011001100000011111110", 
    112 => "10111100101100110011110110100111", 
    113 => "00111110010100101111010001111000", 
    114 => "00111101110001110000000011000001", 
    115 => "10111011011101111001110110000101", 
    116 => "10111011110011111101100010100001", 
    117 => "10111101101001100110110111110001", 
    118 => "00111110000011101001000100000110", 
    119 => "10111101110001100011010110100011", 
    120 => "10111101001001011010100000001001", 
    121 => "10111110010111100110101010100001", 
    122 => "00111110000001011010001010110001", 
    123 => "10111101011000110110011100011101", 
    124 => "00111101101100001100011011110011", 
    125 => "00111110000010101011111100101010", 
    126 => "00111101111000110011010011010001", 
    127 => "00111101101000001000001100110110", 
    128 => "10111110000101000111011001101000", 
    129 => "00111110001000001100110100100100", 
    130 => "10111100010100010000110101101000", 
    131 => "10111110010100111101011111011111", 
    132 => "10111110010011011001100010101011", 
    133 => "00111101101111101100011000110100", 
    134 => "00111100111111111101011010111101", 
    135 => "00111110001101101010011001000001", 
    136 => "00111101010101011110110110100100", 
    137 => "10111101101111011001111101110110", 
    138 => "10111101010000010111010110010010", 
    139 => "00111110010000110111111000011101", 
    140 => "00111100110110001010000110000010", 
    141 => "00111100100100101110001010011011", 
    142 => "00111101100111001001100000001001", 
    143 => "00111100100010111110010001110100", 
    144 => "00111101010010111110111001011001", 
    145 => "00111100100011001000110101110111", 
    146 => "00111100111100001000111000101101", 
    147 => "10111110001000100000011100001111", 
    148 => "10111101111001111001000000101101", 
    149 => "10111101100011100100000001101100", 
    150 => "10111101101011000000001000011110", 
    151 => "10111110000110000101100000111001", 
    152 => "00111101000101000001010011000000", 
    153 => "10111010100001110011011011001000", 
    154 => "00111100010010100100000101111010", 
    155 => "10111100111100001100100011000001", 
    156 => "00111101100111001111011101011000", 
    157 => "00111100100000000010001100101101", 
    158 => "10111110001000001000001010001001", 
    159 => "00111101110001010001110011000101", 
    160 => "10111100110001001000111000001000", 
    161 => "00111110010110100110000100111100", 
    162 => "10111101001011010111010011100001", 
    163 => "10111101110101010010101011111111", 
    164 => "10111110011000110001000010110101", 
    165 => "10111110011110011110001110011001", 
    166 => "00111101100010001011010011110010", 
    167 => "10111110010100001000010000000100", 
    168 => "00111101111111100110100000001000", 
    169 => "10111101100110000110101111100001", 
    170 => "00111101100010010111110010001010", 
    171 => "00111100100011110110011110000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weircU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weircU is
    component myip_v1_0_HLS_weircU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weircU_rom_U :  component myip_v1_0_HLS_weircU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


