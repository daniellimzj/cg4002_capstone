-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiPgM_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiPgM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000100011100111001001110", 
    1 => "10111110001011101011101011111001", 
    2 => "10111100110101101100001001010100", 
    3 => "00111110010010000110001001010100", 
    4 => "00111110011101100010001111001101", 
    5 => "00111110000011100100000001111000", 
    6 => "00111110011111100010110011110100", 
    7 => "00111101111101001000001100011001", 
    8 => "00111011001101000111110011111010", 
    9 => "10111101100011010100110101101100", 
    10 => "10111011011101001101111111110110", 
    11 => "10111100111001111001001100101011", 
    12 => "00111101000001010110110011100011", 
    13 => "00111110100110001100011010110110", 
    14 => "10111110001111010011001101010110", 
    15 => "10111011001000010110111010011000", 
    16 => "10111101110110100101110100010001", 
    17 => "00111011111101000001110001111000", 
    18 => "10111110000010000011111110100000", 
    19 => "00111101111110110101000011010100", 
    20 => "00111110010011000001111000100100", 
    21 => "00111110010010100101010100010011", 
    22 => "10111110010101001111010001000000", 
    23 => "10111101010101000010101011000010", 
    24 => "00111101010100010101000100110101", 
    25 => "10111011001101111100000001101000", 
    26 => "00111110010000110010101001011111", 
    27 => "00111110010110010001111001010011", 
    28 => "00111101001111111001110110110010", 
    29 => "10111101110011011001010101101011", 
    30 => "10111101000101011100100110010001", 
    31 => "10111110000011001101001100100101", 
    32 => "00111110010000001111000000111100", 
    33 => "00111101011001110000100001001101", 
    34 => "10111110000111001101111011000001", 
    35 => "00111101010000110100011001001010", 
    36 => "00111110010000101110111010001111", 
    37 => "10111101101011111111000110110000", 
    38 => "10111101110000010101011011000101", 
    39 => "00111110011001001110100000010101", 
    40 => "00111101100010000100001001111010", 
    41 => "00111110001110111011000111001010", 
    42 => "10111110010010000010011010000101", 
    43 => "10111101101011000001111011010010", 
    44 => "10111101010000100010100011010010", 
    45 => "00111110010111101001100111101101", 
    46 => "10111100010101011010000101010100", 
    47 => "10111101101011010100111110100010", 
    48 => "00111101000011010100001001000011", 
    49 => "00111100001111101111110110001111", 
    50 => "10111100100010100111111011011100", 
    51 => "10111010001011111111010010101100", 
    52 => "10111110100001111010100001100110", 
    53 => "10111100000100010100110011011110", 
    54 => "00111101011110010011001011101000", 
    55 => "00111101010011110100101101001111", 
    56 => "00111101000000011100010111110110", 
    57 => "10111101110000000011111110001100", 
    58 => "10111100111011010100110011111010", 
    59 => "00111101101111111111100001100100", 
    60 => "10111100110001101110100110010000", 
    61 => "00111101110010010100010101111100", 
    62 => "00111110010010010011001110110001", 
    63 => "00111101100011000000010101100110", 
    64 => "10111101110111100000110010001001", 
    65 => "10111101101000010101100010010100", 
    66 => "10111010011000110000001010101010", 
    67 => "10111110001100010101100110011010", 
    68 => "10111101101001000010010111010111", 
    69 => "00111101100111000101111110000011", 
    70 => "10111110010110111100110010100000", 
    71 => "00111110000011011000011011001101", 
    72 => "00111110001101110111111110111010", 
    73 => "10111100000110000000001010110010", 
    74 => "00111101101011100000101010010110", 
    75 => "10111110000010111100010111010111", 
    76 => "10111101100011001100111011000010", 
    77 => "10111110011010100000011010100110", 
    78 => "00111101011001001001100001101100", 
    79 => "10111101110010010101110101110001", 
    80 => "10111110010001011000110000011011", 
    81 => "00111101100101110110100110110101", 
    82 => "10111101100110101111110000101101", 
    83 => "10111101101111110010010000101011", 
    84 => "00111100011100100100100010110000", 
    85 => "10111101100010010101001111111001", 
    86 => "00111101011001101110110100111101", 
    87 => "00111110010100100011101100001111", 
    88 => "10111101011111011111000110010100", 
    89 => "10111110001111101000110000011100", 
    90 => "10111011010101110101101110010010", 
    91 => "00111110011000001110000110011100", 
    92 => "00111101100000010111101111101110", 
    93 => "00111101011110010000101011100111", 
    94 => "10111101111010110011110100000000", 
    95 => "00111100111111110100100010000010", 
    96 => "00111110000111101101111001011011", 
    97 => "10111101011011101011011010111111", 
    98 => "10111101000001011111011001001101", 
    99 => "00111110000111111110001110000000", 
    100 => "00111101000000100001010111110001", 
    101 => "00111101010101111011001101100111", 
    102 => "10111110100000111111000000011000", 
    103 => "10111100101101111110100010111100", 
    104 => "10111100111010111010110010000111", 
    105 => "10111101111001011111110101000001", 
    106 => "00111101100000110001000110101111", 
    107 => "10111101110111011101000010100110", 
    108 => "00111101100011111111100010101011", 
    109 => "10111101011000100101111011010100", 
    110 => "00111110000000010000001011100001", 
    111 => "00111101111010110000100011001110", 
    112 => "00111110000101000010010100010000", 
    113 => "00111101010110110000000011011111", 
    114 => "10111110000100100100010100110010", 
    115 => "00111101011110001000010001010001", 
    116 => "00111101101100111001101111010110", 
    117 => "00111101011111101101100000111101", 
    118 => "00111110011110000110111011000110", 
    119 => "00111110011110110011001001101011", 
    120 => "00111110000000010001000010110110", 
    121 => "00111110001001011110000111001110", 
    122 => "00111110011000011110101110110010", 
    123 => "00111101000110110100101111001001", 
    124 => "10111101101100100111101101110000", 
    125 => "10111101011011110100110011011011", 
    126 => "10111110011001001011010111101110", 
    127 => "10111100001011101011010010010110", 
    128 => "00111110001010010011011000011000", 
    129 => "00111101001011110000110101000010", 
    130 => "10111101111111100010110011000100", 
    131 => "10111100001010010011001011001001", 
    132 => "00111101110100001001111010110111", 
    133 => "10111110010101100100111000100000", 
    134 => "00111101110110100101000010110000", 
    135 => "10111101100110011011111111110111", 
    136 => "10111110000010010101010111000111", 
    137 => "10111101100010011110111100100111", 
    138 => "10111010101100110011001011000100", 
    139 => "00111101110110010000100001110001", 
    140 => "10111100001101111111011100001100", 
    141 => "00111100000111111101010011011010", 
    142 => "10111100110010100010001011110010", 
    143 => "10111100101111010101011001000010", 
    144 => "00111101101000110010010001111100", 
    145 => "10111110000001001010111111000010", 
    146 => "10111011001110001101100000101110", 
    147 => "00111100101011011011111100001010", 
    148 => "10111110001110101101011110001010", 
    149 => "00111101110111000111001110101011", 
    150 => "00111101000001100011111001100110", 
    151 => "10111101100000001001011010010000", 
    152 => "10111100111000100010001110000101", 
    153 => "10111101100100000110010100100010", 
    154 => "10111100110100101001110100110101", 
    155 => "10111101001000001101101011010101", 
    156 => "10111110001110111111110000110111", 
    157 => "10111110001000101110010101011011", 
    158 => "00111011110100011111000010011101", 
    159 => "00111110001010101110100001111111", 
    160 => "10111101110011111111011000011111", 
    161 => "10111110010011110011011111101111", 
    162 => "10111110010100000010100111010011", 
    163 => "00111100110000011000000100000011", 
    164 => "10111101011011101100111101010101", 
    165 => "10111101101011101001111100001110", 
    166 => "10111101111101100101001111111001", 
    167 => "00111100111111001011111011010010", 
    168 => "00111110010000101010011111110010", 
    169 => "10111110000100111110111001110011", 
    170 => "00111110001000111111010001100000", 
    171 => "00111101010000100010100001110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiPgM is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiPgM is
    component myip_v1_0_HLS_weiPgM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiPgM_rom_U :  component myip_v1_0_HLS_weiPgM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


