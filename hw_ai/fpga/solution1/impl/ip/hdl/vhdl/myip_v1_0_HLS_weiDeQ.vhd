-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiDeQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiDeQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010010011101111100010010100", 
    1 => "10111101000110010111101100000111", 
    2 => "00111100110011001000100111011101", 
    3 => "00111101101110010010101110100100", 
    4 => "10111110000101110010011110010101", 
    5 => "00111110100000111000101110001100", 
    6 => "10111100000001011000011101010010", 
    7 => "00111100110001011110010010100110", 
    8 => "00111110101111111010101000111110", 
    9 => "00111110000001100011101111000011", 
    10 => "00111101001011101010110001110101", 
    11 => "10111101001011110011110001110110", 
    12 => "00111101111101001011000010000101", 
    13 => "00111110100011100101011010011111", 
    14 => "00111011110110010101111111001101", 
    15 => "10111110000011010101011100110100", 
    16 => "00111100100101010101100101011011", 
    17 => "10111101100011001001111011100000", 
    18 => "10111100100111100011101000011100", 
    19 => "10111101001001001010010110010100", 
    20 => "10111101111001011000000101100001", 
    21 => "00111101000000000001110101100100", 
    22 => "10111101101011110110011110010010", 
    23 => "10111101111100101101010111000000", 
    24 => "10111110000111101101110000101000", 
    25 => "10111101000101001000011111111111", 
    26 => "10111101111111111000001110010111", 
    27 => "10111101101110011101010001011001", 
    28 => "10111110000000001011011001101011", 
    29 => "10111101110011111100001001011001", 
    30 => "00111101101001011111001110101001", 
    31 => "10111101101010010100100111001011", 
    32 => "10111101010001000101010011101100", 
    33 => "00111101100001101000110111000000", 
    34 => "00111110001000100010101000100111", 
    35 => "10111101000100110001001000100000", 
    36 => "10111100100110010011000100111010", 
    37 => "10111101001001110101100011111111", 
    38 => "00111110000000111001010001011101", 
    39 => "10111101000100011110110011000011", 
    40 => "00111100101001011011111000000101", 
    41 => "00111110000100110001111110011001", 
    42 => "00111100110101101011111000111011", 
    43 => "10111100011110010010111100011000", 
    44 => "00111110000011100000100010110011", 
    45 => "10111100101110000101110110010011", 
    46 => "10111101100010101000000011001111", 
    47 => "00111101000000001100101011011110", 
    48 => "00111011100001011011111000101001", 
    49 => "10111110010011111010010001100110", 
    50 => "10111110000101011101000011101110", 
    51 => "00111101100100010111011010000111", 
    52 => "10111110010101011111111010010000", 
    53 => "00111110011100110111100000110111", 
    54 => "10111100110001100001011111100010", 
    55 => "00111110010100111101101001100000", 
    56 => "10111100000011111001111010010001", 
    57 => "10111100100000110110100111011001", 
    58 => "10111101011011001011101011110010", 
    59 => "10111101101110100000111100110111", 
    60 => "00111110001110110100001010011100", 
    61 => "00111101100110010010000111100111", 
    62 => "10111101110001111101011100010001", 
    63 => "10111101010110110100011010010111", 
    64 => "00111101000001100111011001110100", 
    65 => "10111100000010011010110101000000", 
    66 => "00111110000001001110011001110001", 
    67 => "10111100100110110100101111111010", 
    68 => "00111110001110001111100101000000", 
    69 => "10111101110100111000001101101100", 
    70 => "10111101100111000110000010000000", 
    71 => "10111010110010101010110111110000", 
    72 => "10111101101000111101110111001010", 
    73 => "10111010111111100010011111110000", 
    74 => "00111101010011111010010111010000", 
    75 => "10111110010010000010110100000111", 
    76 => "00111101011010111001110001011011", 
    77 => "10111101111111000110011001011011", 
    78 => "10111101011101010101010100001100", 
    79 => "10111110000111110011101011011110", 
    80 => "00111101111100100111011011011001", 
    81 => "00111110001100000001010011101010", 
    82 => "10111110000010101110100100111011", 
    83 => "10111101111110101011011010101100", 
    84 => "00111101111110000100000101001000", 
    85 => "00111101001010001111110101001000", 
    86 => "00111110001100101010100000110010", 
    87 => "00111110000011000000011101100000", 
    88 => "10111110001111101001011111010001", 
    89 => "10111101101101101011111111011001", 
    90 => "10111110001011110001111100101011", 
    91 => "00111101011001011010011010110001", 
    92 => "00111100110011011100100100010101", 
    93 => "10111101110101000000000010101100", 
    94 => "10111101110101100100000110111111", 
    95 => "00111110000000100001110101001110", 
    96 => "00111101111111001011101100001100", 
    97 => "00111101111010000101000101111101", 
    98 => "10111110010000001011110001110001", 
    99 => "10111101011001001011010011010001", 
    100 => "10111100100010100100111101111001", 
    101 => "00111101101100111000000111001010", 
    102 => "10111110011110110110000100000111", 
    103 => "00111101011111001011011111100011", 
    104 => "10111100111010001101001010000010", 
    105 => "00111101110110001000100111010110", 
    106 => "10111110010100010001010011111000", 
    107 => "00111101111100101100010000101101", 
    108 => "10111110000010111000101100111101", 
    109 => "10111101101000101011001110100001", 
    110 => "00111101101100110011110110000110", 
    111 => "00111101110000000110010101000000", 
    112 => "10111110011110010110001100110101", 
    113 => "10111110000010011000101100000000", 
    114 => "00111101111100111110011001001010", 
    115 => "10111101110000111101001000100000", 
    116 => "00111101110111001001111110010001", 
    117 => "10111101100100101101100111001111", 
    118 => "00111101101101101010000110100101", 
    119 => "10111101110101010000110100101011", 
    120 => "00111101001111101110011010011001", 
    121 => "10111011001100000100010101010001", 
    122 => "10111110001001011010001100110101", 
    123 => "10111100111010111000001011001010", 
    124 => "00111110001110010111010010110110", 
    125 => "10111100101001111101100010011111", 
    126 => "00111110001111000010000111110100", 
    127 => "00111101111000011100011100111111", 
    128 => "00111101101111010111101100100011", 
    129 => "00111101001010010011110011111100", 
    130 => "10111101101111011100100111110001", 
    131 => "10111101010100010001111001100001", 
    132 => "00111101110100111111010100001101", 
    133 => "00111101110011001010100000100110", 
    134 => "00111110000000010110010111110000", 
    135 => "00111101011001110111011010100100", 
    136 => "10111101010110001101001000110010", 
    137 => "00111101100011010001100010000000", 
    138 => "10111011010110111010111111010101", 
    139 => "10111101101000001011101011000011", 
    140 => "00111101110011110011101111101101", 
    141 => "10111101011011111011110100101101", 
    142 => "10111110001000010111110010011101", 
    143 => "00111110000010010100001111111101", 
    144 => "10111101110001100010010110111011", 
    145 => "00111100011111100110011010111100", 
    146 => "10111110011000101100010110100100", 
    147 => "10111100010111111011001000011110", 
    148 => "10111100110001011000100110110101", 
    149 => "10111100110111101110111010000011", 
    150 => "00111110010000010111110010111001", 
    151 => "10111101000110010101100010010111", 
    152 => "00111110001001011010110111100101", 
    153 => "00111110010001010000000001111111", 
    154 => "00111101001011100110111101000111", 
    155 => "00111100101101110111111010111110", 
    156 => "00111100101011001101011011011100", 
    157 => "10111110010011011100010101010101", 
    158 => "10111100111110111010101101010010", 
    159 => "10111101110110010011101001110000", 
    160 => "00111101111101010011100111011011", 
    161 => "00111110100000100000001010001000", 
    162 => "10111110001010100110101111101100", 
    163 => "00111110000110111000011000001101", 
    164 => "00111101100001001011111110100000", 
    165 => "10111100011011010100001010000101", 
    166 => "00111010100110101111001110001001", 
    167 => "00111100101000010000101011110110", 
    168 => "00111101110110000110001000000010", 
    169 => "00111101000011001010000001000011", 
    170 => "00111110000100011001011100110101", 
    171 => "00111110001100110110011001001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiDeQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiDeQ is
    component myip_v1_0_HLS_weiDeQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiDeQ_rom_U :  component myip_v1_0_HLS_weiDeQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


