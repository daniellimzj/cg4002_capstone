-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiHfu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiHfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001000001011011101100111", 
    1 => "10111110000110001101110101001010", 
    2 => "10111101001000011101011110000011", 
    3 => "10111101011110010101000011010100", 
    4 => "00111011010000101011101110111110", 
    5 => "00111100110000100001001111100011", 
    6 => "10111101011001100000111001010011", 
    7 => "00111100010111111111100101111001", 
    8 => "00111101111010000110101001011100", 
    9 => "10111101100000010101010110111011", 
    10 => "10111101111101111001000000001100", 
    11 => "00111101010010101000010001111101", 
    12 => "10111100100000101000110110111001", 
    13 => "10111101110010110011100101100000", 
    14 => "00111101101111101000011000110100", 
    15 => "00111101101001101101011110101010", 
    16 => "00111101001100001001110110111100", 
    17 => "10111101101100110001010100011111", 
    18 => "00111101111011110010000100111010", 
    19 => "10111100111111111010101000011010", 
    20 => "10111101000001000000111110101001", 
    21 => "00111011001000001001000100011100", 
    22 => "10111100000010010110100100110111", 
    23 => "10111101001101010000100010011100", 
    24 => "10111101001001110010000111111101", 
    25 => "00111101110111010100000010100010", 
    26 => "00111100001111001010101010000010", 
    27 => "00111101110100010000001000000001", 
    28 => "00111010010101010101001001111001", 
    29 => "10111110000101110111110000100111", 
    30 => "10111101110110100011110011110010", 
    31 => "10111110000101101000110110000101", 
    32 => "10111101001011110110111101000101", 
    33 => "10111110000010001101110011001100", 
    34 => "00111101001010111000000101100010", 
    35 => "10111101000110001010010010110011", 
    36 => "00111110010000010101011110111111", 
    37 => "00111101101010000111100100011101", 
    38 => "00111101110001000110110100110101", 
    39 => "10111100001000101010000111111111", 
    40 => "10111110000011111111101100111110", 
    41 => "00111101110001110110100110010010", 
    42 => "10111100100001001101001101100100", 
    43 => "10111101100011101111011011110100", 
    44 => "00111101100110101101000101011000", 
    45 => "00111101000000011000010000000101", 
    46 => "00111110000110011101111101100010", 
    47 => "10111110000110011101000000110011", 
    48 => "10111110010110011100101111110111", 
    49 => "10111010001010001011111011110001", 
    50 => "10111110100001110101011000011001", 
    51 => "00111101111001000001101010010101", 
    52 => "10111110011101001000000000100011", 
    53 => "00111101100100001111011101100000", 
    54 => "00111100101011100010011011010110", 
    55 => "00111101100101111101001100101100", 
    56 => "00111101111111111011001011011111", 
    57 => "10111101010000010110111110001011", 
    58 => "00111101111100101010110101010000", 
    59 => "10111101011001100111110100011100", 
    60 => "00111101101101100111101001110100", 
    61 => "00111110000101110011010110100100", 
    62 => "00111101110000101010101100000110", 
    63 => "10111101001011111110010001101000", 
    64 => "10111110000000010011100011111111", 
    65 => "00111110000011110110000100001001", 
    66 => "00111110010010011001000111000110", 
    67 => "10111101100111100101000010101000", 
    68 => "00111110001101111101110010001111", 
    69 => "10111110000110100000010100100110", 
    70 => "10111110010010010110110010111101", 
    71 => "10111110000011000100000001111100", 
    72 => "10111101101100000000000111000001", 
    73 => "00111100101000010110010111111000", 
    74 => "10111101101101110100111001010011", 
    75 => "10111101110100110111111111101111", 
    76 => "10111101111001010110101001000011", 
    77 => "10111110010001101001001001100011", 
    78 => "10111101110000111111010110110000", 
    79 => "10111101001001001001110011011110", 
    80 => "10111101101011111101110101011100", 
    81 => "10111110000110011001110101011101", 
    82 => "00111101100111010111101001000010", 
    83 => "00111001100011111101010010111001", 
    84 => "00111101111010100111101111011010", 
    85 => "10111100101000101001000011010010", 
    86 => "10111110010110000000111010000011", 
    87 => "00111110000101101010010010101111", 
    88 => "10111110001000100000100010000000", 
    89 => "00111110010101010111101111111111", 
    90 => "00111100101001000111001110011110", 
    91 => "00111101111111101001100111100000", 
    92 => "10111101011000000111010000001111", 
    93 => "10111101110111000100010010011000", 
    94 => "10111101100110001001000101010001", 
    95 => "10111101100011000101111010000010", 
    96 => "10111101011111101001100101001001", 
    97 => "00111101101010001101100100110000", 
    98 => "10111101101011001000110101010101", 
    99 => "10111100100100100011001110111110", 
    100 => "10111110000010001101110111111011", 
    101 => "10111101100001001011001101111111", 
    102 => "10111110001010110001000100001100", 
    103 => "00111010101000000101100011001110", 
    104 => "00111101101001111000110010010000", 
    105 => "00111101011101000111010111100001", 
    106 => "00111101001011010000111110111000", 
    107 => "10111100101110100000111111101100", 
    108 => "10111110001100010001000110011100", 
    109 => "00111101110111111101011011010111", 
    110 => "10111101110010101111000110011110", 
    111 => "00111110001110110000001110111110", 
    112 => "10111110101111101010100000010000", 
    113 => "00111110001000001001111111011111", 
    114 => "00111100010010010000111011010001", 
    115 => "10111110010001001100000000100011", 
    116 => "10111110000100101100010010000011", 
    117 => "10111101101100100101011011111100", 
    118 => "00111101111101011000111000111001", 
    119 => "10111110000000111000100111010001", 
    120 => "00111110000000000101101010101110", 
    121 => "00111101000101101001001000101111", 
    122 => "10111110001001111111011011010100", 
    123 => "10111101101001010000001101001000", 
    124 => "10111101100010110010100100010000", 
    125 => "10111110010111101001100011101010", 
    126 => "00111110010101000101110100110110", 
    127 => "00111100011100110010111011001110", 
    128 => "00111101111011000000110011011101", 
    129 => "00111101100111100001111100101101", 
    130 => "10111101100110110001100111011011", 
    131 => "00111110000000000111100010110111", 
    132 => "10111110001001001100111000110111", 
    133 => "10111011100110101111111010110100", 
    134 => "10111101010110101010011111001111", 
    135 => "00111110001000111010000110100111", 
    136 => "10111110000111001101101010100011", 
    137 => "10111110000100110110100100011100", 
    138 => "10111101000110010010110101100000", 
    139 => "00111100111001111100100101010101", 
    140 => "10111101010011111111000000111000", 
    141 => "10111100000011101110001111010101", 
    142 => "00111100101010001010110000100001", 
    143 => "00111100100001000101100001000101", 
    144 => "00111101011010010101101101000111", 
    145 => "00111101001011111000000111011110", 
    146 => "10111110011100001001010000011110", 
    147 => "00111101010010011000110001000011", 
    148 => "00111101011100001100101000011011", 
    149 => "10111110001101100110010000001100", 
    150 => "00111110001110111111110011010111", 
    151 => "00111101100011100010100001100011", 
    152 => "10111101110101010000100100111010", 
    153 => "00111100111110110101101010111111", 
    154 => "00111101111111010001010000110011", 
    155 => "10111110000101111010100011001001", 
    156 => "00111110001010010001111010011101", 
    157 => "10111110101010000100011111111011", 
    158 => "00111101101001001110010101111010", 
    159 => "00111101101000101010110111100110", 
    160 => "00111100000101010011111010011001", 
    161 => "00111110100010010010100100011101", 
    162 => "00111100110001011011000101010011", 
    163 => "00111101110011100111011000000100", 
    164 => "00111110001000110011001101010010", 
    165 => "00111110011110101100100001010000", 
    166 => "00111110011011100111000111011101", 
    167 => "00111110100010011011000000010100", 
    168 => "10111110000110001000100011101000", 
    169 => "10111101011100111000100010111001", 
    170 => "10111110001110000111100001101010", 
    171 => "00111110001001101000101001110011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiHfu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiHfu is
    component myip_v1_0_HLS_weiHfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiHfu_rom_U :  component myip_v1_0_HLS_weiHfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


