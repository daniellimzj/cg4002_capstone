-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weilbW_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weilbW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000100001000110110111010", 
    1 => "10111101000001000011101111100011", 
    2 => "10111101000010110111011110101110", 
    3 => "10111110001010010001001101110111", 
    4 => "10111101111001110001000010011011", 
    5 => "10111101110000111101100101001010", 
    6 => "10111101101001111011011101101011", 
    7 => "10111110000101101100001001011000", 
    8 => "10111110000101101100100010111001", 
    9 => "00111110001100110111000000000000", 
    10 => "00111011111001101100010101000010", 
    11 => "00111100001111001010000101001100", 
    12 => "00111110011111000110001100001000", 
    13 => "00111101110100010100101111110100", 
    14 => "00111101111011011001111010100100", 
    15 => "10111101111001010100011111001100", 
    16 => "00111110010101010100011010101100", 
    17 => "00111010010000101110010111111011", 
    18 => "10111101100000010011001000100111", 
    19 => "00111100100110100101010001011001", 
    20 => "10111110000010010011000000100100", 
    21 => "10111110010010010010110111001100", 
    22 => "10111101101000010001000001111001", 
    23 => "10111100010011011011101010001011", 
    24 => "10111110010010100000001000001101", 
    25 => "10111100100100110110101100010001", 
    26 => "10111101010101110111100111010011", 
    27 => "10111101011110110001000001110111", 
    28 => "10111110010001110011111110111001", 
    29 => "10111101100110000111111111011000", 
    30 => "10111100110110111111001001101001", 
    31 => "00111100100111011011100001011111", 
    32 => "00111110001010000110011000110111", 
    33 => "10111110001101001111101011100011", 
    34 => "00111110010001110110111111100111", 
    35 => "10111100111110100100100100111101", 
    36 => "00111101110000100110010110011010", 
    37 => "10111011011000000110111001010011", 
    38 => "10111101101100011111010010001110", 
    39 => "10111101100001010111000010000101", 
    40 => "00111101011111010101110010000000", 
    41 => "00111101011011111111001100000011", 
    42 => "10111101100001001111010000110111", 
    43 => "00111101101010010101011000010110", 
    44 => "00111110011100011010011001101011", 
    45 => "10111101101001111001110111000100", 
    46 => "10111101100111110110010111101010", 
    47 => "10111011100100111011011110101001", 
    48 => "10111101011110110111000011110100", 
    49 => "10111110010010110110101011111111", 
    50 => "10111101011111100000000001011111", 
    51 => "00111101101101010111111011110111", 
    52 => "10111110000001000111001011010000", 
    53 => "10111110001010011100101100101001", 
    54 => "00111101101010111101101000001101", 
    55 => "10111100100100101100110110010100", 
    56 => "10111101000010011101001000011110", 
    57 => "10111110000011110000011001011111", 
    58 => "10111100111110010111011010000011", 
    59 => "10111101111101011010101110001010", 
    60 => "10111110001001101011101110111100", 
    61 => "00111110010110001001111011001000", 
    62 => "00111110000110111001111000100101", 
    63 => "10111100010001000101110000101010", 
    64 => "10111110000110110110100011001100", 
    65 => "00111101100101011100000001011100", 
    66 => "10111011011100100101000110001110", 
    67 => "10111101101110010101101111101110", 
    68 => "10111110001000111011000001000111", 
    69 => "00111101111111101000011011111110", 
    70 => "10111110011010111011110101000010", 
    71 => "10111101001001010011110000000111", 
    72 => "00111101110100001011100100111110", 
    73 => "10111101111000111101011110011011", 
    74 => "10111100101011011010010101110010", 
    75 => "10111101010101101101000111001010", 
    76 => "00111110001111001001101101101010", 
    77 => "00111110000001010111110110010000", 
    78 => "10111101011001001011111111000001", 
    79 => "00111110000001001001000011110001", 
    80 => "00111101100000001010010000001100", 
    81 => "00111110001000010001110001111100", 
    82 => "00111110011010010010000010001010", 
    83 => "10111100011010110111111101110101", 
    84 => "00111101101111111101001001101111", 
    85 => "00111110011100100101001001100111", 
    86 => "00111100100011101011101111001010", 
    87 => "10111110000011100110000001001011", 
    88 => "10111101100110000011101000100001", 
    89 => "00111110000110101001001111001001", 
    90 => "00111101001111110100011101010100", 
    91 => "10111101011001010011100000111111", 
    92 => "10111101001010011011011110101000", 
    93 => "00111101001101101101000101100001", 
    94 => "10111110000010001001011011110101", 
    95 => "00111100101000101101010011101011", 
    96 => "00111101001100111110101010011001", 
    97 => "00111101111110111011001011000100", 
    98 => "10111110100000110010001000100001", 
    99 => "10111110000110001110010111011110", 
    100 => "00111101101000011001110001011101", 
    101 => "10111110010111111111101001101010", 
    102 => "00111101101110001111100011110101", 
    103 => "10111101111001010000100001101110", 
    104 => "10111110001011101111100100000010", 
    105 => "10111011001001111001010100010010", 
    106 => "00111101100100110100000000001100", 
    107 => "00111110011100011100001000010001", 
    108 => "10111110011101101111011101110100", 
    109 => "00111101100110000011011111101110", 
    110 => "10111101110001011110010001010111", 
    111 => "00111100101000111010000011001101", 
    112 => "00111110000101101110110010010101", 
    113 => "10111101111001011000010001111110", 
    114 => "10111101001010000100001100010111", 
    115 => "00111110000001010111011010111101", 
    116 => "00111110001101001000100110000100", 
    117 => "10111110011100110100100010000110", 
    118 => "00111101011000000101010110100110", 
    119 => "10111110000100001111001110010011", 
    120 => "10111110100001101111010011111101", 
    121 => "10111101100001001000101110011100", 
    122 => "00111101110011100110000000001100", 
    123 => "10111101101011111110101001010001", 
    124 => "00111110010110010111101010111100", 
    125 => "10111110000100010100000011110000", 
    126 => "00111110000101011011011001101000", 
    127 => "00111110001110110101001001000101", 
    128 => "10111110000010001110011111111001", 
    129 => "00111101000110000000100010000100", 
    130 => "00111110010001000010101000010101", 
    131 => "10111110011010010000000110001011", 
    132 => "10111101000000110110100000110011", 
    133 => "00111110100010001010010010011010", 
    134 => "10111011001011101011000011011110", 
    135 => "10111101011001000110110110100111", 
    136 => "10111101000101000000000010110101", 
    137 => "10111101101101111100001011100000", 
    138 => "10111100011010001011111101011000", 
    139 => "00111110000000010011101000001010", 
    140 => "10111110011110111101100001100010", 
    141 => "10111101110111000011110110010101", 
    142 => "10111101101101010010111001101011", 
    143 => "00111110010111001111000011111101", 
    144 => "00111110011100011000001101001101", 
    145 => "00111110010000001011100000010110", 
    146 => "00111101110111111011110010000100", 
    147 => "10111101111011001011110110100100", 
    148 => "10111100001011010110011001000101", 
    149 => "10111110001110100100101011011011", 
    150 => "10111101100101100010100001100001", 
    151 => "10111110010011100101101001011010", 
    152 => "00111110000001010100000000011111", 
    153 => "10111100001001001010111111111001", 
    154 => "00111110010101011111110000010001", 
    155 => "00111110001011011010000001101101", 
    156 => "00111011001111001001001011011100", 
    157 => "10111100110001101100100101001011", 
    158 => "10111101101000111001111011000000", 
    159 => "10111101001000000010000100101110", 
    160 => "10111110001100100100010100010111", 
    161 => "00111110000111100100100111110100", 
    162 => "10111101011111010000010110100111", 
    163 => "10111101111111010100110110110111", 
    164 => "10111110100110001101100001011000", 
    165 => "10111110000011010000100100011010", 
    166 => "00111101000111001111101001100110", 
    167 => "10111110000100001111111011010111", 
    168 => "00111101011110100101010001111110", 
    169 => "10111110000110111111101100101010", 
    170 => "00111110100111000001110001001101", 
    171 => "10111100101110110101000101111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weilbW is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weilbW is
    component myip_v1_0_HLS_weilbW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weilbW_rom_U :  component myip_v1_0_HLS_weilbW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


