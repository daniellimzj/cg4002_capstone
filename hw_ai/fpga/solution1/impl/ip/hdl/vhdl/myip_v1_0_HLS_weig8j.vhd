-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weig8j_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weig8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101000101010101110111001", 
    1 => "10111110010011110011011010011001", 
    2 => "10111101101101001101101010011110", 
    3 => "00111110000100010000001110010100", 
    4 => "10111101110111010110110111011001", 
    5 => "10111110011101111010101001101011", 
    6 => "10111110001011111101110111111010", 
    7 => "00111101100111001111000000011001", 
    8 => "00111101100001010000110111010110", 
    9 => "10111110000000111100000110010001", 
    10 => "00111100101000100100010111101011", 
    11 => "00111110000110110110101100111100", 
    12 => "00111101011110111000100010110110", 
    13 => "00111110001111010111000100110011", 
    14 => "10111101111101001011011001101100", 
    15 => "00111110100001011110010010111110", 
    16 => "00111101110001001100001111111111", 
    17 => "10111100010101111010101111111111", 
    18 => "00111010000010000010011000101011", 
    19 => "10111110000110101110011101111110", 
    20 => "00111101000011010110010100111111", 
    21 => "00111101110010000101001100010101", 
    22 => "00111101101101010000001000110000", 
    23 => "00111011111110111011101001010011", 
    24 => "00111101101111011101100101100011", 
    25 => "00111101010100101110101011011110", 
    26 => "10111110011010101001000000100100", 
    27 => "00111110000001100101000000111100", 
    28 => "00111101110001011110110100000101", 
    29 => "00111101001100110110000100110100", 
    30 => "10111101100111100101010010000101", 
    31 => "10111110011111100101000000110001", 
    32 => "00111101110101111110011011010001", 
    33 => "10111101100101111101110111111101", 
    34 => "10111101101011000011010010001000", 
    35 => "10111110010001111011101111000011", 
    36 => "00111100110101000111111100111011", 
    37 => "00111100001000100011010100111100", 
    38 => "00111110000011001100110011100101", 
    39 => "10111101100110000110111010101010", 
    40 => "10111110011100110101010011010110", 
    41 => "00111110100010001001100010001000", 
    42 => "10111100101100000011010110111101", 
    43 => "10111110010000000001110111010101", 
    44 => "00111101000001110101100110101101", 
    45 => "00111110000100000111100110000010", 
    46 => "10111101101001001000101101111100", 
    47 => "00111101110111000010001100111111", 
    48 => "10111110010100000010000001011011", 
    49 => "00111101000001111111100010011110", 
    50 => "10111101111001110011000000011001", 
    51 => "10111101111000001100001110001001", 
    52 => "00111101000000101000000011101111", 
    53 => "10111100100110110000000100111011", 
    54 => "10111110011100110111011011010111", 
    55 => "00111101100100001100100010101100", 
    56 => "10111110000110100011111011101011", 
    57 => "00111101110100001111111111100101", 
    58 => "10111101000101111100000010110000", 
    59 => "00111110000110101100010011000101", 
    60 => "00111110001000001101010000011010", 
    61 => "00111101101110100101000001000110", 
    62 => "00111101100100000011011000110000", 
    63 => "00111110000001010110100101011100", 
    64 => "10111011100111100000110010001010", 
    65 => "00111010110100011101101111111110", 
    66 => "10111010111101100001010110111011", 
    67 => "10111101001100000010000011101100", 
    68 => "00111110100110110101011001111111", 
    69 => "00111101010111011010101101001000", 
    70 => "10111101110100100111001010000010", 
    71 => "00111101110110100011011010100100", 
    72 => "10111110100010010010011001011110", 
    73 => "00111101101000011001111000100001", 
    74 => "00111101110010010011010011011101", 
    75 => "00111110100011000001001001000001", 
    76 => "00111101011010010010011111110110", 
    77 => "10111101010101100101010011010100", 
    78 => "00111101100011011000111000110100", 
    79 => "00111101100011001011101001101110", 
    80 => "10111101100000010111101110011101", 
    81 => "10111110001100111110111010110001", 
    82 => "00111101101001101111100010010110", 
    83 => "00111101100010101100011010100111", 
    84 => "10111101001010110110010111101110", 
    85 => "10111100111110011011010011001000", 
    86 => "00111101100011110111000100001100", 
    87 => "00111110010100101100111101000011", 
    88 => "00111101001110000011000101101110", 
    89 => "10111100010011111111011101101010", 
    90 => "00111101111011010110001011101111", 
    91 => "10111100101001110110001000011101", 
    92 => "10111100010110111000101001111101", 
    93 => "00111101001010011001101000111010", 
    94 => "00111110000000011000100011110010", 
    95 => "10111100011101001100100111000000", 
    96 => "00111011110011011100010000111110", 
    97 => "10111110001011001001010101001101", 
    98 => "00111101111011101101001000110110", 
    99 => "10111110000010000000100001011011", 
    100 => "00111101101101010000100100100100", 
    101 => "00111100100001111111011110111111", 
    102 => "10111110001101011001011000001101", 
    103 => "00111110010000101101110110111100", 
    104 => "00111101001010001100111010000001", 
    105 => "00111101101010101011001000010101", 
    106 => "00111011010000101011011101001000", 
    107 => "10111101001100011010100110111000", 
    108 => "10111101000111100010011111011111", 
    109 => "10111110000111011110100111011001", 
    110 => "00111110011001110111110010010111", 
    111 => "10111101111110100100101110001101", 
    112 => "00111110010100111101001011110011", 
    113 => "00111100111001101000011101101100", 
    114 => "10111110001100110010011111000000", 
    115 => "00111101101000010110110110011101", 
    116 => "00111101101000100111000001001101", 
    117 => "10111110001011110011100001010100", 
    118 => "10111101100001101101001111100111", 
    119 => "10111101010000100101010000110100", 
    120 => "00111101111010011111110000111100", 
    121 => "10111101001111100100001111000100", 
    122 => "00111101100100111101001000100100", 
    123 => "00111100111110011001001111101101", 
    124 => "00111011101000011110010011010011", 
    125 => "00111110001100111111011111000100", 
    126 => "10111110001010101111000010001000", 
    127 => "10111101111111101110111100100100", 
    128 => "00111110000100100111010110111101", 
    129 => "00111101110000100101100011100011", 
    130 => "10111110001000110010111000100000", 
    131 => "00111110010010000001101100111111", 
    132 => "00111101100110011111100110011011", 
    133 => "00111100110001100101011111111100", 
    134 => "10111110000000011110001001110001", 
    135 => "10111101000011101100000101011010", 
    136 => "10111110001011110111001100111111", 
    137 => "00111101011100101011011000100111", 
    138 => "10111101100101001011101001110010", 
    139 => "10111110011011011111100101010010", 
    140 => "00111101100000010101111111010100", 
    141 => "10111101101110100101000100001010", 
    142 => "00111101110111111111010011101101", 
    143 => "10111101001001000000001110110000", 
    144 => "00111101111010101100111011110100", 
    145 => "00111110000100100010100101101000", 
    146 => "10111010100000011001110111010011", 
    147 => "00111110001100111100111000111001", 
    148 => "10111101101110110110000100010001", 
    149 => "10111110100000000100100110000001", 
    150 => "00111110000100011111001100100101", 
    151 => "10111101110101101011000000111010", 
    152 => "00111101110000110000100001110111", 
    153 => "10111100110001101100100100001001", 
    154 => "10111101100001100111111010010010", 
    155 => "10111101000101011111000010111011", 
    156 => "10111110011001001111100011001101", 
    157 => "10111110001010000111011000010110", 
    158 => "00111101100101100010101100110001", 
    159 => "00111100100010011011010111011001", 
    160 => "10111101111000001011010110110011", 
    161 => "00111101111001111101110100101100", 
    162 => "10111101111100110010010000111101", 
    163 => "00111110001000001110110101011010", 
    164 => "00111110001001011110100000110010", 
    165 => "00111100111000010010101100000101", 
    166 => "00111100111011011100000111010000", 
    167 => "00111110011001000101000101111001", 
    168 => "10111110001001101001001001011000", 
    169 => "00111110001110001001001001000010", 
    170 => "10111101000000100100010110000100", 
    171 => "00111110001000011000110101010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weig8j is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weig8j is
    component myip_v1_0_HLS_weig8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weig8j_rom_U :  component myip_v1_0_HLS_weig8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


