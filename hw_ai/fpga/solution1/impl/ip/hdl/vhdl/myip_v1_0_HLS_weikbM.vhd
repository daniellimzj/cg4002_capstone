-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weikbM_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weikbM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011101010000000001011001", 
    1 => "00111101100110011111011110100101", 
    2 => "10111110000010011000111111000110", 
    3 => "10111110001010011000001010000001", 
    4 => "00111101100011000000111110000011", 
    5 => "10111110010111010011011010111110", 
    6 => "00111100011011111010110110010110", 
    7 => "10111100011100101101010100110111", 
    8 => "00111110011001000101000100011100", 
    9 => "10111110001110110101111000101000", 
    10 => "10111101010100011010110011000101", 
    11 => "10111101110111001110010101000010", 
    12 => "00111101111110101100011111100110", 
    13 => "00111110100111100101010011000000", 
    14 => "00111011000111111010110100101011", 
    15 => "00111101110100010001110111100110", 
    16 => "10111101001001101100001000111001", 
    17 => "00111110100110011011111000100010", 
    18 => "10111100011100000001010010111000", 
    19 => "10111101000001010100111100111110", 
    20 => "00111110011010110110110010101110", 
    21 => "10111110001000100011111011010000", 
    22 => "00111101000000100101001011000000", 
    23 => "00111100001100100110001010100000", 
    24 => "00111100010001011110011001101100", 
    25 => "00111100111100111000010110111000", 
    26 => "10111101101010110010101100110000", 
    27 => "00111101000000111011110000100101", 
    28 => "10111110101010011001010110110101", 
    29 => "10111101110100001001100000111110", 
    30 => "10111100000001100101111101110101", 
    31 => "00111110001000101010000110100000", 
    32 => "00111101111001010001000101111001", 
    33 => "00111101111010001000101100101101", 
    34 => "10111110011000110100001001001110", 
    35 => "00111101010101111101101011111111", 
    36 => "10111101111110010001100001111101", 
    37 => "10111110100111011100100100101111", 
    38 => "10111101011101011100110011010101", 
    39 => "10111101111010000011000010011000", 
    40 => "00111110011000001110000110010010", 
    41 => "00111101100010100010100100011011", 
    42 => "10111110100101100100011001101001", 
    43 => "00111101100110100100101010110110", 
    44 => "10111110000001100011000101110111", 
    45 => "10111101000110100010100011000000", 
    46 => "10111101101010011111111100001110", 
    47 => "10111100011110110010110000100011", 
    48 => "00111101010100001011100101011110", 
    49 => "10111101110111000100010100110011", 
    50 => "00111110101100011101010001101110", 
    51 => "00111101110011001011001111100010", 
    52 => "00111110100101111001011010100110", 
    53 => "00111011100100011100101000010111", 
    54 => "10111100110110011010110111110100", 
    55 => "10111101010011000011010001110011", 
    56 => "00111100110101010101111110100011", 
    57 => "10111101011010111111111000110001", 
    58 => "10111101101001101011010000111000", 
    59 => "10111110100001100001100110111001", 
    60 => "00111110000000111111110001001011", 
    61 => "10111110000111110110010000110001", 
    62 => "00111110000101110011101010111010", 
    63 => "10111110001010101010000010011100", 
    64 => "10111110000011110110011010111111", 
    65 => "10111101100101010000000000001000", 
    66 => "00111100101000100011110111011011", 
    67 => "10111101001000111000111001011010", 
    68 => "10111100111101010110110111011000", 
    69 => "10111110011011010010100100100111", 
    70 => "00111100010000001010111011101011", 
    71 => "00111100110100000111011011101100", 
    72 => "00111011100001100101000110000001", 
    73 => "00111101111011011001101100010101", 
    74 => "00111110011011110000111111110110", 
    75 => "10111110101011011011001010001111", 
    76 => "10111110001101001001010010011000", 
    77 => "10111110001111010111010101110110", 
    78 => "00111110010100001010101111110010", 
    79 => "10111110010000000101100111101011", 
    80 => "10111100101111111000111011100110", 
    81 => "10111110001100010110100000011000", 
    82 => "00111101010001111000010011101100", 
    83 => "00111110010010011010111111111111", 
    84 => "10111101101010001000111110010000", 
    85 => "10111101111010001101110110001001", 
    86 => "00111110010001010111111000101100", 
    87 => "10111010100001001001100100100011", 
    88 => "10111110001011101011100101001100", 
    89 => "10111101010000000100100111111111", 
    90 => "10111101111000100001010000101011", 
    91 => "00111101110111101111100100110010", 
    92 => "00111110010000100110000101101111", 
    93 => "10111100001110101101000110100001", 
    94 => "00111101111110101000100001000010", 
    95 => "00111101100111011101101111001001", 
    96 => "00111110010100001001010100011011", 
    97 => "00111110000000011101011111011110", 
    98 => "10111100111101010000001101101011", 
    99 => "00111101000001110110000111110010", 
    100 => "00111101010000101101000101011000", 
    101 => "00111110001101100010000111110100", 
    102 => "00111110100001101110110101010010", 
    103 => "00111101111100111111110101001001", 
    104 => "10111110001000011100011100111101", 
    105 => "10111101111011111111100101101101", 
    106 => "10111110100010000001111000111100", 
    107 => "10111101101111011111110111100101", 
    108 => "00111101011001101111111011111100", 
    109 => "00111101101111010100010111011100", 
    110 => "00111101010111011111000101111010", 
    111 => "10111100111111101001100001100000", 
    112 => "00111101010101100001010010111100", 
    113 => "00111100111001001001101100101110", 
    114 => "00111110010111110011111010000010", 
    115 => "10111101111010010000000001110101", 
    116 => "10111110000010011100010101000000", 
    117 => "00111100100011001101011010110011", 
    118 => "00111100110111000000100010111110", 
    119 => "10111101101011000100000001110001", 
    120 => "10111101010110101111101100001000", 
    121 => "10111011100111000010001110001000", 
    122 => "10111101111011010100100011111100", 
    123 => "00111110101101000111101110001000", 
    124 => "00111101100110100110101011111110", 
    125 => "00111110011111000001010101101110", 
    126 => "10111101101101010111010100111010", 
    127 => "10111101001100010010010010110000", 
    128 => "00111101101100011001010011100011", 
    129 => "10111110000101011101110000011110", 
    130 => "10111110001011111111011111000100", 
    131 => "10111100111001011001110110111111", 
    132 => "00111110000101000010000011011011", 
    133 => "00111110010110110011000111100001", 
    134 => "00111101001001011010101010001000", 
    135 => "10111101011000111001000011110000", 
    136 => "00111101101101111101011011000100", 
    137 => "00111100100010011010011011000010", 
    138 => "00111110100011011010000100000001", 
    139 => "00111101011100001000010110010101", 
    140 => "10111101111101100011011001001111", 
    141 => "10111101110111100000101001101011", 
    142 => "10111101111100110000101000000110", 
    143 => "10111100111110000000010111001010", 
    144 => "00111100100100110110111010100001", 
    145 => "00111101100110101111111101101010", 
    146 => "00111110001010101001000110111011", 
    147 => "10111110000011111101110011000010", 
    148 => "00111001111010010111011000011101", 
    149 => "00111100010110110101110001001111", 
    150 => "10111101101011111011101101110001", 
    151 => "10111101101111001110110101000101", 
    152 => "00111101010100110011110011010100", 
    153 => "00111101110110011111011110000010", 
    154 => "00111101100100111011001010010100", 
    155 => "00111110001001000001101000110000", 
    156 => "10111101010110111000111010011001", 
    157 => "00111101011010011010111010001100", 
    158 => "10111101001100111010110111110001", 
    159 => "00111101110001111011100010100110", 
    160 => "10111110100001111100100111100001", 
    161 => "10111110001101001001011100100000", 
    162 => "10111110001110111010001001100000", 
    163 => "00111110010011100000001001110010", 
    164 => "00111100110110110010110100110010", 
    165 => "10111101011101001101000101111001", 
    166 => "00111011010101100101100010111111", 
    167 => "10111101110010011100001011110001", 
    168 => "10111101101010111110010011010111", 
    169 => "00111101111111001111110010101000", 
    170 => "00111101011111100100101011001101", 
    171 => "10111101000110000001000101001111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weikbM is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weikbM is
    component myip_v1_0_HLS_weikbM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weikbM_rom_U :  component myip_v1_0_HLS_weikbM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


