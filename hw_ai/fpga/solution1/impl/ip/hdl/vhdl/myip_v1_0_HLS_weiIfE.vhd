-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiIfE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiIfE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001110100011010111010101", 
    1 => "10111110000001000010000000101110", 
    2 => "00111110001110010011010011011010", 
    3 => "10111101000000101010010001100100", 
    4 => "10111101000000100100111011101000", 
    5 => "00111110101011111100000001001001", 
    6 => "00111101001110101011111001101100", 
    7 => "00111101111001111101010000101011", 
    8 => "00111110100011111001010101001010", 
    9 => "10111101001011111101101111000101", 
    10 => "00111101001010110010011011111111", 
    11 => "00111100100000110011001010001111", 
    12 => "10111101010100000111011000010110", 
    13 => "00111110001011101011000110111110", 
    14 => "10111101100110100011110001000100", 
    15 => "10111101001100010100000110011011", 
    16 => "00111101100010011110110000000011", 
    17 => "00111100100111100110011010011100", 
    18 => "10111110010110101010010101101101", 
    19 => "10111101111111001100100000110010", 
    20 => "00111110000001001011011101010100", 
    21 => "10111101001010110101100101011000", 
    22 => "10111101111010111011000001100101", 
    23 => "10111110010010111101000101100100", 
    24 => "00111101001000000001100011110101", 
    25 => "00111100101011111001100111010000", 
    26 => "10111110000100111001011010000011", 
    27 => "00111110001100010110000001010011", 
    28 => "00111100001100111101001010011000", 
    29 => "10111110001000101000011110001100", 
    30 => "10111101011000111001101010001111", 
    31 => "10111011101110001101111110101111", 
    32 => "10111011111001010101010011101010", 
    33 => "00111101010010100001011101000001", 
    34 => "00111110100110101110100101101001", 
    35 => "10111110100000111111001101011000", 
    36 => "00111100110111001011110101001101", 
    37 => "00111110000101011000010001000000", 
    38 => "00111101101000000001010101011011", 
    39 => "00111101100001000110100110100001", 
    40 => "10111110000100110101001001101111", 
    41 => "10111101000101110110001011100001", 
    42 => "00111110000110110111011011011100", 
    43 => "10111101111100001111000011000101", 
    44 => "00111110010000010010001000000110", 
    45 => "10111110100000000000111001110011", 
    46 => "10111101010010001011101011101110", 
    47 => "10111101101011100110111001001011", 
    48 => "00111110100011000001001110100010", 
    49 => "10111110001001111100010010000101", 
    50 => "10111110011111110000000010101000", 
    51 => "00111110100000101011100010011010", 
    52 => "10111110100011011101110101001111", 
    53 => "00111100001101111010011000010100", 
    54 => "00111100110110011101100001011011", 
    55 => "00111101010010101001000110110011", 
    56 => "00111110010000000011000001110101", 
    57 => "10111101010100110001001001011101", 
    58 => "00111110000100000011100101100010", 
    59 => "00111101111101100100110110100101", 
    60 => "00111101000101111000111011111100", 
    61 => "10111101000110011101111110010110", 
    62 => "00111101010110100000001010011101", 
    63 => "00111110000001001110000111101111", 
    64 => "10111101111100111101111011000100", 
    65 => "10111101100001111000110001001111", 
    66 => "10111100101101010001011110001011", 
    67 => "10111101110110010001011100001011", 
    68 => "00111101110010010100111110101011", 
    69 => "10111110010101101100110011010101", 
    70 => "10111110001101000010010010000001", 
    71 => "00111110011100100000101100101010", 
    72 => "10111110010001100000111110101011", 
    73 => "10111100101001010110010001111111", 
    74 => "00111100110010111111110111110111", 
    75 => "10111101011000111010010000110100", 
    76 => "10111101100001100011001111011010", 
    77 => "00111110000001010001000010110011", 
    78 => "10111110011111001000111101001011", 
    79 => "00111101100100010001101000001101", 
    80 => "00111101000110101000110111000001", 
    81 => "00111110000110011111000010111100", 
    82 => "00111110000100110001101100000010", 
    83 => "00111101101110100001110001001001", 
    84 => "00111101011010011111011110101111", 
    85 => "00111110001000000001100101100010", 
    86 => "00111101110101111011010011110011", 
    87 => "00111101111000011010100011110011", 
    88 => "10111101111100101100010101000001", 
    89 => "00111101110001110111100000100110", 
    90 => "00111101111100111100101000101000", 
    91 => "00111110001010100110101101110011", 
    92 => "00111101100110101001001000100101", 
    93 => "10111101000110010010100101101111", 
    94 => "00111100101001101111100100110001", 
    95 => "00111101111001111011101111000001", 
    96 => "00111101101000000100010100011000", 
    97 => "00111010100110010000110010010101", 
    98 => "10111101100011011010000001101000", 
    99 => "00111101000100100101010000101101", 
    100 => "00111101101111110000101001000111", 
    101 => "10111100110001111110111100010100", 
    102 => "10111101111010000111001010010010", 
    103 => "00111100100110110000111110011111", 
    104 => "10111110000011100110001111001011", 
    105 => "00111101010000110101110110001110", 
    106 => "10111101100111000101000101101000", 
    107 => "00111101100011110011001000011010", 
    108 => "00111101110001000011010110000101", 
    109 => "10111110000001011000100100101001", 
    110 => "10111110001011010101101011010011", 
    111 => "00111110000111110110101110101011", 
    112 => "10111110101101010111001101001001", 
    113 => "10111100101100100011111001010001", 
    114 => "00111101101011011010011110100000", 
    115 => "10111101110110111111111110000000", 
    116 => "10111101001001001101101010011001", 
    117 => "10111100111100000110000110010001", 
    118 => "10111101010010100101100111001111", 
    119 => "10111101100100001111110001111011", 
    120 => "00111101101000001011100101100010", 
    121 => "10111101101100001010000010001010", 
    122 => "00111101001011011000000100101011", 
    123 => "00111101101010000110110000000111", 
    124 => "00111110001101100011000100110101", 
    125 => "10111110001101000111011100001011", 
    126 => "00111110001011101011110000100111", 
    127 => "00111101110000010000000011110000", 
    128 => "10111110010001110011110111101010", 
    129 => "10111101111000111010101011001001", 
    130 => "10111101110101100010100010000001", 
    131 => "10111011011001100011000111011000", 
    132 => "10111101101010110110100110101110", 
    133 => "10111101111101010111001000110101", 
    134 => "00111110011100000111011011111101", 
    135 => "00111011110010000010011111000000", 
    136 => "10111101111111011101001100111000", 
    137 => "00111101011010010001110100010100", 
    138 => "10111110100101001110011000101110", 
    139 => "00111101110110001110100101011111", 
    140 => "00111100100011000111110000000001", 
    141 => "10111110100101010001111111010011", 
    142 => "10111011110011100010110010110000", 
    143 => "00111101111101011011100000100001", 
    144 => "00111101010001111001000111100111", 
    145 => "00111110000001010100110011001001", 
    146 => "10111101111100100011101111011100", 
    147 => "10111110000100111000111101101001", 
    148 => "10111101001000100010100010100100", 
    149 => "10111110011001111110100110001111", 
    150 => "10111100111001111101101101101001", 
    151 => "10111101101110000001000101011001", 
    152 => "10111110001001101001010011011001", 
    153 => "00111110010100001110001101000100", 
    154 => "10111101001110100000111000000011", 
    155 => "00111110010001100110110000001110", 
    156 => "10111100010010100001011010001110", 
    157 => "10111110000000110100110010000001", 
    158 => "00111101100011101001111011111111", 
    159 => "10111011111000100111001101010110", 
    160 => "10111110000000111110111011010101", 
    161 => "00111101000101010001001111100010", 
    162 => "10111100100011100101101010011010", 
    163 => "00111110100000010001011101100011", 
    164 => "00111110000010011011100110010001", 
    165 => "10111101010001101011001111011100", 
    166 => "00111110011110000101111110011000", 
    167 => "00111110000110101111111010101001", 
    168 => "00111101100011011000100101100000", 
    169 => "10111110001001110100111100111101", 
    170 => "10111110010111100110011010010000", 
    171 => "00111110100001001010011010011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiIfE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiIfE is
    component myip_v1_0_HLS_weiIfE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiIfE_rom_U :  component myip_v1_0_HLS_weiIfE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


