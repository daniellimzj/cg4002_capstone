-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weimb6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weimb6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111110010011111011101000", 
    1 => "00111101101110101011110111111011", 
    2 => "10111100100100011000010000011010", 
    3 => "10111100110010001100100101010011", 
    4 => "00111110001000110110010010011100", 
    5 => "10111100010101000011011011110111", 
    6 => "00111100100110110010100010100110", 
    7 => "00111110010101001010000000010001", 
    8 => "10111101011101110001001101101001", 
    9 => "00111101101010100110001111100010", 
    10 => "10111101111101001010001101000011", 
    11 => "10111110010001000111000100110111", 
    12 => "00111101101011011100100000001010", 
    13 => "10111110100010011010000000010000", 
    14 => "00111101100010001011001100001111", 
    15 => "10111101010101001110101100001011", 
    16 => "00111101011100010001101101011101", 
    17 => "00111110001000110010001110001010", 
    18 => "10111100010100001100001101100110", 
    19 => "10111101101001011000101101100001", 
    20 => "00111101101011001011011111100001", 
    21 => "10111101110010000111100111100000", 
    22 => "10111110001110010011100000100111", 
    23 => "00111101100010110000000000011111", 
    24 => "00111100100001010001010011010100", 
    25 => "00111100111101011001100111110000", 
    26 => "00111100111000011110010001001111", 
    27 => "10111110000110110110111000010011", 
    28 => "10111101100101011010001001110100", 
    29 => "00111101011000100010000011010100", 
    30 => "00111101111110101010010010100101", 
    31 => "10111100111001111101011000110101", 
    32 => "10111101001010010010111110010101", 
    33 => "10111101101111110011000111100101", 
    34 => "00111101101001000101100110100111", 
    35 => "10111101110001000010110010101110", 
    36 => "10111101100000101011010110110000", 
    37 => "00111101100111010111110100110011", 
    38 => "00111110010100010101001101100101", 
    39 => "00111100101111100100001010110001", 
    40 => "00111100111000010110010101000011", 
    41 => "10111100101000101011101000110011", 
    42 => "00111110001010001010100110011011", 
    43 => "00111101000011001110010111011101", 
    44 => "00111101100100111111000111101011", 
    45 => "00111101111011000011000101110100", 
    46 => "10111101111111101011001001101111", 
    47 => "00111101101110101000111110001111", 
    48 => "10111110000001111111111001001100", 
    49 => "00111100001011110010011110010111", 
    50 => "10111101101100000110111101101101", 
    51 => "10111110010011000001100001011000", 
    52 => "10111100000111100000010111000101", 
    53 => "10111101101011101101010011111000", 
    54 => "00111101101011010010111100000010", 
    55 => "00111101101100101010000001101111", 
    56 => "10111101111010010111001100001110", 
    57 => "00111001000011001001111010011001", 
    58 => "00111101000001010111111101100011", 
    59 => "00111101101011100101101010000001", 
    60 => "10111100010111100000001111101110", 
    61 => "00111011000100101100000000001000", 
    62 => "10111110011110101101011001111100", 
    63 => "10111101111101100000110010010100", 
    64 => "10111110001100000010000001111010", 
    65 => "10111101000100000100010011100111", 
    66 => "10111101000010111001100110111000", 
    67 => "10111101110001011001010011000111", 
    68 => "00111101101011000111011010001100", 
    69 => "10111001110011011001011110001010", 
    70 => "10111101101111010000110111101101", 
    71 => "00111101010011110001010110111001", 
    72 => "10111110001011101101110101010110", 
    73 => "10111110001010011000010001110100", 
    74 => "10111101110000100101110110100110", 
    75 => "10111101100011110111110001101111", 
    76 => "10111101000110111111010111001101", 
    77 => "00111101011001010011010011100100", 
    78 => "10111100011010000110100111101001", 
    79 => "10111110000010011010010010111011", 
    80 => "00111110011111100011000111101111", 
    81 => "00111101011001111100010111111000", 
    82 => "10111110100010000010000011110110", 
    83 => "00111101011001011010101001100011", 
    84 => "00111101011101100101100010000010", 
    85 => "00111110001011011001001111110011", 
    86 => "10111110000001010101001110011100", 
    87 => "10111101101101111100110011001010", 
    88 => "10111100100101001001100110010100", 
    89 => "10111101100000001000111101110010", 
    90 => "10111101100001111010110011000011", 
    91 => "00111101001101000011001101001000", 
    92 => "10111110100011110101011010101010", 
    93 => "10111110011010110001011010010100", 
    94 => "10111101101001010000100111010010", 
    95 => "00111110010010111001011111000001", 
    96 => "10111110000111011101001001100001", 
    97 => "10111100001110100100100010111101", 
    98 => "10111110001100100011000101111101", 
    99 => "00111101100011000001110110110010", 
    100 => "10111011100100000000001111000100", 
    101 => "10111101010111101000011001010111", 
    102 => "00111110010010110010000000110101", 
    103 => "00111101000000001111100001101111", 
    104 => "10111100100101010011011101011001", 
    105 => "00111101111101001010011011011000", 
    106 => "10111110000011111110001001000110", 
    107 => "00111110000001101001001001110011", 
    108 => "00111101001000101110000001010001", 
    109 => "00111110001001010110101011010001", 
    110 => "10111110001010001110100010011010", 
    111 => "10111100101110000111111000111110", 
    112 => "00111101000100110111111110000101", 
    113 => "00111100110101001000110000111101", 
    114 => "10111100001010010011101100010000", 
    115 => "10111101110100011000001111001110", 
    116 => "10111101000111110100101011101110", 
    117 => "10111110000001000111110101110001", 
    118 => "00111110010111011100001101000100", 
    119 => "10111101111110101111000100011010", 
    120 => "00111101101100011000010101110011", 
    121 => "10111110000101110011101111111011", 
    122 => "10111100101100100011111111101000", 
    123 => "10111101110001011110000010110000", 
    124 => "00111101101100001111001011101101", 
    125 => "10111110011101001100001111010011", 
    126 => "10111110010110101101010011011010", 
    127 => "00111100000000000000001110011000", 
    128 => "00111101001100011110001101110100", 
    129 => "00111100110111110110100111110111", 
    130 => "10111110000110010101010100100011", 
    131 => "00111101011110000111001101100111", 
    132 => "10111101111011000101110010010001", 
    133 => "10111101110110100000110101111101", 
    134 => "00111110001010111010000000111100", 
    135 => "10111101001110011100011101001001", 
    136 => "10111101100001000100101110000011", 
    137 => "10111101110000011101111110110010", 
    138 => "00111100100110100010001110111111", 
    139 => "00111110011011100110011100010110", 
    140 => "10111101101110100011001000000101", 
    141 => "10111110000100111011100011101011", 
    142 => "00111110000011011000010110001000", 
    143 => "00111110001110101000011101001101", 
    144 => "10111110010011110001100010101011", 
    145 => "00111101111000101010000111000000", 
    146 => "00111110001101111111111000111011", 
    147 => "00111110000010011111000111110010", 
    148 => "00111110000010010101100100101010", 
    149 => "10111101010100111011100100111111", 
    150 => "00111101110101101011101001010111", 
    151 => "00111100100110111010011001010001", 
    152 => "10111101110110101010010101101011", 
    153 => "10111101111110100000000011001000", 
    154 => "00111110100001001111100000111010", 
    155 => "10111101011111000100000010010111", 
    156 => "10111110010001111101010000111000", 
    157 => "00111101010000100101101000010011", 
    158 => "10111110001001001111101010011101", 
    159 => "00111101101100001001010101010010", 
    160 => "10111110001100100010100010111111", 
    161 => "00111101110011110011110101010110", 
    162 => "10111101001011111000001110110000", 
    163 => "10111101111010111001000111111101", 
    164 => "00111101011101110010100100110100", 
    165 => "00111101101110111111110001000001", 
    166 => "10111110001100001111110111111001", 
    167 => "00111101010111110000110100100001", 
    168 => "10111110001110011111010110000001", 
    169 => "00111110000000111001110000010110", 
    170 => "10111110110011100110011111010001", 
    171 => "10111101100011011010001110001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weimb6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weimb6 is
    component myip_v1_0_HLS_weimb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weimb6_rom_U :  component myip_v1_0_HLS_weimb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


