-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiudo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiudo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110001100010000101000011", 
    1 => "00111100100011101010101100000111", 
    2 => "00111101111101110001110000011001", 
    3 => "00111101110000100111101100110100", 
    4 => "00111110000101101101000100011001", 
    5 => "00111110001001110100100000010000", 
    6 => "00111110010001100011100001011001", 
    7 => "10111110000001110100100000100111", 
    8 => "10111101011100001110101110010111", 
    9 => "00111101000010001001010011000100", 
    10 => "10111101101111110010100010101011", 
    11 => "10111110010000110011011100010000", 
    12 => "00111110100000011000010110011110", 
    13 => "00111110010001101010101000100100", 
    14 => "00111101100010100101000101011111", 
    15 => "10111110001100110111100011001001", 
    16 => "00111101011111110101110000011010", 
    17 => "10111110011100001001111001000111", 
    18 => "10111110001001100100100110111011", 
    19 => "10111011010011111010110001010111", 
    20 => "10111110011001010111100011101011", 
    21 => "10111101101100111011000101111011", 
    22 => "10111110000111110111110010000110", 
    23 => "00111101100110010111111010101010", 
    24 => "10111100111010011100111011000100", 
    25 => "10111101111100111100110000101001", 
    26 => "00111110001100010101101100001111", 
    27 => "00111101101000100110111010101010", 
    28 => "10111101100110010101101101111111", 
    29 => "00111101101011001001000101111010", 
    30 => "10111101110010100001011110110110", 
    31 => "10111101100100010100100101110001", 
    32 => "00111101101010101100000101101100", 
    33 => "00111101110111011110000110010100", 
    34 => "00111100001011000111010001000100", 
    35 => "10111110000000110100111101110011", 
    36 => "00111011011101111110110111111100", 
    37 => "10111101001000100111010001000010", 
    38 => "10111101110110001111000110111111", 
    39 => "10111101000111001011110101001110", 
    40 => "00111101110100110001000001011010", 
    41 => "10111110000111100110101000011100", 
    42 => "00111110010001000101100001110001", 
    43 => "10111110001000011001001011111111", 
    44 => "00111101100010101111011110101101", 
    45 => "00111101100101100011100010001101", 
    46 => "10111110001001010100111101110001", 
    47 => "10111100000111110110110101010110", 
    48 => "00111110001101111010000110101111", 
    49 => "10111101001101010110001011000110", 
    50 => "00111101110100100111101101110101", 
    51 => "10111101110111100000001100000111", 
    52 => "10111101101110100000000000101101", 
    53 => "00111101011100011110000100100010", 
    54 => "10111101111000011101100100011100", 
    55 => "00111101001110110100101110110001", 
    56 => "10111110001101110101111100101111", 
    57 => "10111110010100111100000110001011", 
    58 => "00111110000001000011110110111001", 
    59 => "10111110011011110101010001001000", 
    60 => "10111101001111000010011000111000", 
    61 => "00111110010111100100001001111011", 
    62 => "10111110000000111111011001010111", 
    63 => "00111110011001010110100011000001", 
    64 => "10111101011010000110001101101000", 
    65 => "10111101011111001111000101111010", 
    66 => "00111101001110000100010100011100", 
    67 => "10111110000000000001001111011101", 
    68 => "00111101101110111110010001010001", 
    69 => "10111101010000011110110111011111", 
    70 => "10111110001011011111001001110110", 
    71 => "00111110001011010111010111110001", 
    72 => "00111110001001111110111100011000", 
    73 => "10111110000000011100101111011110", 
    74 => "10111011000001110110101111100111", 
    75 => "10111110010111111001101111000110", 
    76 => "00111110100001110100000011101011", 
    77 => "10111101101010001101000100111001", 
    78 => "10111110000000010100001100100111", 
    79 => "00111101001000111110101111111100", 
    80 => "00111110010110001110110011011011", 
    81 => "00111101100000010100001111001010", 
    82 => "00111101100111111110111101101100", 
    83 => "10111101110011100111010000100111", 
    84 => "00111101100000011000101100100001", 
    85 => "00111101101100110001001110000110", 
    86 => "00111101000000101001011101101010", 
    87 => "00111101010000111101110010111101", 
    88 => "10111110000110000000101011001001", 
    89 => "00111101100100101110000011100000", 
    90 => "00111100111111011011110101000000", 
    91 => "10111101110110110100001011000011", 
    92 => "00111101001000011000101100001101", 
    93 => "00111110100000001011101001001011", 
    94 => "10111110000000001110011110101111", 
    95 => "00111101010011110101000100110001", 
    96 => "10111101011001011011111101111110", 
    97 => "00111110001100111011001010001110", 
    98 => "10111110010101110011110010011010", 
    99 => "00111100110110010101001011101011", 
    100 => "10111101000111011100111011111100", 
    101 => "00111011110110001110101110011100", 
    102 => "10111101100000100010101111000100", 
    103 => "10111101010010011100011111010010", 
    104 => "10111101001111000011100000000001", 
    105 => "10111110011010101100010010111110", 
    106 => "00111110000111001100110000101110", 
    107 => "00111101011011110111010110011001", 
    108 => "10111100101010001001010000111111", 
    109 => "00111100101111101001001001001010", 
    110 => "10111110010100111100110110001100", 
    111 => "00111101111100011011110100001001", 
    112 => "00111101100111010101100011100110", 
    113 => "00111101100001111001100010110101", 
    114 => "10111100110101110011100100011110", 
    115 => "00111110011010111001010110111011", 
    116 => "00111101000001010000101110001001", 
    117 => "10111100110101010111100010000011", 
    118 => "10111110000001011010011010001010", 
    119 => "00111100010011110110111111111110", 
    120 => "10111110000001011001000010100111", 
    121 => "10111101100101011001011010100100", 
    122 => "00111110010111001010110111000001", 
    123 => "10111101100001000010011000111010", 
    124 => "00111110001100110100111011010010", 
    125 => "10111100001011000110101111010110", 
    126 => "10111101001000110010010000010000", 
    127 => "10111101001001010011010101000001", 
    128 => "10111101100101000110000110011001", 
    129 => "00111101001001000101011000010110", 
    130 => "00111010000010111100010111111010", 
    131 => "10111110010011001100100100001101", 
    132 => "10111110010110001000001101111111", 
    133 => "00111110000000011110110000110011", 
    134 => "10111100101011000100010011100001", 
    135 => "10111100001010010110101111000101", 
    136 => "10111110010011001001011001001010", 
    137 => "10111101110010001110001110000000", 
    138 => "00111101110000010110110000100101", 
    139 => "00111101000101011101010101110000", 
    140 => "00111101111111110111110100010010", 
    141 => "00111101111010100110100110011111", 
    142 => "00111101001011000010010110011110", 
    143 => "10111101101000111011101001000011", 
    144 => "10111110000011011000000010011111", 
    145 => "00111101101100001101011000101011", 
    146 => "10111101111000111001100111101011", 
    147 => "00111110000101011110111001010111", 
    148 => "00111110010111011100101100100000", 
    149 => "00111101101010111111010000000100", 
    150 => "00111110000110101011010000000001", 
    151 => "10111110001100100011011010110100", 
    152 => "10111101111001001111111100101110", 
    153 => "00111101011001111010010100000010", 
    154 => "00111101100001111001101011101110", 
    155 => "10111101001111010110100011000111", 
    156 => "00111110000100100010001001010110", 
    157 => "10111101001011010000011110111111", 
    158 => "10111101100110100011011011100001", 
    159 => "00111101100110100001110101110100", 
    160 => "10111101101100000100111011010010", 
    161 => "10111011000101111011110001110100", 
    162 => "10111110000101001010001111101000", 
    163 => "10111101011110000111101101010100", 
    164 => "10111110001000010000111110111101", 
    165 => "00111101111011100001001110001000", 
    166 => "00111101111010011000111001010101", 
    167 => "10111110010100110100000011010110", 
    168 => "00111101100000011011110110110100", 
    169 => "10111101100000001111000000110100", 
    170 => "10111100010001110111011110000000", 
    171 => "00111110011001111001010111111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiudo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiudo is
    component myip_v1_0_HLS_weiudo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiudo_rom_U :  component myip_v1_0_HLS_weiudo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


