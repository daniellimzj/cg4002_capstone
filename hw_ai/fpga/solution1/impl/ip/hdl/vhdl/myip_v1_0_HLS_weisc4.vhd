-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weisc4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weisc4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011110110010100000111100", 
    1 => "00111110000100100111110110000100", 
    2 => "10111100101100101000100010010011", 
    3 => "00111101101100100110101000101101", 
    4 => "00111110001111000111000110010011", 
    5 => "10111100011100001101110001001111", 
    6 => "00111110100011100101001101110100", 
    7 => "00111101101100111111010001101110", 
    8 => "00111101100110000001101100100010", 
    9 => "10111101011010000101111000011001", 
    10 => "10111100100100011000101010011011", 
    11 => "00111101110111000111110100001010", 
    12 => "10111100111101001000000011010110", 
    13 => "10111100111101001001000001110111", 
    14 => "10111110011100010100000010110011", 
    15 => "10111110000100100101000110100111", 
    16 => "10111110010111110000001000010000", 
    17 => "10111110001001011101101001000000", 
    18 => "10111110100110110010010000100001", 
    19 => "10111101101010010110010100011111", 
    20 => "00111100101001011000011110010100", 
    21 => "00111110010011000110101000011001", 
    22 => "00111101100111110010101011111001", 
    23 => "10111101101011011101000001101010", 
    24 => "10111101000000001000100110111001", 
    25 => "10111101010101000000111100100100", 
    26 => "00111110001011011001110011001110", 
    27 => "10111011000100111111110101100000", 
    28 => "00111101100110101010010101111000", 
    29 => "00111101010110000011011111011001", 
    30 => "10111100100000001000001000011011", 
    31 => "00111101111111001000111111011100", 
    32 => "10111110011000001011010011010100", 
    33 => "00111101111000110001100110101010", 
    34 => "00111101100101001001101100010111", 
    35 => "10111101110000001101110010001110", 
    36 => "10111100000100101100101001001001", 
    37 => "10111110001001100110010001011101", 
    38 => "00111110010000101100111101100010", 
    39 => "10111101110111001101010100010111", 
    40 => "00111110010001000000001001010010", 
    41 => "00111110001101010000000111001110", 
    42 => "10111110100010001000101010010010", 
    43 => "00111101110011110101111001001101", 
    44 => "10111101001110010100101111000101", 
    45 => "00111101110010101001110100001010", 
    46 => "10111101011111101111101110110110", 
    47 => "10111110000000010010001000101000", 
    48 => "10111110010100110001111101000000", 
    49 => "00111101100100110100100101000011", 
    50 => "10111100101101111010001100100010", 
    51 => "10111110010100110001001001110111", 
    52 => "00111100101000000101100000010001", 
    53 => "00111101111011010110111100001000", 
    54 => "00111110100000100011100011001010", 
    55 => "00111101010100011110001000011100", 
    56 => "00111110000101100110100011100110", 
    57 => "10111101111010110101001101010100", 
    58 => "10111110011001101101111011010111", 
    59 => "00111101011111011011000100110100", 
    60 => "10111110001100011110111111100101", 
    61 => "10111110100001000110101100100011", 
    62 => "00111000111011110010110110101100", 
    63 => "10111110001010010101111010110101", 
    64 => "00111100011000110000101010000111", 
    65 => "00111100111010010000110000010000", 
    66 => "10111101011111100010111100111110", 
    67 => "00111110000001101011110000000101", 
    68 => "00111110100011001010000011000100", 
    69 => "00111101011111110100000101111011", 
    70 => "00111101100011010100100100010001", 
    71 => "10111101101011011101110101000000", 
    72 => "00111101001110000011010100100000", 
    73 => "10111100011101101001000111010100", 
    74 => "10111110010000011010100000000000", 
    75 => "00111110001111101011100011111001", 
    76 => "10111101101110101101100110100010", 
    77 => "00111101001011111011111001010110", 
    78 => "10111110001111111111110100100101", 
    79 => "10111101101101101010101001110100", 
    80 => "10111110010100001010010111000010", 
    81 => "10111110010011010010111100100010", 
    82 => "10111110000010010111010111001101", 
    83 => "10111101110111111010111100000110", 
    84 => "10111110001001010010100001111100", 
    85 => "10111110001000111000100101100101", 
    86 => "10111101111010001110101111001011", 
    87 => "00111100110010111011111000101110", 
    88 => "00111101111001100101011000100100", 
    89 => "10111101100001100100000100001011", 
    90 => "00111100110100100010011110101100", 
    91 => "10111101100011110110001110011101", 
    92 => "10111110011111110100001111010011", 
    93 => "00111110001000011100011010100011", 
    94 => "00111101111001110000110110111111", 
    95 => "10111110001100101010111110000100", 
    96 => "00111011101000110010001000000010", 
    97 => "10111100100101100000001010101100", 
    98 => "00111100110110011100111100000001", 
    99 => "00111110010010111110100100100111", 
    100 => "00111101100101011100010101110101", 
    101 => "00111100001110011010000010110100", 
    102 => "10111100010000111100100010001101", 
    103 => "10111101111001100110001011001110", 
    104 => "00111011101011001010100100001011", 
    105 => "00111110000101011001001010101110", 
    106 => "10111101010000000010001101011101", 
    107 => "10111101110110000001011001110001", 
    108 => "10111101101001000110011101100011", 
    109 => "00111101111111010011000110000000", 
    110 => "10111110000001011110011010101100", 
    111 => "00111110000011010001101101110110", 
    112 => "00111110000000100010110110100100", 
    113 => "00111101111101000101001111110001", 
    114 => "00111110010000111111000110010100", 
    115 => "10111011100010001101110100110000", 
    116 => "10111110100001100110110001001011", 
    117 => "00111101011110011011100110100010", 
    118 => "10111101010010010011001110011001", 
    119 => "10111101011100011100100110100100", 
    120 => "00111101001101011111110110111000", 
    121 => "00111100111110011100110111101010", 
    122 => "00111010011100010011100110010000", 
    123 => "10111110000010111110001110101111", 
    124 => "10111101111110111011100111000111", 
    125 => "10111101001000100110101010100001", 
    126 => "00111101100000100111111000000000", 
    127 => "00111011111000101101100101010101", 
    128 => "10111110001001111100001101001001", 
    129 => "00111110000011000010011011101011", 
    130 => "00111101001100110000110110010100", 
    131 => "00111110001001000100111101001000", 
    132 => "10111101101101001110111011111011", 
    133 => "10111110100011101010110101110100", 
    134 => "10111101101111100110010011100100", 
    135 => "00111101011000000001011000110101", 
    136 => "00111101011100011100111001011000", 
    137 => "00111101100111100111110110111001", 
    138 => "10111100101010101011100101010010", 
    139 => "00111011001100010110010101101011", 
    140 => "00111101100100000000110101001110", 
    141 => "00111101001101101100111100000000", 
    142 => "00111101011001010101011000011111", 
    143 => "10111101111000100010001010110010", 
    144 => "10111110001000011000011111110011", 
    145 => "10111110000001001001011111010110", 
    146 => "00111110010110110101000111110110", 
    147 => "00111110011000001110010110010000", 
    148 => "10111100000111011010011001111100", 
    149 => "00111110010110000101110111001011", 
    150 => "10111101110101011010110000111100", 
    151 => "10111101100011001011001101010111", 
    152 => "10111110001000000011110110100000", 
    153 => "00111110001001011001101011101111", 
    154 => "10111110001011101101111101011100", 
    155 => "10111101001011101010010100011111", 
    156 => "10111100100000010101100100100111", 
    157 => "00111101100100000101001011010100", 
    158 => "10111110000100110011111110000010", 
    159 => "10111101100111001000000000110110", 
    160 => "10111100101010001011101010001100", 
    161 => "10111100100001110011110000100111", 
    162 => "10111101101001101110001110000010", 
    163 => "10111110000011001011011101010001", 
    164 => "00111101101011000100011010111110", 
    165 => "00111110010011110000011001101111", 
    166 => "00111101010001101000000011100100", 
    167 => "00111110001110111000010110001101", 
    168 => "10111101111001011001011011001001", 
    169 => "00111110010111111010101111001010", 
    170 => "10111110101100010010101011110110", 
    171 => "10111110000110010101100011001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weisc4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weisc4 is
    component myip_v1_0_HLS_weisc4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weisc4_rom_U :  component myip_v1_0_HLS_weisc4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


