-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weihbi_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weihbi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110011100010111111111110000", 
    1 => "00111100111100000001101101000000", 
    2 => "10111101101011011011100101000111", 
    3 => "10111101101001110001100101101001", 
    4 => "10111110001001101111111000111110", 
    5 => "10111101110111100011101001010110", 
    6 => "10111101000000101100011101101001", 
    7 => "00111110010011011110111001100101", 
    8 => "00111101100110111110111011110111", 
    9 => "10111100110101100100111010010001", 
    10 => "10111100000110010010001000110110", 
    11 => "00111101111010000010000011011111", 
    12 => "00111101100100000001001000111110", 
    13 => "00111110001110010111000010001001", 
    14 => "10111101100001011001111000011101", 
    15 => "10111101110101111110111001100001", 
    16 => "00111101111101110110101010100000", 
    17 => "10111110000101010111000100001000", 
    18 => "10111101100100111010110100111101", 
    19 => "10111101101011100000110010101001", 
    20 => "10111110000010011010111011011001", 
    21 => "10111011101111011110100111001001", 
    22 => "10111101101110011110011010101010", 
    23 => "10111110100010010110010111001110", 
    24 => "10111101111111011110010011010110", 
    25 => "00111101001011001000110101000110", 
    26 => "10111101100010000110010110000010", 
    27 => "10111101001001000000101010111000", 
    28 => "10111100001011111000111000010100", 
    29 => "10111101100010110010001110110101", 
    30 => "10111110010101010010000001110100", 
    31 => "10111101101001111011110100111101", 
    32 => "00111110010010000010001111111101", 
    33 => "00111101101101100000110010000001", 
    34 => "00111100111011110100001101000100", 
    35 => "10111110100001010101111101000100", 
    36 => "10111100000110110111011110010001", 
    37 => "10111010110100111010100000111001", 
    38 => "00111110001110010001001000011100", 
    39 => "00111110000010001010000000010001", 
    40 => "10111110001010101010110010111100", 
    41 => "00111101100011011111100000101100", 
    42 => "00111110100001001011101100011101", 
    43 => "00111101100110001010101000001001", 
    44 => "00111101100010011000111111010001", 
    45 => "10111110000111000001110100101000", 
    46 => "10111010110011100001100001001111", 
    47 => "10111011111001111110011111111101", 
    48 => "00111101011111110001100101111100", 
    49 => "00111110000011110101001100011001", 
    50 => "00111101010101101000101011111110", 
    51 => "00111110010011010110100010111010", 
    52 => "10111101001111001100010101011010", 
    53 => "10111101110010110100100101001000", 
    54 => "10111101011100000010010000111111", 
    55 => "00111101110111111001000100000100", 
    56 => "10111110000101010110100101011000", 
    57 => "10111100011010001010111100000110", 
    58 => "00111110010111011110011100111011", 
    59 => "00111101100110011010011010100110", 
    60 => "10111100110000110011101000111010", 
    61 => "10111110000010101010110101101101", 
    62 => "00111101101011100010100001101111", 
    63 => "10111110000101111111101011000101", 
    64 => "10111101100101001101001111111110", 
    65 => "00111110000111101110110101110110", 
    66 => "00111101110100111010011010100101", 
    67 => "10111101000001110000101101001001", 
    68 => "00111100010001011001000011010110", 
    69 => "00111100111000010100010100111000", 
    70 => "00111101000100010011111101001111", 
    71 => "10111110000110100011011010111111", 
    72 => "10111110000011100001101000001001", 
    73 => "00111110001010100011101001101111", 
    74 => "10111100101011101111101101110001", 
    75 => "00111110100010000011101011110111", 
    76 => "00111101000000000001011100111101", 
    77 => "10111101011111111101001010000000", 
    78 => "00111100100110110000011010010100", 
    79 => "10111101100000110001001101111000", 
    80 => "10111110000111101111011111001110", 
    81 => "10111110000010101110011000011111", 
    82 => "00111110011101010101100101111000", 
    83 => "00111100001001001101001011011111", 
    84 => "00111101100001100100000100101111", 
    85 => "10111110001111000101001110010101", 
    86 => "00111110001101000010010001001000", 
    87 => "00111110000110111011011110010011", 
    88 => "00111110100011110100100110110100", 
    89 => "00111110011111100011100100010010", 
    90 => "00111101010101010000101101101110", 
    91 => "10111100111001011100001011101101", 
    92 => "00111101001111001110011000000011", 
    93 => "00111101010010111000101111010100", 
    94 => "10111110001101110001101101101000", 
    95 => "00111101011110010010101011111001", 
    96 => "10111101111011011101101100010101", 
    97 => "10111110001010001111111010100111", 
    98 => "00111101101100111110111100001101", 
    99 => "00111100000010010101001000001111", 
    100 => "00111101100011100101101111101101", 
    101 => "00111110010001101011110010000010", 
    102 => "10111110000110000100001101110110", 
    103 => "00111101110101110010010001001000", 
    104 => "00111101110111000010100000110110", 
    105 => "10111110000101010011010000101101", 
    106 => "10111110100001011101110000011110", 
    107 => "10111101110000101010111101011110", 
    108 => "10111101110100111010101011111101", 
    109 => "10111110001000001000111011000110", 
    110 => "10111101100101011010111110100010", 
    111 => "00111101111101110000001011100001", 
    112 => "00111011000000111010110101010110", 
    113 => "00111101010100010110011100100110", 
    114 => "10111101110100110000010000010110", 
    115 => "10111101111001011100100010011011", 
    116 => "00111110000101001111000000000101", 
    117 => "10111010100111101001110111101010", 
    118 => "10111101101001101000010000000011", 
    119 => "00111101101000000010101000010001", 
    120 => "00111100101101101000000000100000", 
    121 => "00111101000011010100111100010110", 
    122 => "10111101100100110111100101010110", 
    123 => "00111110011101011010110000100100", 
    124 => "10111101111010110011010011100111", 
    125 => "00111110011010101011111101001010", 
    126 => "10111110010101100110110111100111", 
    127 => "00111101111001010011011000010110", 
    128 => "00111101010001000100001011111111", 
    129 => "00111101111111010011101101101101", 
    130 => "10111101111111111011100001001010", 
    131 => "00111101100000101101001001101001", 
    132 => "10111101111111100100110111000110", 
    133 => "00111101011000011000010101000010", 
    134 => "10111100000001001111100110100010", 
    135 => "10111101000101111001001000011110", 
    136 => "10111101111000001100111010001110", 
    137 => "00111101100111010000001010011001", 
    138 => "00111110000011110111010011100000", 
    139 => "00111100110000010011111100001110", 
    140 => "00111110010000001101000011100110", 
    141 => "00111101101000100101010111011001", 
    142 => "10111110000110110011101010000100", 
    143 => "00111101100101001100000000101100", 
    144 => "00111110011101010100010001011011", 
    145 => "10111110000110000110011000111000", 
    146 => "10111110000111010110101011100000", 
    147 => "10111101000101000001010101001111", 
    148 => "10111110000010101100111011100111", 
    149 => "10111110010000100110101110100000", 
    150 => "10111100011011101110001000011111", 
    151 => "10111101100100101111100110011010", 
    152 => "10111110000001101011011100000010", 
    153 => "00111101011101000000001101101101", 
    154 => "10111101011000011101011100111010", 
    155 => "00111101100110100100011010001001", 
    156 => "10111110000011011111001100100001", 
    157 => "10111100100001001111011010100000", 
    158 => "00111101010100000100101011011110", 
    159 => "00111101100110000101011010001100", 
    160 => "00111110000110011011001100011000", 
    161 => "10111110011000111000001100111010", 
    162 => "00111100000000111100110011010111", 
    163 => "10111100010100110010011100110010", 
    164 => "00111101110110011011010001010111", 
    165 => "10111101001000011111111100010100", 
    166 => "10111110000110011010000100111111", 
    167 => "00111101010100000110010010010010", 
    168 => "00111110000000011010111010011100", 
    169 => "00111101000101101011101101010101", 
    170 => "00111101110000001110110000110011", 
    171 => "10111101111101010100011010001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weihbi is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weihbi is
    component myip_v1_0_HLS_weihbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weihbi_rom_U :  component myip_v1_0_HLS_weihbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


