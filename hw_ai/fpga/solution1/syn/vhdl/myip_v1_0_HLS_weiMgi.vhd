-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiMgi_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiMgi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000011101001001001010101", 
    1 => "10111100110111101111101000110001", 
    2 => "00111101100101001111100111001101", 
    3 => "00111110001000011110111100000110", 
    4 => "00111110010110100001101000111101", 
    5 => "00111110100010001100111110001011", 
    6 => "10111101000011110110101010001010", 
    7 => "10111100001000000111010110000111", 
    8 => "10111110001100110110011000110011", 
    9 => "10111110000010001010000010010001", 
    10 => "00111100000110010110110110010101", 
    11 => "00111100110010001111000110100110", 
    12 => "00111101101010100100001100010110", 
    13 => "10111110000110011011110000000101", 
    14 => "10111100001111001000001010100000", 
    15 => "10111101100010101100100111101110", 
    16 => "10111110000100001011100111011100", 
    17 => "00111110010000011011110111000011", 
    18 => "00111101010111010001011101011010", 
    19 => "00111110000000110000101011110111", 
    20 => "00111101111110010001101111000001", 
    21 => "00111110011110101010111011001000", 
    22 => "00111101110110001001110100101111", 
    23 => "10111110001101001000000010011000", 
    24 => "00111110001000110110000011111111", 
    25 => "00111101111100001111110010001101", 
    26 => "00111110011101000011001010001111", 
    27 => "10111100101010001011010111101000", 
    28 => "10111100101010000000010110100110", 
    29 => "00111101010100110011110001000011", 
    30 => "10111101010010010000000010111010", 
    31 => "10111101111010100000100001001011", 
    32 => "00111110000010100111001100110010", 
    33 => "10111110011001001010110000010110", 
    34 => "00111101000000000101110001100010", 
    35 => "00111110010100110011110111110011", 
    36 => "10111101010011101101111010101100", 
    37 => "10111110001111100010000010000000", 
    38 => "00111110000011110101010101101000", 
    39 => "00111110000111100110000001001101", 
    40 => "10111110000000000000001000101001", 
    41 => "00111101110010001001010111001111", 
    42 => "10111110100010001000011111011000", 
    43 => "10111110010010110011101010011001", 
    44 => "10111110001101011110010101100010", 
    45 => "00111100111110101100101111001111", 
    46 => "00111101101101001011110000001101", 
    47 => "00111101001110011011110100000110", 
    48 => "00111110000001100101001010101010", 
    49 => "10111110010000101011111010111000", 
    50 => "10111101011010110110111010011101", 
    51 => "10111101110101101100001111100001", 
    52 => "10111110011010001000100011001111", 
    53 => "00111101011001101100010101110000", 
    54 => "00111110000111011100011001010001", 
    55 => "10111101101110000010100100010111", 
    56 => "10111110010100011011101001010100", 
    57 => "00111110001110000110101110100000", 
    58 => "00111101100001110100101101101011", 
    59 => "00111100111000010010001111111000", 
    60 => "10111101001111100000100111001110", 
    61 => "10111101011111100010101101010001", 
    62 => "10111101000000100111011100111010", 
    63 => "10111101001011111010111001000100", 
    64 => "10111110011110000011001111111101", 
    65 => "10111101101101011000001010010000", 
    66 => "00111101110111100110000000111111", 
    67 => "10111110010000110001011100101011", 
    68 => "10111100111011111101111011000100", 
    69 => "10111101010110011010001111100001", 
    70 => "10111101101011010100110001100111", 
    71 => "00111110001000011101010111001100", 
    72 => "00111110000100100101111011110000", 
    73 => "00111101010111001111001000011000", 
    74 => "00111100100010011001011001010000", 
    75 => "00111101000000101100001110010101", 
    76 => "10111110011111001011001111000101", 
    77 => "10111110011011101011100011101000", 
    78 => "00111101101100011100101010101000", 
    79 => "10111101101100001000000100101110", 
    80 => "10111110010111000101111010010100", 
    81 => "00111101010000010100000110111100", 
    82 => "10111110010000100100101111010111", 
    83 => "10111101110101100011001011101010", 
    84 => "00111101000011001001010011100011", 
    85 => "10111101100001011010101100101011", 
    86 => "10111110010000111100101111010101", 
    87 => "00111101011011001110010111101101", 
    88 => "10111101011000111011011011010000", 
    89 => "10111101100101100100001010111001", 
    90 => "00111110000011001000111101101111", 
    91 => "00111101111011010001110011000110", 
    92 => "10111110010100110000010110011100", 
    93 => "10111110000000111011110100011010", 
    94 => "00111101100111010100011111110111", 
    95 => "10111101110000110110011101100010", 
    96 => "00111101011001101001010001110011", 
    97 => "10111101110110101011011000110101", 
    98 => "00111101110110101011000001101001", 
    99 => "00111101001111011111000011011000", 
    100 => "00111101011100001100001010110110", 
    101 => "00111110010110011011100011010000", 
    102 => "00111101011100101100100110001111", 
    103 => "00111110001110110011110011100101", 
    104 => "00111110000010011100111110111100", 
    105 => "10111100110011010101111010001111", 
    106 => "10111101100000010101101100100110", 
    107 => "00111101101011000000000111010101", 
    108 => "00111101110110001011110100100111", 
    109 => "10111101110101110011100001111010", 
    110 => "00111110010000010101010011111001", 
    111 => "00111101110111101010000101011001", 
    112 => "00111101101110111111001101001111", 
    113 => "10111101100011101010000011010000", 
    114 => "10111101111010110010000101001111", 
    115 => "10111110011001110111100010000101", 
    116 => "00111101000011010011111101011010", 
    117 => "10111110000100000000011111100010", 
    118 => "10111011101101110100010010011001", 
    119 => "00111101011001011100111110101101", 
    120 => "00111110101011000011000110111111", 
    121 => "00111110010100000101011011110011", 
    122 => "00111101001100001111010000110101", 
    123 => "10111110010010111110111111100001", 
    124 => "10111101110010000110100100100001", 
    125 => "10111110100000000100110010000110", 
    126 => "10111101100000010101111111010011", 
    127 => "10111101101000011010001001010100", 
    128 => "00111101110011011001001010101001", 
    129 => "10111101011011011111000000111010", 
    130 => "10111110010010000001100011000110", 
    131 => "00111110011011100001100110110001", 
    132 => "00111110000010100101100001000101", 
    133 => "10111110001001000001001010110100", 
    134 => "10111100000000100111000100111010", 
    135 => "00111110011100000011101010011001", 
    136 => "00111101100001011100100111010010", 
    137 => "00111011001010101001000110100101", 
    138 => "10111110000111110000010110010011", 
    139 => "00111110010000110000011001101111", 
    140 => "00111110001010111001000101111100", 
    141 => "10111110100000010100100001100000", 
    142 => "00111110010000011110100101011011", 
    143 => "10111101111011011001101001000000", 
    144 => "10111110001001100111011000110111", 
    145 => "10111110010101010100001110000110", 
    146 => "00111011110100001111110001100011", 
    147 => "00111101101111100000100100000011", 
    148 => "10111101011010011001000001011001", 
    149 => "10111101100000100101101110001111", 
    150 => "10111101111000001100001111111001", 
    151 => "00111110010010110101101111000000", 
    152 => "10111110000001111101010000010010", 
    153 => "00111100101010010011101010111101", 
    154 => "10111100100011101110001011111111", 
    155 => "10111110010001000000001001100111", 
    156 => "10111101011111100110110100111001", 
    157 => "10111011100111110001000000110001", 
    158 => "00111110000101110111101110001110", 
    159 => "00111110010110100101010000001111", 
    160 => "00111110011101111101010100011010", 
    161 => "10111101110100111000111001001001", 
    162 => "10111101110000011000000001101110", 
    163 => "10111110011110011111010010101000", 
    164 => "10111101100011001111001001001101", 
    165 => "10111101111101100111011011001010", 
    166 => "10111110001110011011101001101000", 
    167 => "00111110011100110011100011011100", 
    168 => "00111101011110011010110110010101", 
    169 => "00111100111000111010110010111001", 
    170 => "10111110000000111110000110101110", 
    171 => "00111101110000011100110001110100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiMgi is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiMgi is
    component myip_v1_0_HLS_weiMgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiMgi_rom_U :  component myip_v1_0_HLS_weiMgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


