-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiwdI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiwdI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000010001001110110110011", 
    1 => "00111101001100011001101110001011", 
    2 => "00111100111010101010000101110000", 
    3 => "10111101110001010010110010001101", 
    4 => "00111110000100111110001100001010", 
    5 => "00111101110111010100001011000010", 
    6 => "10111101111001111001001101001010", 
    7 => "00111110000111101010100000001101", 
    8 => "00111110000000000011111101010110", 
    9 => "00111101010001011000100001101100", 
    10 => "10111101101100001101011000110011", 
    11 => "00111101001001010000000100010111", 
    12 => "00111101111101111011000111001010", 
    13 => "00111101000100101110011010011001", 
    14 => "10111101000100100001101011010100", 
    15 => "10111110000000001111100001110001", 
    16 => "10111101110110111100110100100010", 
    17 => "00111101111001101000000000100010", 
    18 => "00111101101001001000110010000001", 
    19 => "10111110001010100001011001110101", 
    20 => "00111110011111101011100010110010", 
    21 => "00111100000100000011001100101011", 
    22 => "10111110011101110111110110010010", 
    23 => "10111110011110011011100111010001", 
    24 => "10111110000001110100100010001001", 
    25 => "10111110001110111100100001100010", 
    26 => "00111100100111100101000100100010", 
    27 => "10111100101001001111010010011000", 
    28 => "00111110010010110011101001100011", 
    29 => "00111100100010000001010110110000", 
    30 => "10111101110110010011001100110111", 
    31 => "00111010111001001010011101011100", 
    32 => "10111101011100110111101110011110", 
    33 => "10111101000111111010100011000001", 
    34 => "00111101111111000011000101010111", 
    35 => "10111100100100110010010001001101", 
    36 => "00111101100110111100110100101000", 
    37 => "00111100010001101100011000010101", 
    38 => "00111010111001110101001001100101", 
    39 => "00111110000110100111101100010000", 
    40 => "10111100001111111110000101001100", 
    41 => "00111100101001111101100101001100", 
    42 => "00111101100100101001100001000110", 
    43 => "00111100101101001001011111011101", 
    44 => "00111101100001001100111100001001", 
    45 => "10111100101110100001000101100111", 
    46 => "10111110001001110011010000001111", 
    47 => "00111100111110111010110111110110", 
    48 => "00111101101100111001111010001000", 
    49 => "10111110010001010000010101000111", 
    50 => "10111101101011100110001110100001", 
    51 => "00111101101000110001000110000101", 
    52 => "10111101111100000010000101010100", 
    53 => "10111110000000000100010101011111", 
    54 => "00111101000010101011100110010111", 
    55 => "10111101111110001111001010110100", 
    56 => "10111110000110111110011111010110", 
    57 => "10111110011100011010000000000100", 
    58 => "00111110000000011111101101001101", 
    59 => "10111101101111110010011001100001", 
    60 => "10111101010111110111011101100101", 
    61 => "00111101111011110001100111110011", 
    62 => "00111101100010101101110010101110", 
    63 => "10111110000011101100001101110000", 
    64 => "10111110001100111100111111001101", 
    65 => "10111110001011111001111000100101", 
    66 => "00111101001001011010101111001101", 
    67 => "10111101000101100001100110000111", 
    68 => "10111101111010110110010011000011", 
    69 => "00111110010011111111011111110011", 
    70 => "10111110010010001110011000101101", 
    71 => "00111110001111011010000111011101", 
    72 => "00111101110111010100000000110010", 
    73 => "00111101110010100110011011111101", 
    74 => "00111100100101111110101110111011", 
    75 => "00111101101011111011010000001100", 
    76 => "10111110100011111011010011110111", 
    77 => "00111101101010111100101011101100", 
    78 => "10111100101110001100101011001111", 
    79 => "10111101111101100110101111011111", 
    80 => "10111100110001010110101010110010", 
    81 => "00111101110101010100111101110001", 
    82 => "10111011001000100011101001011110", 
    83 => "00111110010110011011111101001100", 
    84 => "00111110010111011110011110001111", 
    85 => "10111101110110100100101100011101", 
    86 => "00111110000001111010001001111001", 
    87 => "10111110100001010100010101011101", 
    88 => "00111110001010000001001001101100", 
    89 => "10111100110001110011000101000100", 
    90 => "00111101110001011110110101100001", 
    91 => "10111101101100000111001000010000", 
    92 => "10111101011000111010001100110010", 
    93 => "10111101110111110110001000110101", 
    94 => "10111101000010001110010000101100", 
    95 => "00111101111100001100101101100000", 
    96 => "00111101011010111010011111111110", 
    97 => "10111100101100001000100110000110", 
    98 => "10111101100000000111100111110000", 
    99 => "00111110000000101001011100110010", 
    100 => "00111101111010111111011011010100", 
    101 => "00111101110011100011101100000010", 
    102 => "10111110010110001111110000100100", 
    103 => "10111110001010011111011011001101", 
    104 => "10111101101010010010110101111001", 
    105 => "00111101100001011111001111000011", 
    106 => "10111110000011110111110111011110", 
    107 => "10111101001010000101000010100010", 
    108 => "00111101101001101000010100001101", 
    109 => "00111101111011011100110011000010", 
    110 => "10111110010010101001001010110101", 
    111 => "00111101100100100110100100001100", 
    112 => "10111101100010010110011111100000", 
    113 => "00111110000011110100010111011000", 
    114 => "10111101101010100101001100010111", 
    115 => "10111101100100000011010000010000", 
    116 => "10111101110100011110110010100110", 
    117 => "10111110010111011111001100010010", 
    118 => "10111101100001110011110111011100", 
    119 => "10111101110001110111010000100111", 
    120 => "00111101100110000101000101010111", 
    121 => "10111110011011011110101101111001", 
    122 => "00111110010100110100011011101111", 
    123 => "00111110010010011000010100101000", 
    124 => "00111110000100100110111111010110", 
    125 => "00111101110100010010101011110111", 
    126 => "10111101110111011100001100111100", 
    127 => "00111101100110101111010011011010", 
    128 => "00111100111001011001011011011010", 
    129 => "00111101010100110000011010110000", 
    130 => "10111100111100111110100100110111", 
    131 => "00111101101101111100001111001001", 
    132 => "00111101011100100100111001011001", 
    133 => "10111101111110100100111101110001", 
    134 => "00111100101000011011101010010000", 
    135 => "10111011111000101101110011011101", 
    136 => "00111101110000001100010110010010", 
    137 => "10111101100010111001010011011001", 
    138 => "10111110000001110101101110011111", 
    139 => "10111100111110110101001000010000", 
    140 => "00111110010010001110110011011000", 
    141 => "10111101011010011000000111010110", 
    142 => "00111100010000011101100000110110", 
    143 => "10111110000010100010100101001000", 
    144 => "10111100001101100011000011101100", 
    145 => "00111100111010001011110110111010", 
    146 => "00111110000001101001010101101000", 
    147 => "00111110000111111100101001111110", 
    148 => "10111100110000011101110101111110", 
    149 => "10111101000001101000000010100110", 
    150 => "00111101111010111100110000111110", 
    151 => "10111110001000101011110010101000", 
    152 => "10111110001001101110101011011010", 
    153 => "00111101101000000101100100001111", 
    154 => "00111100001101100001010010101000", 
    155 => "10111101100010100101100111100011", 
    156 => "00111101001001100010110101001101", 
    157 => "10111101110010111100101100110010", 
    158 => "10111101000101010000101110111100", 
    159 => "00111010101001001111010011101100", 
    160 => "10111101010001111100110011101000", 
    161 => "10111110010111010110010101101010", 
    162 => "00111110001100000101010110110110", 
    163 => "00111101101100011111100011001101", 
    164 => "10111011001010011100011010000110", 
    165 => "00111110011011000001000100111010", 
    166 => "10111110000100010010001000100011", 
    167 => "10111110001000001100010111010110", 
    168 => "00111101001011100101000110011100", 
    169 => "00111110010001110001100010111010", 
    170 => "00111101010111110000111110001111", 
    171 => "00111101100101000000100110110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiwdI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiwdI is
    component myip_v1_0_HLS_weiwdI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiwdI_rom_U :  component myip_v1_0_HLS_weiwdI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


