-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiNgs_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiNgs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100101000100000111111111", 
    1 => "00111110011001010001101110001011", 
    2 => "00111101111011111010000000100000", 
    3 => "10111110011010110111001111011010", 
    4 => "10111110100001101100011100000001", 
    5 => "10111110011111001110001010101001", 
    6 => "10111110001001001000111101111001", 
    7 => "10111101001000000111001011110001", 
    8 => "00111011101111111101110011110001", 
    9 => "00111010101100001110100101010001", 
    10 => "10111101101101111101010011001010", 
    11 => "10111101111001001000110010100001", 
    12 => "00111100101000110100011100110000", 
    13 => "10111110100000100111000010111010", 
    14 => "00111110000100110001111100000110", 
    15 => "10111101110111010000010111111101", 
    16 => "00111110001000000010011101101001", 
    17 => "00111101100111110111101000010101", 
    18 => "10111101101010100011000000000000", 
    19 => "00111100000010101010001010110111", 
    20 => "10111101001001011011100010010110", 
    21 => "10111110011000101010001011011001", 
    22 => "00111101111010010111001101101000", 
    23 => "00111101111010011101010011110001", 
    24 => "10111110100111100101111110011110", 
    25 => "10111110000110111111100110110110", 
    26 => "10111101100000011101001101010000", 
    27 => "10111110011001111010010111101010", 
    28 => "10111110100011110110001100101111", 
    29 => "00111110011010110110111110101000", 
    30 => "10111101011000011001010110100000", 
    31 => "00111101001110111000001010110101", 
    32 => "10111011101011010010011011011000", 
    33 => "00111110001001011011111111111000", 
    34 => "00111011111010111111101100011100", 
    35 => "10111110001000000001001000100101", 
    36 => "10111101101100101010000111000111", 
    37 => "00111110001011000111111000101110", 
    38 => "10111101100011000110110101100011", 
    39 => "10111110000100000100101000101011", 
    40 => "10111110000101101110110101110000", 
    41 => "10111101100001000111000101011111", 
    42 => "00111110100111101111001001100010", 
    43 => "10111100100000101111001100110001", 
    44 => "00111101111001011011000001001011", 
    45 => "10111110100010101000001001111111", 
    46 => "00111011011011010111011010000000", 
    47 => "00111101000101001101011110001011", 
    48 => "10111101101000101101101011010000", 
    49 => "00111110010110001000000011100101", 
    50 => "00111101001111100100100000011010", 
    51 => "00111110001101110100110001000111", 
    52 => "10111100000000001100000000100001", 
    53 => "00111110000011011101101001011101", 
    54 => "10111110011001011000101111010110", 
    55 => "10111101111001010010100100011110", 
    56 => "00111101100111100101001110001010", 
    57 => "00111101101011101011011111111110", 
    58 => "10111100011011111100001001100000", 
    59 => "10111101010111001010110100011100", 
    60 => "10111110001011101100100011111001", 
    61 => "00111101111010101001001101000110", 
    62 => "10111100100110101001011010110110", 
    63 => "00111101101110111001011101001000", 
    64 => "10111110000100001100100011111101", 
    65 => "10111011110011001001000100110100", 
    66 => "00111110011001100011100110011000", 
    67 => "00111110001011111011011100010011", 
    68 => "10111100110101101011000110010111", 
    69 => "10111110011011101011101000001100", 
    70 => "00111101111110010100010101101101", 
    71 => "10111101110010000100100010101100", 
    72 => "10111101101101001011110111011100", 
    73 => "00111100101001101001110010010111", 
    74 => "10111110010001000110100101111001", 
    75 => "10111110100010110110010100000111", 
    76 => "00111110000001001011100110010111", 
    77 => "00111110001100100000101001101110", 
    78 => "10111101001100001010011111000000", 
    79 => "00111101111100100001011101010101", 
    80 => "00111110000000001101001010110100", 
    81 => "00111110011000011010100011100001", 
    82 => "00111110100100101000000111011110", 
    83 => "10111100111011011001110001011100", 
    84 => "10111110001011110010110000110110", 
    85 => "10111101101000101101111100110101", 
    86 => "00111010110111010110000100110100", 
    87 => "10111101001111101011010011011110", 
    88 => "10111110000000011110110000010100", 
    89 => "10111101001000001000001001010110", 
    90 => "10111101101000100111000101000110", 
    91 => "10111101101101101011001011100100", 
    92 => "10111101100111010100001110011010", 
    93 => "00111101110111101101100001010110", 
    94 => "10111100101000001110001100001011", 
    95 => "00111110000100111011011010001001", 
    96 => "10111110010001000101101111010111", 
    97 => "10111101100100111110010000001100", 
    98 => "10111011000010001000101011010110", 
    99 => "00111100110011001010000101011000", 
    100 => "00111101111011000110100100100100", 
    101 => "10111110000011001000001001011011", 
    102 => "00111110000101011010100010101000", 
    103 => "10111011001101000101010111010111", 
    104 => "10111101100111001111001001011001", 
    105 => "00111101001100011101011110101100", 
    106 => "00111100111111110011111010101110", 
    107 => "00111101010101000100101110101101", 
    108 => "10111101111011001011010011101000", 
    109 => "10111100110011101001111111100110", 
    110 => "10111101010010100000101010111010", 
    111 => "10111101100010010100101100001010", 
    112 => "10111110100101001111011001011010", 
    113 => "10111110100011000011010001110001", 
    114 => "00111110010101100101100011101101", 
    115 => "00111110010000001011101111100011", 
    116 => "00111110011011110001001100101001", 
    117 => "10111100110010011001000010100000", 
    118 => "10111101010001011100001110001110", 
    119 => "00111101101000100111111110111001", 
    120 => "10111101100111111110001101000101", 
    121 => "10111101111001011101000000001110", 
    122 => "00111100100001100101111010100110", 
    123 => "10111110001011010111111001101000", 
    124 => "00111110010011100001110100001101", 
    125 => "00111101110111011001110010101100", 
    126 => "00111110000101101011010010010010", 
    127 => "00111100101110110010010101100001", 
    128 => "10111110100110010111110110101111", 
    129 => "00111101000001011010111000100010", 
    130 => "00111110100110000110011111001110", 
    131 => "10111101010101011110011110011011", 
    132 => "10111110000000101011011001110111", 
    133 => "10111101010101111100101011101010", 
    134 => "10111101101010100000111101111100", 
    135 => "10111110011110011011101100100010", 
    136 => "00111110010111101001000100101100", 
    137 => "00111101100001001010100001111010", 
    138 => "00111110000110001110011010001101", 
    139 => "10111110011010101000111011111101", 
    140 => "10111101100010001000101001110110", 
    141 => "00111110100101010010000101100110", 
    142 => "00111101010010110010111011000001", 
    143 => "00111110010101010111000000100001", 
    144 => "10111100000001010001000001001111", 
    145 => "00111101000100001010000110110100", 
    146 => "10111011110101111001100100101001", 
    147 => "10111110010001110101100110001101", 
    148 => "00111101101001001110100011101001", 
    149 => "00111101001001101011010001011100", 
    150 => "00111101000000011001111000100011", 
    151 => "10111110001001101100101110111010", 
    152 => "10111101101011011011110001101011", 
    153 => "00111101100101101000110110111111", 
    154 => "00111101110010111000010010000100", 
    155 => "00111110000111000001000010110100", 
    156 => "00111100100110000110111000101001", 
    157 => "00111101000000010101010100011100", 
    158 => "10111110011111000000100100010100", 
    159 => "00111011111011101010110111000111", 
    160 => "10111101100000000000010101101110", 
    161 => "00111110010000100110110001010000", 
    162 => "00111100111001110001010011110000", 
    163 => "10111101100011110010110000010001", 
    164 => "00111101100000111100001011110111", 
    165 => "10111101010011110110100001111011", 
    166 => "00111101000110100111011100000000", 
    167 => "00111101101111001111011010011011", 
    168 => "10111110011011000010010011101101", 
    169 => "00111100111000000011111111011011", 
    170 => "00111110010011010000101001001000", 
    171 => "10111100011111100110000101000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiNgs is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiNgs is
    component myip_v1_0_HLS_weiNgs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiNgs_rom_U :  component myip_v1_0_HLS_weiNgs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


