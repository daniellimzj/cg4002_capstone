-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiCeG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiCeG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101111000101111010000011", 
    1 => "00111101100111001001111000101110", 
    2 => "10111101100000100110101100010000", 
    3 => "00111100001010010011110011001100", 
    4 => "00111101101111110101010110111010", 
    5 => "00111101000111000110111110110001", 
    6 => "00111101010101110011111011100010", 
    7 => "00111100011100000101100110010001", 
    8 => "10111101101010110110110000000001", 
    9 => "10111101111100101111001111000010", 
    10 => "10111101100111111011110001010111", 
    11 => "10111110001010010111001000100111", 
    12 => "10111101100101100101010000100101", 
    13 => "00111110000000100101011001011111", 
    14 => "00111110010100101111000101100110", 
    15 => "10111100111111100000110101001011", 
    16 => "10111101111001011111100101011011", 
    17 => "00111101110011111000111101101011", 
    18 => "00111101110100000001100100110011", 
    19 => "00111101111110100001110010100010", 
    20 => "00111110000110100100100111110011", 
    21 => "00111101100000110000111111001100", 
    22 => "10111101010010010011111001100010", 
    23 => "10111110001111000111101001011001", 
    24 => "10111110010000011010100100000111", 
    25 => "10111101111011111111111000101100", 
    26 => "00111101010010100001110101011001", 
    27 => "10111100000100100110111011111001", 
    28 => "10111101101111011101000110011000", 
    29 => "00111101101001010001100110010000", 
    30 => "00111110001011110000101111011110", 
    31 => "10111101000110110101110110010101", 
    32 => "00111110000011010011011101010101", 
    33 => "00111110001011111011110001011000", 
    34 => "00111101110101101101100101111100", 
    35 => "00111100110110011110111111011100", 
    36 => "10111110000000011110110111011111", 
    37 => "00111101101000011101110001101100", 
    38 => "10111100110111010100111111100110", 
    39 => "10111101100100000011101011110011", 
    40 => "00111110001000011110010101011100", 
    41 => "10111110001101001110110001110011", 
    42 => "00111101010001110111000011111011", 
    43 => "00111100101001001110100111100110", 
    44 => "10111110011010111011101111101100", 
    45 => "10111101010100111010101010100110", 
    46 => "10111110100010000001110101111111", 
    47 => "00111100001010011011100010000010", 
    48 => "00111101101011101110101000011001", 
    49 => "00111101100010111100001110101010", 
    50 => "00111100011001000101011100000100", 
    51 => "00111100011100010010100011100101", 
    52 => "10111110001000011101110111100110", 
    53 => "10111101110000101110100010100011", 
    54 => "00111101011010001110101010111000", 
    55 => "00111101100011101000110000011101", 
    56 => "00111101010000001100001000001011", 
    57 => "10111110001100100001000101000111", 
    58 => "00111110000101111011001101011001", 
    59 => "10111110010100100111001010010100", 
    60 => "10111100100001100110000001001110", 
    61 => "10111100010011111001110100101111", 
    62 => "00111101011111101100010110110000", 
    63 => "10111110000000101010110110000110", 
    64 => "10111110011101011000111010011011", 
    65 => "00111110001010010011011111111100", 
    66 => "10111110000001100101010011111111", 
    67 => "10111101101011000111000010010110", 
    68 => "10111110000000100100001101010111", 
    69 => "00111101101011001010100001111001", 
    70 => "00111101010011111011010101111000", 
    71 => "00111101110111101001110001010110", 
    72 => "10111101110000100000001000011000", 
    73 => "00111110101001011110101111111010", 
    74 => "10111100100101011110110110011100", 
    75 => "10111101100111010110111110111111", 
    76 => "10111110100110011100111101101101", 
    77 => "10111101111110001101101100111001", 
    78 => "00111011100010011101010110100000", 
    79 => "10111110011100110010111100001010", 
    80 => "00111100110110001110001110111001", 
    81 => "10111011001011001100000010010001", 
    82 => "10111100111000110101111111100111", 
    83 => "00111101010011111010000100110110", 
    84 => "00111110000010001011000101000101", 
    85 => "10111101110010010011010001111111", 
    86 => "00111101101101101010000011000011", 
    87 => "10111100110010000000001101010110", 
    88 => "00111110000101110000100101000111", 
    89 => "00111101111001011001000110011000", 
    90 => "00111101100011110000111100010111", 
    91 => "00111110100000101111001011001100", 
    92 => "10111101101110000010111000100001", 
    93 => "10111100101101110001111101011111", 
    94 => "10111110001000100111111011100101", 
    95 => "00111101110100100101000110010000", 
    96 => "10111101111110100111000000001110", 
    97 => "00111110010001110001100110011000", 
    98 => "10111110000101101010011001111110", 
    99 => "00111110001001000100011010011110", 
    100 => "00111101111000000100001010001011", 
    101 => "00111101110111101101010101100101", 
    102 => "10111101010100001101011010010011", 
    103 => "00111101011101100101101111100010", 
    104 => "10111101111000111101100110010011", 
    105 => "10111110011010011100001100000010", 
    106 => "10111110000010001110001101011010", 
    107 => "10111101110010101100101011001000", 
    108 => "00111100001100011100111000000011", 
    109 => "10111101000111010010101110000000", 
    110 => "10111101101110111110110111111110", 
    111 => "10111100110001101010101010001011", 
    112 => "10111100100001001001000011111101", 
    113 => "00111101011000111110010101011100", 
    114 => "00111110001110011111000010011010", 
    115 => "10111101011101011011001111010111", 
    116 => "00111101110000110110011111011011", 
    117 => "10111101100000110100100010111101", 
    118 => "10111100111001011011010011101010", 
    119 => "10111100011000011111010110111101", 
    120 => "10111110101000110000100101001000", 
    121 => "00111100101100111100100110010000", 
    122 => "00111100001001100101100001011111", 
    123 => "00111110010011010100101001001000", 
    124 => "10111101111101111001100101110101", 
    125 => "00111110100100100001111001011111", 
    126 => "00111101101101010100100100011101", 
    127 => "10111100110101110000000100001110", 
    128 => "00111100110111111010101111111010", 
    129 => "00111110010000100000010001001100", 
    130 => "00111100010001101011011011010000", 
    131 => "00111100110100011010101011100000", 
    132 => "10111100110111010110100110110000", 
    133 => "10111110010010110011110111110010", 
    134 => "00111110000110111101010001100100", 
    135 => "00111101101011101111101001010101", 
    136 => "00111101110011101111101111101000", 
    137 => "10111110001001011101000101010110", 
    138 => "10111110000100111000111010111110", 
    139 => "10111101011010110111111011000000", 
    140 => "00111101101111100101111101011101", 
    141 => "10111110001010111100110001010111", 
    142 => "00111101000111010110111000001011", 
    143 => "10111110001011010010100010010100", 
    144 => "00111110000111100001100010100000", 
    145 => "00111110000101001110010010000011", 
    146 => "00111110010100011110100010101011", 
    147 => "00111101100100101011100010110100", 
    148 => "10111110000111110111111101100110", 
    149 => "10111101101111111100001011101001", 
    150 => "00111110000010101110110001011101", 
    151 => "10111110000101001111010000001001", 
    152 => "10111101101011100110001100101101", 
    153 => "00111101110110111111101011011010", 
    154 => "00111100110001011011100111100101", 
    155 => "00111101001001000000001011110000", 
    156 => "00111110010011110101100001011110", 
    157 => "00111101100101110010111101111011", 
    158 => "10111101010111001011110001110110", 
    159 => "00111110000111011100100010001011", 
    160 => "10111110010100000011101100101010", 
    161 => "10111101101101110001110001100011", 
    162 => "10111100010110011111110110011111", 
    163 => "00111110000100010100110000110010", 
    164 => "10111101000100110111100010010111", 
    165 => "00111110001011111000010100111011", 
    166 => "10111101101010111001111110101000", 
    167 => "00111100111000011100011110010110", 
    168 => "00111101100111110010110111001010", 
    169 => "00111100101110110011110111111011", 
    170 => "10111100111101011110100011101111", 
    171 => "00111110100010000111111000100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiCeG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiCeG is
    component myip_v1_0_HLS_weiCeG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiCeG_rom_U :  component myip_v1_0_HLS_weiCeG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


