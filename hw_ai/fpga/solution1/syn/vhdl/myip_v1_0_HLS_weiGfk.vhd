-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiGfk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiGfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010011111000010110101100", 
    1 => "10111110001001010110111010001011", 
    2 => "10111101101001110110101100100100", 
    3 => "00111100101010111101011000111110", 
    4 => "10111100100010111100001110000111", 
    5 => "10111110010111110101100111111010", 
    6 => "00111100000101010101001101111011", 
    7 => "10111101001011001001001010000011", 
    8 => "10111101111001010101100010011110", 
    9 => "10111100111010010001011101101101", 
    10 => "00111110001000100111111000011001", 
    11 => "10111110000001111000000100101011", 
    12 => "00111110010101000101111110111110", 
    13 => "10111110011111100111001101101111", 
    14 => "10111100111110101001111001001111", 
    15 => "10111101111001100000101110010101", 
    16 => "10111100001110011100001010111000", 
    17 => "10111110010101111000110111001100", 
    18 => "10111101111001000110111010111001", 
    19 => "00111110000111101011101111101010", 
    20 => "10111110001000000010100010001110", 
    21 => "00111101111100000101111111010001", 
    22 => "10111100101111000100111110011101", 
    23 => "00111110100000011011011110100000", 
    24 => "10111110000011100011011100111000", 
    25 => "00111110001011000001010001101111", 
    26 => "10111110100011010000111110011101", 
    27 => "00111110000101010101110100110011", 
    28 => "10111101100110110000111000111011", 
    29 => "00111101100111111010000111111001", 
    30 => "00111110010000010010011101010011", 
    31 => "10111100010111000001101100011010", 
    32 => "00111110001110011010110100001111", 
    33 => "10111100100100001010000101001100", 
    34 => "10111110000011000110000110010110", 
    35 => "00111110000011100001000111010011", 
    36 => "10111101111100101100010010110100", 
    37 => "10111110000101011101011001001100", 
    38 => "10111110100001010111010010110111", 
    39 => "00111110010101000000001001101100", 
    40 => "10111101100110100110000110111100", 
    41 => "00111100110111001011100010010001", 
    42 => "10111101011100100110010110000000", 
    43 => "00111101001100101111011111101110", 
    44 => "00111110000111100010110101101110", 
    45 => "10111110010000010100000110011110", 
    46 => "00111101000011111111101101110110", 
    47 => "00111101100110101001110000011100", 
    48 => "10111110110101001010001110111111", 
    49 => "10111110010000011000011101111001", 
    50 => "00111110101010010110001010001011", 
    51 => "10111110000010011001101010010101", 
    52 => "10111100101010000001100110111000", 
    53 => "10111101101100101001010001101101", 
    54 => "10111101100101100110011010101101", 
    55 => "10111101100001110111110110110001", 
    56 => "00111010100101010010110001010010", 
    57 => "00111100001101000100001001101100", 
    58 => "10111110010001001010111010010011", 
    59 => "00111110000011000110000111100011", 
    60 => "00111101110100010111101110111010", 
    61 => "10111110001011000111001101011110", 
    62 => "10111101100000101001110110110111", 
    63 => "10111110001100111101011011100010", 
    64 => "10111101111111011100101111111000", 
    65 => "10111101100011010101111010010000", 
    66 => "00111101101011101000010011111000", 
    67 => "10111110000101000001000111011011", 
    68 => "00111101010011011000110011111111", 
    69 => "00111100101110001010000100111011", 
    70 => "10111110010011111010011001111100", 
    71 => "10111110010111101111100100101011", 
    72 => "00111101011101011011011100101011", 
    73 => "00111110000100110111110111001100", 
    74 => "00111100110101001111011000010111", 
    75 => "10111110101101111101001000000010", 
    76 => "10111110001100110011101110101110", 
    77 => "00111101100110011111100010101010", 
    78 => "00111110001110001010010010100110", 
    79 => "00111100100010110110011010011110", 
    80 => "10111101100011110001110001010100", 
    81 => "10111101010001101100000100010000", 
    82 => "00111100011001110001101000001011", 
    83 => "10111110010101101110010010101101", 
    84 => "00111100101011110000101110110111", 
    85 => "10111101010101101101011011100110", 
    86 => "00111110000111000100111101110010", 
    87 => "00111101001010111000111011010110", 
    88 => "00111100101011110001100010101010", 
    89 => "10111100101101111101010011101101", 
    90 => "10111110101000000111000111000101", 
    91 => "00111101010100111110000000011011", 
    92 => "00111101010111110100010110100010", 
    93 => "00111101001001000001101001010111", 
    94 => "00111101111010100101010000001000", 
    95 => "00111101110100000110111100110011", 
    96 => "00111100001110100100010110001000", 
    97 => "00111101111010101011010000110101", 
    98 => "10111110000001111001001011110010", 
    99 => "10111101000101100110100001000010", 
    100 => "00111110010110010100011000001000", 
    101 => "10111110001010110001111111110110", 
    102 => "10111100011101100100111110001100", 
    103 => "10111011100011011010001001101001", 
    104 => "00111101101001011000111011101110", 
    105 => "00111101111101001110011011011001", 
    106 => "10111110000110011101100100001000", 
    107 => "00111101011111110101011100100100", 
    108 => "00111011101101000110100100000010", 
    109 => "00111100100010111110011101111111", 
    110 => "00111101001111101110111010101001", 
    111 => "10111110010000101001111000111001", 
    112 => "00111110001011100011001011000000", 
    113 => "10111110001111001110011110100101", 
    114 => "10111101101110101010111010100111", 
    115 => "00111101101100011001011100101010", 
    116 => "10111100101000000100010101001100", 
    117 => "00111110001100011110100110001010", 
    118 => "10111110010000101110011101011011", 
    119 => "10111101001100011011101101110011", 
    120 => "10111101110100000001101101111110", 
    121 => "00111101110010011101101100001000", 
    122 => "10111101110100000010101101001111", 
    123 => "10111101000001101100011010100010", 
    124 => "00111101100011000010110011110101", 
    125 => "00111101101100100001001101101000", 
    126 => "10111110000101110100010110011101", 
    127 => "10111110011010111001101101110100", 
    128 => "00111101000001111110101101100011", 
    129 => "00111101010000110011111000011001", 
    130 => "10111101001011000000010111000010", 
    131 => "10111101110011110010010100011100", 
    132 => "00111101110010001111110011110010", 
    133 => "00111101101100001011000011100100", 
    134 => "10111101101110110011011011101011", 
    135 => "00111101010000101000110101001001", 
    136 => "10111101010100011101100101111111", 
    137 => "10111110001100110101110010000011", 
    138 => "00111101110001101000011011011011", 
    139 => "10111101101111011110011111110011", 
    140 => "10111100001000110011101000101010", 
    141 => "10111110000111110010011000100001", 
    142 => "00111101111000101110100101100101", 
    143 => "10111101100110110110001011000110", 
    144 => "00111101101101100010110100110010", 
    145 => "00111101110010000011101110101000", 
    146 => "00111011000001100100100001111001", 
    147 => "10111110011000001011001000010010", 
    148 => "00111101011010011110001100001110", 
    149 => "10111100111010101000101000001100", 
    150 => "10111100100010000111010010111001", 
    151 => "00111101111010010000110011011000", 
    152 => "10111101110011001010101100001110", 
    153 => "10111101110111001001111101111110", 
    154 => "10111101111110111001001011101011", 
    155 => "00111100011101111101110111110001", 
    156 => "10111101100101010101100000101101", 
    157 => "00111110010011001100011010110000", 
    158 => "10111101011101000011111001100101", 
    159 => "10111110001011111111111001111110", 
    160 => "00111100110010000000011111101101", 
    161 => "00111011111111101111101100111001", 
    162 => "00111101000100110101010101010100", 
    163 => "10111110010011111111110110111001", 
    164 => "10111101100011111000001010101111", 
    165 => "00111101100101110100011110000001", 
    166 => "00111101011111101100001110101101", 
    167 => "00111101000000110000011000110001", 
    168 => "10111110010000100100111111111011", 
    169 => "00111101100000011111000000101111", 
    170 => "00111110001010011000010110111111", 
    171 => "10111100100011111011111011011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiGfk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiGfk is
    component myip_v1_0_HLS_weiGfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiGfk_rom_U :  component myip_v1_0_HLS_weiGfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


