-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weidEe_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weidEe_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001111001101110000101000", 
    1 => "10111101111010000010101110010000", 
    2 => "00111110011000110000101111110111", 
    3 => "00111101101100001100011000101100", 
    4 => "10111110011000100101111100111011", 
    5 => "10111101101011101001110110001011", 
    6 => "10111110000001011010110011111101", 
    7 => "00111100101000011011010011110111", 
    8 => "10111110011001101000101001011100", 
    9 => "00111101001100000000010010010110", 
    10 => "00111110001000011000001100001101", 
    11 => "00111101110010110001011000110010", 
    12 => "10111101001111000110100111000110", 
    13 => "10111110110010001000110010100011", 
    14 => "00111101111001100110000100110001", 
    15 => "00111110100101010111010010010010", 
    16 => "10111101000111011110100111110010", 
    17 => "00111110001011000011001110100001", 
    18 => "10111101011010101111110111111100", 
    19 => "10111101110110000110000000111111", 
    20 => "00111110001101110100100000111011", 
    21 => "10111101111111101110010001011000", 
    22 => "10111100001000000010000110001011", 
    23 => "00111101111101100011010010100010", 
    24 => "00111101011101110111011011001110", 
    25 => "00111011110101110110100000010111", 
    26 => "10111110101010000100000101011110", 
    27 => "10111100010111101001001011000111", 
    28 => "00111110010000010011101000111010", 
    29 => "10111110000110110101010101000100", 
    30 => "00111101101111101001101000010101", 
    31 => "10111110100000101010001101001110", 
    32 => "10111110010010110011000110010110", 
    33 => "10111110011010001100000000011000", 
    34 => "00111100110111110001011111001101", 
    35 => "10111101110001100101011101000001", 
    36 => "00111110000001001010001010111001", 
    37 => "10111101111001111111001110011111", 
    38 => "00111100101101000011000000011001", 
    39 => "10111110000001010111000011010011", 
    40 => "10111110000111010101100011111010", 
    41 => "00111110100111110111010001010110", 
    42 => "00111110100001001111011111111000", 
    43 => "10111101100000010111001111010101", 
    44 => "00111110100001101000100010000010", 
    45 => "10111110010001110010001111100101", 
    46 => "00111110011011011110101000100011", 
    47 => "00111101001110000010100011111000", 
    48 => "00111110000101110011100111001011", 
    49 => "10111110010110110011110000001001", 
    50 => "10111110001001010010011111001001", 
    51 => "10111101110001101000011111101011", 
    52 => "10111110010100111111001010001110", 
    53 => "10111110011010010000100111010101", 
    54 => "10111101111100101001011100011011", 
    55 => "10111011101110110011110110011011", 
    56 => "10111110000101010010011101100001", 
    57 => "00111101101101110011110010010010", 
    58 => "00111110010100110101101100001001", 
    59 => "00111101110101000010100111001000", 
    60 => "00111110001101010111010110111001", 
    61 => "00111100000010010100001001011111", 
    62 => "00111100111010011100011111111101", 
    63 => "10111101100111101110100010001000", 
    64 => "10111010101010011110000000011110", 
    65 => "10111101111110101100011100110010", 
    66 => "10111100011010100010111111010111", 
    67 => "10111110010000001001111101001100", 
    68 => "00111110001100111010110010000000", 
    69 => "00111110000100010001111011000001", 
    70 => "10111101110000101101111111001110", 
    71 => "00111101000111010010100111111100", 
    72 => "10111110000111100000111110011101", 
    73 => "10111101101011101111101011111001", 
    74 => "00111110001000011000011111110110", 
    75 => "00111101111101000001000100011000", 
    76 => "10111110001101100100010011101110", 
    77 => "10111101101011110110101000001110", 
    78 => "10111110000001011110110111011010", 
    79 => "10111101101010011011000001110000", 
    80 => "10111101011101000001001110101010", 
    81 => "10111110001100110110000110001001", 
    82 => "00111011100010100011100111010100", 
    83 => "00111101101011001101100110001101", 
    84 => "00111101101010100101011101010100", 
    85 => "00111101011100101000100011111011", 
    86 => "00111110000001101101111101001110", 
    87 => "00111110011000100010111110100111", 
    88 => "00111101100011101010001110100010", 
    89 => "00111101101011001010011110111101", 
    90 => "00111100111001110111111001111011", 
    91 => "00111101111011011000111011110110", 
    92 => "00111110001001110100100011011011", 
    93 => "10111100100000001011010001100001", 
    94 => "00111110001110111011000101001000", 
    95 => "10111010111010110011111101101100", 
    96 => "10111101110001000001000101011110", 
    97 => "00111101011000000001000101111100", 
    98 => "10111100110010000100111010110110", 
    99 => "00111101101110001011110101100111", 
    100 => "10111101010110100000001110001010", 
    101 => "00111110000111010010101111010110", 
    102 => "10111110000101110001101001100111", 
    103 => "00111101110000010100011011011110", 
    104 => "00111101111010100101000011001110", 
    105 => "00111110011101111001110111101010", 
    106 => "10111110000110010111100001100001", 
    107 => "00111110000010010110010110010000", 
    108 => "00111110001101110101011011000000", 
    109 => "00111101101010001110101111010010", 
    110 => "00111110000110111101010101101001", 
    111 => "10111101100111101110010010110110", 
    112 => "10111110011000010111111010001010", 
    113 => "10111101110001101100000100100011", 
    114 => "10111101101101101111110101100111", 
    115 => "10111110010110001011101011101100", 
    116 => "10111101100011010001001110000100", 
    117 => "10111101110100101110100000111110", 
    118 => "00111110000100000111001000101101", 
    119 => "10111010110100111010110111101010", 
    120 => "00111110011111101010000011110101", 
    121 => "00111100111100011101011110000110", 
    122 => "10111110001110000001011111101111", 
    123 => "00111110010001110000000111101001", 
    124 => "00111110000100011011000010100011", 
    125 => "10111011111001010000110010101101", 
    126 => "10111101100100001111101100101111", 
    127 => "00111100111101111101100100011011", 
    128 => "10111100101011011101001111100011", 
    129 => "00111101010010110110001011101100", 
    130 => "00111110100100000101110011001000", 
    131 => "00111110100101011001010001100101", 
    132 => "10111100111111011110010001110111", 
    133 => "00111101101111101001111011011000", 
    134 => "10111110000000000110001001011011", 
    135 => "00111101010000100110001111110000", 
    136 => "00111100000001101100111011000001", 
    137 => "10111101101001001110101000010100", 
    138 => "10111110000100111010110010100100", 
    139 => "10111101010001101100000111001011", 
    140 => "00111110010001101010100010011111", 
    141 => "10111100100111101111010111101000", 
    142 => "00111110001101111010001100000011", 
    143 => "00111110000101010011000001110100", 
    144 => "10111110000010010101111110111000", 
    145 => "10111101100110100111000000000000", 
    146 => "10111101110101001110001010101111", 
    147 => "00111101110111110001110001011110", 
    148 => "10111100001111111110011011000001", 
    149 => "10111110011100000100000001111000", 
    150 => "10111110001000101001000101010001", 
    151 => "00111110011110100011111000010001", 
    152 => "00111011001010110111110000100000", 
    153 => "10111101101000111001110001000000", 
    154 => "00111101111101001010110000101111", 
    155 => "00111100001000001101111111000011", 
    156 => "10111110011101101111000111101010", 
    157 => "10111101100000100101000000111001", 
    158 => "00111110011100010111100000110110", 
    159 => "10111110001011111100000001011000", 
    160 => "00111110010100100011000100011110", 
    161 => "00111110001111101111000000101101", 
    162 => "00111101111101000110010110011000", 
    163 => "10111110010001010001010011111110", 
    164 => "00111100100110000001111111100111", 
    165 => "10111110010100010110100101001000", 
    166 => "10111011001010010001010111110101", 
    167 => "00111110001010001011011001001100", 
    168 => "10111110011110100100010111010101", 
    169 => "10111101101110000000110100111110", 
    170 => "10111110000001101011010001000011", 
    171 => "00111100101110111001100010011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weidEe is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weidEe is
    component myip_v1_0_HLS_weidEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weidEe_rom_U :  component myip_v1_0_HLS_weidEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


