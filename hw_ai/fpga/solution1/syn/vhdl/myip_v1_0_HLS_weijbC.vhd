-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weijbC_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weijbC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111001010111100011101111", 
    1 => "00111101010000011011101111110010", 
    2 => "00111101001001101010011010001000", 
    3 => "10111110010110110111000001001110", 
    4 => "10111110000001100100111111100110", 
    5 => "10111100110011100111111010111100", 
    6 => "10111110000001011010101000010000", 
    7 => "10111101100111011100000100110100", 
    8 => "10111101110110111111101111110110", 
    9 => "00111101011100110011001001111001", 
    10 => "10111101000011111110001101110011", 
    11 => "10111110010011011111111100010011", 
    12 => "00111100100011101010011101011010", 
    13 => "10111110011101101000100100100011", 
    14 => "10111101011101001001100111101100", 
    15 => "00111101101010000000000010111000", 
    16 => "00111101100110101101111011011010", 
    17 => "00111110011111100001101100101011", 
    18 => "00111110000001011001011000111011", 
    19 => "10111110001110011001110010000110", 
    20 => "00111101111111000001000100100000", 
    21 => "10111101100111000011100000011011", 
    22 => "10111110001101001110010100111000", 
    23 => "00111110000000111100110101100010", 
    24 => "10111110010011101100000110110111", 
    25 => "10111110010111110001010010000011", 
    26 => "10111110010100101001000000100010", 
    27 => "10111101011000010011111110100010", 
    28 => "10111110011010010011010110011011", 
    29 => "00111101111010010111010111110111", 
    30 => "00111110010010001001101010111011", 
    31 => "10111101101100110110010010111000", 
    32 => "00111011100110101101111110001101", 
    33 => "10111101111100100110011000110100", 
    34 => "00111110001001010100101011011011", 
    35 => "10111110001111010011110001101001", 
    36 => "10111101111101011001100111000000", 
    37 => "10111010110000001110011101010011", 
    38 => "10111110001111110010010100011101", 
    39 => "10111101101000000001010111000011", 
    40 => "10111100110110100001110010100100", 
    41 => "10111110011001111000111000011011", 
    42 => "10111101110001101001000000100100", 
    43 => "10111110000101000110110000100110", 
    44 => "00111110000000001111100010111100", 
    45 => "10111100111111110101110001110000", 
    46 => "10111110001010111011010100010111", 
    47 => "00111110000011001110101010001111", 
    48 => "10111110000110101010110110001001", 
    49 => "10111110001110111101110101011001", 
    50 => "00111110011101010111000110011011", 
    51 => "00111101101011110010001101101011", 
    52 => "00111101111111101011101000101101", 
    53 => "10111101111000110101010001100010", 
    54 => "10111100001010100011010101011111", 
    55 => "10111101101001000011110110101110", 
    56 => "00111100001100110011101010011100", 
    57 => "00111001100010110001011111110011", 
    58 => "10111101001111011011111101111110", 
    59 => "10111110001000011101101110111101", 
    60 => "10111101010001010110000000100000", 
    61 => "00111110000110101111001001001101", 
    62 => "10111101011011101010011101000011", 
    63 => "00111110011001001111001010111011", 
    64 => "10111100100011010111110101010110", 
    65 => "10111100101011001110100100100010", 
    66 => "00111100111110010100101011001000", 
    67 => "10111011101110101111110000101101", 
    68 => "10111101011101000011101011010100", 
    69 => "00111110001000111000111000101110", 
    70 => "10111110011001100101011000011100", 
    71 => "10111110010011110011110000100100", 
    72 => "10111101110110010000010001100001", 
    73 => "00111101111010101011011100100001", 
    74 => "10111100000101001111101001101100", 
    75 => "10111110100100001110000000000110", 
    76 => "00111101000001101100111000011100", 
    77 => "00111101000011011110110001010101", 
    78 => "10111101000010011000100000100100", 
    79 => "10111110000111110010001011101100", 
    80 => "00111110100000100110111111100011", 
    81 => "00111101010011000100011110011011", 
    82 => "00111100110110011000010111101101", 
    83 => "10111101001011101101001111111011", 
    84 => "00111101000000110111001000101000", 
    85 => "00111101101111110100010101100000", 
    86 => "00111101011001110110110100010111", 
    87 => "10111110001010101001011000100011", 
    88 => "00111100110110000010111010110000", 
    89 => "00111101101000010110010110111011", 
    90 => "00111101011001011101010011001010", 
    91 => "00111101100001100011011111101110", 
    92 => "10111101101110100111011000101100", 
    93 => "00111101001001100011110111001001", 
    94 => "00111101000010101001001010000111", 
    95 => "00111110010000100101110111111101", 
    96 => "10111110000001110100001010011010", 
    97 => "00111110011110000001000100100000", 
    98 => "10111110100000010010101001010111", 
    99 => "10111101000100100111001111110101", 
    100 => "10111110010111010000010101011110", 
    101 => "10111110000100000010010000110010", 
    102 => "00111101100101000011110001111000", 
    103 => "10111110000111110010100110000101", 
    104 => "10111101101010110110110010010011", 
    105 => "10111110001100100011100001000101", 
    106 => "10111100110001010010000110111011", 
    107 => "00111110000111110111101110101100", 
    108 => "10111100101111101110011101011111", 
    109 => "10111101101110010000110011000000", 
    110 => "10111110000110010001011110010101", 
    111 => "10111100001010001010110110001111", 
    112 => "00111101101110111001010101010000", 
    113 => "10111110010011110011010101010011", 
    114 => "00111110000000000100010010110011", 
    115 => "00111110001000111111101101101010", 
    116 => "10111100100000001000000100000101", 
    117 => "10111101100001100011100011100000", 
    118 => "10111101101000110110010000100111", 
    119 => "00111011010000011000111101110000", 
    120 => "10111110100101110110001010000111", 
    121 => "10111110000101010100110000010000", 
    122 => "10111101100101001000000001010011", 
    123 => "10111101100100100110001101010111", 
    124 => "00111101100111010100000110011011", 
    125 => "10111101101011011100001110100101", 
    126 => "00111101010110001110100110010011", 
    127 => "00111110001101111011101000100100", 
    128 => "10111110011111010001001000010010", 
    129 => "00111110010111100000000001100010", 
    130 => "10111101100111010101101101101000", 
    131 => "10111101100101110010001001011110", 
    132 => "10111110000111001111111101001111", 
    133 => "00111110100011110011010100111001", 
    134 => "00111101111110101010111000010110", 
    135 => "10111100001111001111101100011101", 
    136 => "10111110001100010001000000110010", 
    137 => "10111100101101011111000111000111", 
    138 => "00111110000101110010100011001110", 
    139 => "10111101010111100100101001100101", 
    140 => "10111101001100001111101000011100", 
    141 => "10111110000111100011001110110101", 
    142 => "00111100111010001001110101010111", 
    143 => "00111101010111100011111110011101", 
    144 => "00111110011110101111000001010111", 
    145 => "10111101001011101100010011000010", 
    146 => "10111011101010000000101100101100", 
    147 => "00111101111001101011000101101110", 
    148 => "00111011111111101101110000111011", 
    149 => "10111110000101000100110111111010", 
    150 => "10111100110101111001111101001000", 
    151 => "10111101110100001100111111011000", 
    152 => "00111101001110010010000010001001", 
    153 => "00111110000101110110011011000001", 
    154 => "10111100011001000111111001000110", 
    155 => "10111011101011110001110101001010", 
    156 => "10111101001101101100010111100010", 
    157 => "10111101110110010000000110101101", 
    158 => "10111110001010001110001000111010", 
    159 => "10111101001001000100001010111011", 
    160 => "10111101110001011110111111100100", 
    161 => "00111110001111111111001011110010", 
    162 => "10111110100001111000010011001111", 
    163 => "10111110001111011001100101100101", 
    164 => "10111100101011100100011000111000", 
    165 => "10111110011000010010100011010110", 
    166 => "00111101110010000101100111000011", 
    167 => "10111101110101100010010010110100", 
    168 => "00111101100101100010100001101110", 
    169 => "00111101000110111110011011000010", 
    170 => "00111101100110100110000101100100", 
    171 => "10111110000110000010001100111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weijbC is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weijbC is
    component myip_v1_0_HLS_weijbC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weijbC_rom_U :  component myip_v1_0_HLS_weijbC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


