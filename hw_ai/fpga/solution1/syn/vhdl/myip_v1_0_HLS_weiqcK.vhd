-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiqcK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiqcK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110000100110101100000010", 
    1 => "00111101100011100011010110001101", 
    2 => "10111110000111100110100100101000", 
    3 => "00111110000001111111100101100000", 
    4 => "00111110001000111100010110100111", 
    5 => "00111101111000100110110100101011", 
    6 => "00111110011000001000011000011011", 
    7 => "10111101100101111001010100111010", 
    8 => "00111110011111001001000111001000", 
    9 => "10111100111111010010011000100011", 
    10 => "10111101110000101000110111101101", 
    11 => "10111011010100101000101100000100", 
    12 => "10111101111100010000110101001010", 
    13 => "10111101000000000100000010010001", 
    14 => "00111110000110010011001111001011", 
    15 => "10111110010010100010100101010000", 
    16 => "10111101001110100001101101010010", 
    17 => "10111011110000010101011111110001", 
    18 => "10111101100100011011011101000111", 
    19 => "00111100110110010001101011111110", 
    20 => "10111110000100001010010010010110", 
    21 => "00111101101000111110000000111100", 
    22 => "00111101001011111010111011010110", 
    23 => "00111100110010011110101110111110", 
    24 => "00111110011110000011010010100000", 
    25 => "10111110000000100000101010110101", 
    26 => "00111110001110000110101001101100", 
    27 => "00111101011101100100011100100011", 
    28 => "00111100111101111001001110010111", 
    29 => "00111101011101111111101100111110", 
    30 => "10111101001010101101001010001110", 
    31 => "10111101100000111000000010010100", 
    32 => "10111101100000010111010001010011", 
    33 => "00111110000010011101111101010111", 
    34 => "00111100101100101010001110001011", 
    35 => "10111110000101100001011110001111", 
    36 => "10111101000011010010011001110111", 
    37 => "10111101001001001011101111110111", 
    38 => "00111110010101000001110000001010", 
    39 => "00111110100111111101101100000000", 
    40 => "00111110000111010001001110001110", 
    41 => "00111110010010011010000001110001", 
    42 => "10111101101010001100101101101001", 
    43 => "00111101100111110110000011001011", 
    44 => "10111100101100100000001000101110", 
    45 => "00111110100111110100001000001111", 
    46 => "00111101110111100000111101100111", 
    47 => "10111110001111101010010001110010", 
    48 => "00111101101111110011000010011001", 
    49 => "10111110010010101111010011011110", 
    50 => "10111110001100001111100011001100", 
    51 => "00111100001111101011011001111111", 
    52 => "00111110100000100110011011101100", 
    53 => "00111110011100100000100110111100", 
    54 => "00111110100111111000010100001101", 
    55 => "00111100100000100110001111010110", 
    56 => "00111100001100101101011011010111", 
    57 => "10111110001000110000001111011100", 
    58 => "00111101100001101110011110010000", 
    59 => "00111110000000101101001100001101", 
    60 => "10111101110100100111100011001000", 
    61 => "10111110000010011101101110011000", 
    62 => "10111101110000111101000001100111", 
    63 => "10111110001101110010101110101111", 
    64 => "10111101010010100011101101111011", 
    65 => "10111101111110000111101111000100", 
    66 => "10111101000011100010011111010000", 
    67 => "10111100110110100101101100110000", 
    68 => "10111110000011011100100110111100", 
    69 => "10111101101001001000011111011110", 
    70 => "10111110000010000001110110110011", 
    71 => "00111110100100100111110110100001", 
    72 => "00111101110000001110011000010000", 
    73 => "10111110001001011100110100001111", 
    74 => "00111101001111001101111010111100", 
    75 => "00111110010010001101011100100111", 
    76 => "10111101100010111101001000000010", 
    77 => "10111110000011101101110110100011", 
    78 => "10111110100010000000111100110011", 
    79 => "00111101101010010001011100110100", 
    80 => "00111100101000100000010001100101", 
    81 => "10111100011111001110010111100011", 
    82 => "00111101001100001111110100011000", 
    83 => "10111100001101001111110011010001", 
    84 => "10111110001110010010101100101000", 
    85 => "10111110010110100100101001000010", 
    86 => "10111110001001001000010101101000", 
    87 => "00111101100111101110101100001001", 
    88 => "00111110011010000011111101110101", 
    89 => "10111101001001001011100011011010", 
    90 => "00111110010111100001110101100001", 
    91 => "10111101000101011000000100010010", 
    92 => "10111110000010000000110011011110", 
    93 => "00111101001111000110101011101100", 
    94 => "10111100101011000001111101011111", 
    95 => "00111101011100101101011011100111", 
    96 => "10111110010001111101001001110011", 
    97 => "10111110000010100000111001111010", 
    98 => "00111110001000010011111100001111", 
    99 => "00111110011100111011010010111100", 
    100 => "10111101111101110000011101111001", 
    101 => "00111110011100101011010011011101", 
    102 => "10111101011101101111010101001100", 
    103 => "10111110000011111101000100010100", 
    104 => "10111110001010100011111010011110", 
    105 => "00111100000100010111111110110001", 
    106 => "00111110000100001000000100010100", 
    107 => "10111101110100011000011100001101", 
    108 => "00111100001111000110001010110001", 
    109 => "00111101010100010100110110101000", 
    110 => "10111110010111010111111100110101", 
    111 => "10111101100101010101011111100011", 
    112 => "10111100010000101110010101110010", 
    113 => "10111101010011000100000000000001", 
    114 => "10111101001110110111010100001010", 
    115 => "00111100011010101001001000010110", 
    116 => "10111101100111100001010010100011", 
    117 => "00111101101001001100101001010100", 
    118 => "00111110100011110110001100011111", 
    119 => "10111110011000111110010111100111", 
    120 => "00111110010011001100101111111010", 
    121 => "10111100000011111101001011111110", 
    122 => "00111110001110100100010111011001", 
    123 => "00111011110010100010010111110110", 
    124 => "10111110011000001001101010100011", 
    125 => "00111100010001101110010111110000", 
    126 => "10111101100111001010011101010111", 
    127 => "10111101101000111001100000000110", 
    128 => "10111110101001111001000100001000", 
    129 => "00111101111101000101011101110110", 
    130 => "10111110001110010111101111010000", 
    131 => "10111100100001001000110011001101", 
    132 => "10111110010100001011101110011111", 
    133 => "10111110001101001111100011110110", 
    134 => "10111100000100000101111101111110", 
    135 => "00111101110100001100101101101101", 
    136 => "10111110010101000111111011111100", 
    137 => "00111101111111110000100010101011", 
    138 => "00111100001111010110111011101001", 
    139 => "00111110010100111111101011110001", 
    140 => "00111011011101101100000011011001", 
    141 => "10111110001101011111100111110011", 
    142 => "00111101100001110111001010001100", 
    143 => "10111101010100110101010010000011", 
    144 => "10111101011111111110011001010000", 
    145 => "10111101111011001011011111110101", 
    146 => "00111110000100001011100001000111", 
    147 => "00111110000100111110110100011110", 
    148 => "00111100101010101111010010101001", 
    149 => "00111101110000000111000001101010", 
    150 => "10111110001011111001110111101100", 
    151 => "10111110010100110011110111101000", 
    152 => "10111101111100000111010000111011", 
    153 => "00111110011000100100010010001101", 
    154 => "10111110010011001100000110110011", 
    155 => "10111101111000110111111110111001", 
    156 => "00111110011111110100011101001111", 
    157 => "00111100010000000111100010100100", 
    158 => "00111101010000101011010011101011", 
    159 => "00111110000100010111100000001101", 
    160 => "10111101111100001111101000110100", 
    161 => "00111010101000001001010110001010", 
    162 => "10111101011000100100100110110111", 
    163 => "10111101001101010100000100011111", 
    164 => "10111100000100100110011010100101", 
    165 => "10111101101010101111001100000011", 
    166 => "00111101100011011011100000010011", 
    167 => "00111101110000001010111100101100", 
    168 => "00111101111101001010011111010001", 
    169 => "00111110001010101011110101011001", 
    170 => "10111101011010011001000110111111", 
    171 => "10111110000110100000010110110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiqcK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiqcK is
    component myip_v1_0_HLS_weiqcK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiqcK_rom_U :  component myip_v1_0_HLS_weiqcK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


