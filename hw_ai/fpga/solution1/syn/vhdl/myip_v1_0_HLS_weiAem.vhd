-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weiAem_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weiAem_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111001010011110110000101", 
    1 => "10111101100010110000101000101011", 
    2 => "00111101101011011001111000010010", 
    3 => "10111110000001101001101110101001", 
    4 => "10111101100110001011101011111000", 
    5 => "00111100000011101101001101011000", 
    6 => "10111101010110000001010111110001", 
    7 => "10111100100110000000010111011010", 
    8 => "10111110000011011111110111010010", 
    9 => "10111110001010001011010001100000", 
    10 => "10111101000101001001011111010000", 
    11 => "10111101010010100100111101001101", 
    12 => "00111101010010001110100011011001", 
    13 => "00111101011100100000100100110100", 
    14 => "10111101000111111101011101010001", 
    15 => "10111110010011110111010011000110", 
    16 => "00111101001000110000101000001100", 
    17 => "00111110100101001100011000000100", 
    18 => "00111110011011110111001101111001", 
    19 => "00111110000001110011000110111001", 
    20 => "00111110011111111010110100110111", 
    21 => "00111110000110010000101001000001", 
    22 => "10111101110101011001001011011000", 
    23 => "10111110001110001111100100000111", 
    24 => "10111101110010110010010100011000", 
    25 => "10111101000110000001011000000100", 
    26 => "00111100111111111101001111001010", 
    27 => "00111110001111111101001001001101", 
    28 => "00111101100001001110110100100000", 
    29 => "00111110011000110011010001111110", 
    30 => "10111101100110100101111111111000", 
    31 => "00111100100010000111011001010110", 
    32 => "10111100011001001101001010001010", 
    33 => "10111101101000010000011111010011", 
    34 => "10111100000101111011000110001010", 
    35 => "00111110001100000001110000110110", 
    36 => "00111101110100000111110101111000", 
    37 => "00111011100110111011010110001110", 
    38 => "00111101000111110001101010000101", 
    39 => "00111110010001010001110110111101", 
    40 => "10111101110100110001110001000111", 
    41 => "10111101101001100111011110111100", 
    42 => "00111101000000101111000100001001", 
    43 => "00111101111100001001100011000100", 
    44 => "10111110010110011110001000001101", 
    45 => "00111110000101010110110011111001", 
    46 => "10111101100011110001000010101000", 
    47 => "00111101101011001011111111110101", 
    48 => "00111101110100011000001010101001", 
    49 => "00111101100111100010010110111100", 
    50 => "10111101101100110001100000001010", 
    51 => "00111101000100011101101111001000", 
    52 => "10111110100110010011101101010111", 
    53 => "00111011000110000010010101111010", 
    54 => "00111100101110000000101011001000", 
    55 => "10111110011110111011111010101110", 
    56 => "00111100101001110111000100010110", 
    57 => "10111101100110100100000001100001", 
    58 => "10111101110011000001010101110010", 
    59 => "10111110000100111000010101110001", 
    60 => "10111101001111010101010111100110", 
    61 => "00111100110001001110010111101010", 
    62 => "00111110000010011100001111011111", 
    63 => "00111110001101011100010000011100", 
    64 => "10111110000010001001111000001010", 
    65 => "00111100101011110110100100011001", 
    66 => "00111100100110000100110100111010", 
    67 => "10111101011101010110110010110001", 
    68 => "00111100001101101101011100110100", 
    69 => "00111110000001100000100001101111", 
    70 => "00111100100001000001100000011111", 
    71 => "00111110000001000011100010101001", 
    72 => "00111110010001011011000010000111", 
    73 => "00111110100101110001100101111111", 
    74 => "00111101101000011101011100111011", 
    75 => "00111101111001111000000011001100", 
    76 => "10111110100001101011101110011111", 
    77 => "00111101110101100011000101111011", 
    78 => "00111110100001000111100010010000", 
    79 => "00111101001111010101111100110101", 
    80 => "00111100100011001101110011011001", 
    81 => "10111100111011111011100010110011", 
    82 => "00111101010011001101000000111110", 
    83 => "10111100111000010111100001000101", 
    84 => "00111110001111001001100101000100", 
    85 => "10111110011101110000100101111110", 
    86 => "00111100110000111100111111000011", 
    87 => "00111010101111000100011100000101", 
    88 => "00111110000000110010101001101010", 
    89 => "00111110001101110001010010010100", 
    90 => "00111110001110110100011110001111", 
    91 => "00111110000010000110110110001101", 
    92 => "00111100110011011101001011011011", 
    93 => "10111110100000011011110000010011", 
    94 => "10111101011000011111010000111111", 
    95 => "10111110000001011010100011100101", 
    96 => "10111110000010110011110011101000", 
    97 => "10111101100000100000011111010111", 
    98 => "10111101100010010001001110010010", 
    99 => "00111110001000001000000001110001", 
    100 => "10111101101011010101001011111001", 
    101 => "00111101000111100011011001000110", 
    102 => "10111101101100000110110111000000", 
    103 => "10111110001010111000000010000110", 
    104 => "10111110001101010000111001100010", 
    105 => "10111100010000000111011110101100", 
    106 => "10111110010001101110000001100101", 
    107 => "10111110001100001100000010011000", 
    108 => "10111101011001000100010010100010", 
    109 => "00111101011101100010010110010001", 
    110 => "10111110001100011010010011100100", 
    111 => "00111110000100101000011111000111", 
    112 => "00111100110011110101111000010011", 
    113 => "10111101111001011111110101111110", 
    114 => "00111101101010101000001111011010", 
    115 => "10111101011001101011100111100111", 
    116 => "10111101010100100000100101010110", 
    117 => "10111100111001001011010110011000", 
    118 => "00111011111000100000100101011000", 
    119 => "10111101100100110001110100101001", 
    120 => "10111101101010000111000000101001", 
    121 => "00111100011100111111010110010111", 
    122 => "00111110010100000100010110000100", 
    123 => "00111110000010110101011100000000", 
    124 => "10111101010100111100101100011110", 
    125 => "00111101110101110101111010111110", 
    126 => "00111011110010001010010011010110", 
    127 => "10111110001100100000101111100000", 
    128 => "00111101001111011011100111111100", 
    129 => "10111101010010110001100100101001", 
    130 => "10111110001110000110000111011000", 
    131 => "00111101100011111011100011100000", 
    132 => "00111101110111101111111011010010", 
    133 => "10111101000101000111000110100101", 
    134 => "00111110000000100100101010110010", 
    135 => "00111101110010010000001011011010", 
    136 => "00111100101001101001011010011110", 
    137 => "10111110001000111111111111111111", 
    138 => "10111110001101001111101101100110", 
    139 => "00111101100110111110111111100111", 
    140 => "10111101101000000100100100010001", 
    141 => "10111101011100011100100000101101", 
    142 => "00111110000000011011111111000101", 
    143 => "10111101111110100001100001011011", 
    144 => "10111110000101111110100110110001", 
    145 => "10111110010011000010100111110101", 
    146 => "10111101101110011100010000011111", 
    147 => "00111110011001100110101010000101", 
    148 => "10111110001100110001111010111111", 
    149 => "00111101001110001000010010001111", 
    150 => "00111110001101101010101010010000", 
    151 => "10111110000101001110001100011000", 
    152 => "10111110000000010111010101000010", 
    153 => "00111100101000001100110011111111", 
    154 => "00111101100111110111011010011100", 
    155 => "10111101011001010010011011000011", 
    156 => "10111101100110000110111011110010", 
    157 => "00111011100010000111011011110000", 
    158 => "00111100011111001010011010101101", 
    159 => "00111101101100001000011010001111", 
    160 => "10111101111000001111001011001110", 
    161 => "10111110011000101000110011010101", 
    162 => "10111110000101111010010101000100", 
    163 => "00111110010111110011011101111011", 
    164 => "00111101011101110001101010001101", 
    165 => "00111110011001011011010111101111", 
    166 => "10111101110111101110011000101110", 
    167 => "10111101110001101101111110110011", 
    168 => "00111101001001000110011011011110", 
    169 => "00111101101010100010101011011101", 
    170 => "00111110010101101110001010011000", 
    171 => "10111100000101101111111010000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weiAem is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weiAem is
    component myip_v1_0_HLS_weiAem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weiAem_rom_U :  component myip_v1_0_HLS_weiAem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


