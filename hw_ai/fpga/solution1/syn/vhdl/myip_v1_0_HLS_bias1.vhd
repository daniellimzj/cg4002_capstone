-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_bias1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 172
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_bias1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110110100100011111001110", 
    1 => "10111011011111000010011101000001", 
    2 => "00111110000000001010110010110101", 
    3 => "00111101100110010110010101101000", 
    4 => "00111110000101100010010101010001", 
    5 => "10111100001110000001011001110001", 
    6 => "00111101101111101001010001110000", 
    7 => "10111001011110001100001011001110", 
    8 => "10111101110001001010110111010101", 
    9 => "10111110000111101011110000111111", 
    10 => "00111110001001010101000010000101", 
    11 => "10111101110110010010100011010101", 
    12 => "10111110001110111110000110110101", 
    13 => "00111110010101000000011010011010", 
    14 => "00111110100001000000101000001001", 
    15 => "00111101100111000010100110011100", 
    16 => "00111101110101101111010011000110", 
    17 => "10111101000000110101111110100011", 
    18 => "00111101111011011000111010001111", 
    19 => "10111101100010011110110111011110", 
    20 => "00111101100011111111001111000111", 
    21 => "00111110100101101010101100010100", 
    22 => "10111101001101001110010100111010", 
    23 => "10111101101000010011101100001111", 
    24 => "10111101101010100100011100001101", 
    25 => "10111101110000010011100111100010", 
    26 => "00111110001111100001110001101000", 
    27 => "00111110001000100000000101101000", 
    28 => "00111110001000110011110111000011", 
    29 => "10111011010110000100010101111001", 
    30 => "00111101111111010101001101101011", 
    31 => "00111110000011101101011110011000", 
    32 => "00111110000000000110110110000000", 
    33 => "00111101111101111100010011111010", 
    34 => "10111101110000001100010110110101", 
    35 => "00111110000001000100100100001100", 
    36 => "00111101011101111011011100100110", 
    37 => "00111101111011000010010011010101", 
    38 => "00111110000101011101101101000111", 
    39 => "00111110001000110001000111010011", 
    40 => "00111101110000010111010010100100", 
    41 => "00111110000111110011000100000101", 
    42 => "10111101001111011101110110111100", 
    43 => "00111101011101010000100110111111", 
    44 => "00111100100000011000100010011011", 
    45 => "00111110010010011101101101111011", 
    46 => "10111110000001000111111111011000", 
    47 => "00111110010000001110010011110011", 
    48 => "00111110100100010101101111100111", 
    49 => "00111110000111001100111100100101", 
    50 => "00111110000010101110011000011100", 
    51 => "00111101001111111110000001101010", 
    52 => "10111101111111100111111101111100", 
    53 => "00111101001111000001100100101110", 
    54 => "00111110100010010101000001100001", 
    55 => "10111101000110110101110100101010", 
    56 => "00111101000110001110100100101000", 
    57 => "00111110000001011110110001111101", 
    58 => "00111101110100000110110010011001", 
    59 => "10111101110110100100100010100011", 
    60 => "00111101101111010001111110100001", 
    61 => "00111101110011010100010010111000", 
    62 => "00111110011011111011011111000001", 
    63 => "00111100001111001100010000001101", 
    64 => "00111100000110001111010100101100", 
    65 => "00111110001011000011100010101110", 
    66 => "10111101100100110101110100010000", 
    67 => "10111100111001001001100001110101", 
    68 => "00111101100000010011111011111000", 
    69 => "00111101100101001000110100001111", 
    70 => "10111100111111011001111101110100", 
    71 => "00111110001111001100000100001001", 
    72 => "00111100110000110110011010010001", 
    73 => "00111100101111001100100011110011", 
    74 => "10111101101001111100010001111001", 
    75 => "10111101000000100000011110111100", 
    76 => "10111011110010111011011011111010", 
    77 => "00111110010001011001010101010001", 
    78 => "10111100101001001010010010110001", 
    79 => "10111101000001010011100111110010", 
    80 => "10111101101010111000101001011010", 
    81 => "00111100101100111111100110000000", 
    82 => "00111101001001011110111100011101", 
    83 => "10111101010101101001100001011000", 
    84 => "00111110100010110101010011010001", 
    85 => "10111101101000010001001111011110", 
    86 => "10111101001100000110110000111000", 
    87 => "00111101000001101000000001111110", 
    88 => "00111101011001010100100011000000", 
    89 => "00111010000010000000111110111010", 
    90 => "00111101101011100111100111010110", 
    91 => "00111110011011000000000010100010", 
    92 => "10111100111000011101101011101101", 
    93 => "10111110001100101001101110010011", 
    94 => "00111101111010011000100101111000", 
    95 => "10111110000111100000111000001010", 
    96 => "00111110011101001000011110101010", 
    97 => "00111101011001000110011101000111", 
    98 => "10111110001111101100001010000100", 
    99 => "00111101000011111110011010101110", 
    100 => "10111110010111000101101001100001", 
    101 => "00111100100111111101010111100101", 
    102 => "10111100111000101001000100000001", 
    103 => "10111100100101010001011000011000", 
    104 => "10111101010100001100111011100100", 
    105 => "00111101010011100100011100100001", 
    106 => "00111101001010111001010111110011", 
    107 => "10111101010001111000101000000110", 
    108 => "00111110011010001011110110010100", 
    109 => "00111100001101000110011100101110", 
    110 => "10111101011111011001101111000110", 
    111 => "10111101011111111000111110100011", 
    112 => "00111110010110110010100110010001", 
    113 => "00111110000010101001000100100000", 
    114 => "00111110001100001100010001110110", 
    115 => "00111101101011001001100001110001", 
    116 => "10111101101000101010001000100100", 
    117 => "00111101101000011111011000100110", 
    118 => "00111110011110111010011101110010", 
    119 => "00111100010000110110000010010101", 
    120 => "10111101101110010111110010110100", 
    121 => "00111101110001011011101111100100", 
    122 => "00111101101001000010101101011000", 
    123 => "00111110000001100111001011001011", 
    124 => "00111110001001011110100111110010", 
    125 => "00111110010110110100000001101011", 
    126 => "10111101101000110100101100101111", 
    127 => "00111101101010101101000100110001", 
    128 => "10111110001010000000000001000100", 
    129 => "10111101100001010110101100010100", 
    130 => "10111101001010100101110100100001", 
    131 => "10111100000001110000111000001111", 
    132 => "00111110000011010100110100101111", 
    133 => "00111101111011011111000110011100", 
    134 => "00111110000000000110101111100110", 
    135 => "00111110011010001100100101010000", 
    136 => "00111101111011100010011110100011", 
    137 => "00111110000101110101101100001101", 
    138 => "00111110001001100101111111000001", 
    139 => "00111110000101001101011010111010", 
    140 => "00111101101100011010100000001110", 
    141 => "00111101110000111001111100001101", 
    142 => "00111101110000001101011101010010", 
    143 => "10111101001000101111110010011100", 
    144 => "00111101010000100011100010110000", 
    145 => "00111101101111000010111100011111", 
    146 => "00111110100000100001000100110011", 
    147 => "00111101111011010101010111010010", 
    148 => "00111101100111100000110101110110", 
    149 => "00111110011011100010000101000100", 
    150 => "10111101010001101011111000000010", 
    151 => "10111101100000101001110100100111", 
    152 => "00111101111010011101010110000010", 
    153 => "10111110000001111010100111110001", 
    154 => "10111101111100011101001100011001", 
    155 => "00111110000100101110001001101000", 
    156 => "00111110010101010100110100000101", 
    157 => "00111110010010000101000111010010", 
    158 => "00111110000100100111011100011110", 
    159 => "00111110010010110111001011100101", 
    160 => "10111100101111001000101111111000", 
    161 => "00111101101010000110011100110001", 
    162 => "10111110001101000010001110110110", 
    163 => "00111110001001110101100111110000", 
    164 => "10111101001001010101010010011001", 
    165 => "10111100010000011110100101100101", 
    166 => "00111101001011101011000110100000", 
    167 => "10111101111100100000111101101101", 
    168 => "00111110011110101010011010100100", 
    169 => "00111110100010100001011000111000", 
    170 => "10111100111101110111111011001100", 
    171 => "00111101111101010101100011110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_bias1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_bias1 is
    component myip_v1_0_HLS_bias1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_bias1_rom_U :  component myip_v1_0_HLS_bias1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


