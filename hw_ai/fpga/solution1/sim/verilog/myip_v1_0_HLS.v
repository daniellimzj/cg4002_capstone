// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myip_v1_0_HLS,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.203000,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=45,HLS_SYN_LUT=164,HLS_VERSION=2019_2}" *)

module myip_v1_0_HLS (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg S_AXIS_TREADY;

 reg    ap_rst_n_inv;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln45_fu_103_p2;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln54_fu_125_p2;
wire    ap_CS_fsm_state4;
wire   [2:0] word_cnt_fu_109_p2;
reg    ap_block_state2;
wire   [31:0] sum_fu_119_p2;
wire   [2:0] word_cnt_2_fu_131_p2;
reg   [2:0] word_cnt_2_reg_160;
wire    regslice_both_M_AXIS_V_data_U_apdone_blk;
reg    ap_block_state3_io;
reg   [2:0] word_cnt_0_reg_68;
wire    ap_CS_fsm_state1;
reg   [31:0] write_output_data_reg_79;
reg   [2:0] word_cnt_1_reg_92;
reg   [3:0] ap_NS_fsm;
wire    regslice_both_S_AXIS_V_data_U_apdone_blk;
wire   [31:0] S_AXIS_TDATA_int;
wire    S_AXIS_TVALID_int;
reg    S_AXIS_TREADY_int;
wire    regslice_both_S_AXIS_V_data_U_ack_in;
wire    regslice_both_w1_S_AXIS_V_last_U_apdone_blk;
wire    S_AXIS_TLAST_int;
wire    regslice_both_w1_S_AXIS_V_last_U_vld_out;
wire    regslice_both_w1_S_AXIS_V_last_U_ack_in;
reg    M_AXIS_TVALID_int;
wire    M_AXIS_TREADY_int;
wire    regslice_both_M_AXIS_V_data_U_vld_out;
wire    regslice_both_w1_M_AXIS_V_last_U_apdone_blk;
wire    M_AXIS_TLAST_int;
wire    regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy;
wire    regslice_both_w1_M_AXIS_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_S_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TDATA),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_data_U_ack_in),
    .data_out(S_AXIS_TDATA_int),
    .vld_out(S_AXIS_TVALID_int),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_S_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_S_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TLAST),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_w1_S_AXIS_V_last_U_ack_in),
    .data_out(S_AXIS_TLAST_int),
    .vld_out(regslice_both_w1_S_AXIS_V_last_U_vld_out),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_w1_S_AXIS_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_M_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(write_output_data_reg_79),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(M_AXIS_TREADY_int),
    .data_out(M_AXIS_TDATA),
    .vld_out(regslice_both_M_AXIS_V_data_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_M_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TLAST_int),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy),
    .data_out(M_AXIS_TLAST),
    .vld_out(regslice_both_w1_M_AXIS_V_last_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_w1_M_AXIS_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln45_fu_103_p2 == 1'd0)) & (icmp_ln45_fu_103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        word_cnt_0_reg_68 <= word_cnt_fu_109_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        word_cnt_0_reg_68 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln45_fu_103_p2 == 1'd0)) & (icmp_ln45_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        word_cnt_1_reg_92 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == M_AXIS_TREADY_int))) begin
        word_cnt_1_reg_92 <= word_cnt_2_reg_160;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln45_fu_103_p2 == 1'd0)) & (icmp_ln45_fu_103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        write_output_data_reg_79 <= sum_fu_119_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        write_output_data_reg_79 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        word_cnt_2_reg_160 <= word_cnt_2_fu_131_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln54_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1)) & (icmp_ln54_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        M_AXIS_TVALID_int = 1'b1;
    end else begin
        M_AXIS_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_S_AXIS_V_data_U_ack_in == 1'b1) & (1'b1 == S_AXIS_TVALID))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln45_fu_103_p2 == 1'd0)) & (icmp_ln45_fu_103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        S_AXIS_TREADY_int = 1'b1;
    end else begin
        S_AXIS_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln45_fu_103_p2 == 1'd0)) & (icmp_ln45_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln45_fu_103_p2 == 1'd0)) & (icmp_ln45_fu_103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1)) & (icmp_ln54_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state3_io) | (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1)) & (icmp_ln54_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == M_AXIS_TREADY_int))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TLAST_int = ((word_cnt_1_reg_92 == 3'd3) ? 1'b1 : 1'b0);

assign M_AXIS_TVALID = regslice_both_M_AXIS_V_data_U_vld_out;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln45_fu_103_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln54_fu_125_p2 == 1'd0) & (1'b0 == M_AXIS_TREADY_int));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln45_fu_103_p2 = ((word_cnt_0_reg_68 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_125_p2 = ((word_cnt_1_reg_92 == 3'd4) ? 1'b1 : 1'b0);

assign sum_fu_119_p2 = (S_AXIS_TDATA_int + write_output_data_reg_79);

assign word_cnt_2_fu_131_p2 = (word_cnt_1_reg_92 + 3'd1);

assign word_cnt_fu_109_p2 = (word_cnt_0_reg_68 + 3'd1);

endmodule //myip_v1_0_HLS
