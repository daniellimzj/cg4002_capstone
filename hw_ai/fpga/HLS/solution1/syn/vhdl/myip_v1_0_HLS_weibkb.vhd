-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myip_v1_0_HLS_weibkb_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 180
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myip_v1_0_HLS_weibkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011111100101110011110000100", 
    1 => "00111100101001000001111001111000", 
    2 => "00111100111111001000111111111000", 
    3 => "10111110000010001111010010110011", 
    4 => "10111101100001000100001111110001", 
    5 => "00111100110101011001100010011101", 
    6 => "00111101001011111110001101011000", 
    7 => "10111101000100101001111011111000", 
    8 => "10111110000010001000101011101110", 
    9 => "00111111010110101111011101010000", 
    10 => "10111010101011011110011001001111", 
    11 => "10111100001100111000001010101111", 
    12 => "00111110000010000100000010101111", 
    13 => "00111101000100111100010001101100", 
    14 => "00111101101101100110001000010010", 
    15 => "00111101000000101100111110110101", 
    16 => "10111100110000111111100110111000", 
    17 => "00111100101011000011001001010101", 
    18 => "00111110010010010101100001100101", 
    19 => "00111101001010110111001110010111", 
    20 => "10111101111110110100000000000111", 
    21 => "10111100010111000000011110111100", 
    22 => "00111110010101110111001000001101", 
    23 => "00111111100100110101010010000011", 
    24 => "10111111101110001110010110111111", 
    25 => "00111110100101111001100101011101", 
    26 => "00111111110101101110100001000001", 
    27 => "10111110011100111110010000101101", 
    28 => "00111111011111101100101110111011", 
    29 => "10111111110011010111011111100010", 
    30 => "00111111010010011001111110111111", 
    31 => "01000000001110000110111101001000", 
    32 => "10111101100010110011110111110001", 
    33 => "10111111101001000111100100110111", 
    34 => "10111111100010001000101000101110", 
    35 => "00111110100101011101111011111110", 
    36 => "10111111010010000010101000001001", 
    37 => "10111110010010110100001000111000", 
    38 => "00111111001011011111100100110100", 
    39 => "10111111101110001110111001000100", 
    40 => "10111101010011010000101111000111", 
    41 => "10111101011001000011101110101010", 
    42 => "00111010001001011010111011000001", 
    43 => "10111101011010010100111001100111", 
    44 => "00111100110111010101111111111111", 
    45 => "00111101101111110000001111010110", 
    46 => "10111101101000101100100110011110", 
    47 => "10111101001110101101011111110100", 
    48 => "10111100000110010001001011110000", 
    49 => "00111111100110000101101100110111", 
    50 => "10111101010011101010001000110100", 
    51 => "00111101011100100110001010111101", 
    52 => "00111101011111100111101001111101", 
    53 => "10111100101011100011011001001011", 
    54 => "10111111011011000010001000111000", 
    55 => "10111011101011111100000010000111", 
    56 => "00111101001000011111101011001100", 
    57 => "10111101110111010000000100001111", 
    58 => "00111101110110100111111101001010", 
    59 => "10111101101000100010101000000100", 
    60 => "00111101011110000100000001101100", 
    61 => "00111110011001101000000010101000", 
    62 => "10111111100000010111100000011101", 
    63 => "10111110010101010110111111011111", 
    64 => "10111111000001010010011001101110", 
    65 => "10111100110101000001010100000110", 
    66 => "10111110010111100011101111110111", 
    67 => "10111110101111010100100111110000", 
    68 => "00111101011001111100010011000011", 
    69 => "10111101111010111010001010111000", 
    70 => "00111100110101011001111011010110", 
    71 => "00111110111001010100001010110011", 
    72 => "10111111101000001111001010111001", 
    73 => "10111110100001000001000010010101", 
    74 => "00111110110100100010100111110111", 
    75 => "00111110000010101111001001010111", 
    76 => "00111110000000011011011011111001", 
    77 => "00111111110011000011010001101001", 
    78 => "00111110101001110101110010000010", 
    79 => "00111111110101101001111000000011", 
    80 => "00111110101101111011100001111001", 
    81 => "01000000001001110010110010101001", 
    82 => "00111101101000100110001001100111", 
    83 => "11000000001011111100011010000011", 
    84 => "00111111000000001000110101101010", 
    85 => "00111011111010111110100001000010", 
    86 => "10111101110110110101100000110011", 
    87 => "00111110110010000010101110011101", 
    88 => "00111110010100100000111001110000", 
    89 => "00111110101010101001001110100101", 
    90 => "10111101010011100101101100110110", 
    91 => "00111110011010010100100111110101", 
    92 => "10111111010101010011000011011000", 
    93 => "10111110100100101110101100101111", 
    94 => "00111101010110111010000001010011", 
    95 => "10111110011110101100111000101111", 
    96 => "10111111000110111100010011111000", 
    97 => "10111110101101011000111111101011", 
    98 => "10111110000000100000100111100011", 
    99 => "00111111101111110010000010010000", 
    100 => "00111111100111000000011110111101", 
    101 => "10111111001111001001010100100001", 
    102 => "10111110111101101101110001001010", 
    103 => "00111111011010111100101000001001", 
    104 => "00111110110001100100000011001010", 
    105 => "00111101110110010110001010001101", 
    106 => "10111101111110011010011001000000", 
    107 => "10111110010010100101100011010111", 
    108 => "10111011100100111000110110011011", 
    109 => "00111101101100100100010100010010", 
    110 => "10111110100010011000001110000110", 
    111 => "00111111000111011100110111010111", 
    112 => "10111111001011100001110111101100", 
    113 => "10111111000010001010111011001100", 
    114 => "10111111010011010100000101010110", 
    115 => "10111110101010110111000111001011", 
    116 => "10111111011000110001011001111110", 
    117 => "10111110100000011100110100100000", 
    118 => "10111111100100000000101100000101", 
    119 => "00111111100001001101100011110110", 
    120 => "10111111000100100101110111101001", 
    121 => "01000000000011100111000101000101", 
    122 => "00111111100111100010101111010000", 
    123 => "00111111000101001110001010111111", 
    124 => "11000000100010111111111001101110", 
    125 => "00111101010001011110011001111111", 
    126 => "10111111000001001101011101001010", 
    127 => "00111110001010011001100011110010", 
    128 => "00111101010111100111101010110001", 
    129 => "00111101111101100010110010100001", 
    130 => "00111111101000010110100110101001", 
    131 => "10111111110011011010100100001011", 
    132 => "10111111101000001100101101100100", 
    133 => "10111111001010101111001111101101", 
    134 => "10111101110001001010010110001101", 
    135 => "00111111000111010101100011111101", 
    136 => "10111110101110110111010111111101", 
    137 => "00111110110011110011101100001001", 
    138 => "10111111010011011010011000100001", 
    139 => "11000000001011001111100011001100", 
    140 => "10111111011111011011111010001010", 
    141 => "10111111110000011001101001101010", 
    142 => "10111111100000000110100100101111", 
    143 => "11000000000101011010011100101101", 
    144 => "10111111111100001100100010001110", 
    145 => "10111101111100101100010011110111", 
    146 => "00111101010011000101000111010010", 
    147 => "10111111100101110010000011010110", 
    148 => "00111110100001100000011101000010", 
    149 => "00111110101011000100000100010110", 
    150 => "01000000000111000010000111011110", 
    151 => "11000000000011011100000110000101", 
    152 => "11000000000100100010110000001011", 
    153 => "10111110011000110010011000010011", 
    154 => "00111110101110000100101000010011", 
    155 => "10111110110011101101011110101000", 
    156 => "00111110111010010110100001001111", 
    157 => "01000000001100010000111110001010", 
    158 => "11000000110001100111111111100000", 
    159 => "11000000001110001110100000010011", 
    160 => "10111110110101110001101001110101", 
    161 => "10111111000111111100011111111010", 
    162 => "10111111010100110011011011000110", 
    163 => "11000000000100110110001010111110", 
    164 => "00111111011101010101101010101110", 
    165 => "10111101100011000100011111101100", 
    166 => "10111110110001110100100010110001", 
    167 => "10111110000011110010110010010000", 
    168 => "00111010000111110110001110111010", 
    169 => "10111111001100000000101111011101", 
    170 => "10111110110111100001011001111000", 
    171 => "10111111000100110011111111110101", 
    172 => "10111111101011100110111111011000", 
    173 => "00111110111000101011011011101001", 
    174 => "00111101100000000101011001101001", 
    175 => "00111110100110111100110100011111", 
    176 => "10111111011010001100000010111110", 
    177 => "10111111101001111110100111111001", 
    178 => "10111111111000110000001010111100", 
    179 => "00111110111111101001001110110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myip_v1_0_HLS_weibkb is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 180;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myip_v1_0_HLS_weibkb is
    component myip_v1_0_HLS_weibkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myip_v1_0_HLS_weibkb_rom_U :  component myip_v1_0_HLS_weibkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


