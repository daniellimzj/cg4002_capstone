// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myip_v1_0_HLS,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.327300,HLS_SYN_LAT=44601,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=43,HLS_SYN_FF=6223,HLS_SYN_LUT=9562,HLS_VERSION=2019_2}" *)

module myip_v1_0_HLS (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 60'd1;
parameter    ap_ST_fsm_state2 = 60'd2;
parameter    ap_ST_fsm_state3 = 60'd4;
parameter    ap_ST_fsm_state4 = 60'd8;
parameter    ap_ST_fsm_state5 = 60'd16;
parameter    ap_ST_fsm_state6 = 60'd32;
parameter    ap_ST_fsm_state7 = 60'd64;
parameter    ap_ST_fsm_state8 = 60'd128;
parameter    ap_ST_fsm_state9 = 60'd256;
parameter    ap_ST_fsm_state10 = 60'd512;
parameter    ap_ST_fsm_state11 = 60'd1024;
parameter    ap_ST_fsm_state12 = 60'd2048;
parameter    ap_ST_fsm_state13 = 60'd4096;
parameter    ap_ST_fsm_state14 = 60'd8192;
parameter    ap_ST_fsm_state15 = 60'd16384;
parameter    ap_ST_fsm_state16 = 60'd32768;
parameter    ap_ST_fsm_state17 = 60'd65536;
parameter    ap_ST_fsm_state18 = 60'd131072;
parameter    ap_ST_fsm_state19 = 60'd262144;
parameter    ap_ST_fsm_state20 = 60'd524288;
parameter    ap_ST_fsm_state21 = 60'd1048576;
parameter    ap_ST_fsm_state22 = 60'd2097152;
parameter    ap_ST_fsm_state23 = 60'd4194304;
parameter    ap_ST_fsm_state24 = 60'd8388608;
parameter    ap_ST_fsm_state25 = 60'd16777216;
parameter    ap_ST_fsm_state26 = 60'd33554432;
parameter    ap_ST_fsm_state27 = 60'd67108864;
parameter    ap_ST_fsm_state28 = 60'd134217728;
parameter    ap_ST_fsm_state29 = 60'd268435456;
parameter    ap_ST_fsm_state30 = 60'd536870912;
parameter    ap_ST_fsm_state31 = 60'd1073741824;
parameter    ap_ST_fsm_state32 = 60'd2147483648;
parameter    ap_ST_fsm_state33 = 60'd4294967296;
parameter    ap_ST_fsm_state34 = 60'd8589934592;
parameter    ap_ST_fsm_state35 = 60'd17179869184;
parameter    ap_ST_fsm_state36 = 60'd34359738368;
parameter    ap_ST_fsm_state37 = 60'd68719476736;
parameter    ap_ST_fsm_state38 = 60'd137438953472;
parameter    ap_ST_fsm_state39 = 60'd274877906944;
parameter    ap_ST_fsm_state40 = 60'd549755813888;
parameter    ap_ST_fsm_state41 = 60'd1099511627776;
parameter    ap_ST_fsm_state42 = 60'd2199023255552;
parameter    ap_ST_fsm_state43 = 60'd4398046511104;
parameter    ap_ST_fsm_state44 = 60'd8796093022208;
parameter    ap_ST_fsm_state45 = 60'd17592186044416;
parameter    ap_ST_fsm_state46 = 60'd35184372088832;
parameter    ap_ST_fsm_state47 = 60'd70368744177664;
parameter    ap_ST_fsm_state48 = 60'd140737488355328;
parameter    ap_ST_fsm_state49 = 60'd281474976710656;
parameter    ap_ST_fsm_state50 = 60'd562949953421312;
parameter    ap_ST_fsm_state51 = 60'd1125899906842624;
parameter    ap_ST_fsm_state52 = 60'd2251799813685248;
parameter    ap_ST_fsm_state53 = 60'd4503599627370496;
parameter    ap_ST_fsm_state54 = 60'd9007199254740992;
parameter    ap_ST_fsm_state55 = 60'd18014398509481984;
parameter    ap_ST_fsm_state56 = 60'd36028797018963968;
parameter    ap_ST_fsm_state57 = 60'd72057594037927936;
parameter    ap_ST_fsm_state58 = 60'd144115188075855872;
parameter    ap_ST_fsm_state59 = 60'd288230376151711744;
parameter    ap_ST_fsm_state60 = 60'd576460752303423488;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg S_AXIS_TREADY;

 reg    ap_rst_n_inv;
wire   [10:0] weights1_address0;
reg    weights1_ce0;
wire   [31:0] weights1_q0;
wire   [5:0] bias1_address0;
reg    bias1_ce0;
wire   [31:0] bias1_q0;
wire   [11:0] weights2_address0;
reg    weights2_ce0;
wire   [31:0] weights2_q0;
wire   [5:0] bias2_address0;
reg    bias2_ce0;
wire   [31:0] bias2_q0;
wire   [8:0] weights3_address0;
reg    weights3_ce0;
wire   [31:0] weights3_q0;
wire   [2:0] bias3_address0;
reg    bias3_ce0;
wire   [31:0] bias3_q0;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [59:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln46_fu_506_p2;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire   [31:0] grp_fu_466_p2;
reg   [31:0] reg_479;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_458_p2;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state52;
reg   [31:0] reg_491;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state37;
wire   [63:0] grp_fu_476_p1;
reg   [63:0] reg_496;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state39;
wire   [63:0] grp_generic_tanh_double_s_fu_447_ap_return;
wire    ap_CS_fsm_state21;
wire    grp_generic_tanh_double_s_fu_447_ap_ready;
wire    grp_generic_tanh_double_s_fu_447_ap_done;
wire    ap_CS_fsm_state41;
wire   [5:0] word_cnt_fu_512_p2;
reg    ap_block_state2;
wire   [5:0] word_cnt_5_fu_534_p2;
reg   [5:0] word_cnt_5_reg_745;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln54_fu_540_p1;
reg   [63:0] zext_ln54_reg_750;
wire   [0:0] icmp_ln51_fu_528_p2;
wire   [10:0] zext_ln53_fu_544_p1;
reg   [10:0] zext_ln53_reg_756;
wire   [5:0] i_fu_554_p2;
reg   [5:0] i_reg_764;
wire    ap_CS_fsm_state4;
wire   [10:0] add_ln54_1_fu_565_p2;
reg   [10:0] add_ln54_1_reg_769;
wire   [0:0] icmp_ln53_fu_548_p2;
reg   [31:0] weights1_load_reg_789;
wire    ap_CS_fsm_state5;
wire   [31:0] input_q0;
reg   [31:0] input_load_reg_794;
reg   [31:0] bias1_load_reg_799;
wire    ap_CS_fsm_state13;
wire   [5:0] word_cnt_6_fu_587_p2;
reg   [5:0] word_cnt_6_reg_807;
wire    ap_CS_fsm_state23;
wire   [63:0] zext_ln65_fu_593_p1;
reg   [63:0] zext_ln65_reg_812;
wire   [0:0] icmp_ln62_fu_581_p2;
wire   [11:0] zext_ln64_fu_597_p1;
reg   [11:0] zext_ln64_reg_818;
wire   [5:0] x_fu_607_p2;
reg   [5:0] x_reg_826;
wire    ap_CS_fsm_state24;
wire   [11:0] add_ln65_1_fu_618_p2;
reg   [11:0] add_ln65_1_reg_831;
wire   [0:0] icmp_ln64_fu_601_p2;
reg   [31:0] weights2_load_reg_851;
wire    ap_CS_fsm_state25;
wire   [31:0] v_q0;
reg   [31:0] v_load_reg_856;
reg   [31:0] bias2_load_reg_861;
wire    ap_CS_fsm_state33;
wire   [2:0] word_cnt_8_fu_640_p2;
reg   [2:0] word_cnt_8_reg_869;
wire    ap_CS_fsm_state43;
wire   [63:0] zext_ln75_fu_646_p1;
reg   [63:0] zext_ln75_reg_874;
wire   [0:0] icmp_ln72_fu_634_p2;
wire   [9:0] zext_ln74_fu_650_p1;
reg   [9:0] zext_ln74_reg_880;
wire   [5:0] x_1_fu_660_p2;
reg   [5:0] x_1_reg_888;
wire    ap_CS_fsm_state44;
wire   [0:0] icmp_ln74_fu_654_p2;
reg   [31:0] weights3_load_reg_908;
wire    ap_CS_fsm_state45;
wire   [31:0] v2_q0;
reg   [31:0] v2_load_reg_913;
reg   [31:0] bias3_load_reg_918;
wire    ap_CS_fsm_state53;
wire   [2:0] word_cnt_7_fu_717_p2;
reg   [2:0] word_cnt_7_reg_926;
wire    ap_CS_fsm_state58;
wire    regslice_both_M_AXIS_V_data_U_apdone_blk;
wire   [0:0] icmp_ln81_fu_711_p2;
wire   [0:0] tmp_last_fu_728_p2;
reg   [0:0] tmp_last_reg_936;
wire   [31:0] v3_q0;
reg   [5:0] v_address0;
reg    v_ce0;
reg    v_we0;
reg   [5:0] v2_address0;
reg    v2_ce0;
reg    v2_we0;
reg   [2:0] v3_address0;
reg    v3_ce0;
reg    v3_we0;
reg   [5:0] input_address0;
reg    input_ce0;
reg    input_we0;
wire    grp_generic_tanh_double_s_fu_447_ap_start;
wire    grp_generic_tanh_double_s_fu_447_ap_idle;
reg   [5:0] word_cnt_0_reg_301;
wire    ap_CS_fsm_state1;
reg   [5:0] word_cnt_1_reg_312;
wire    ap_CS_fsm_state22;
reg   [31:0] sum_0_reg_323;
reg   [5:0] i_0_reg_335;
reg   [10:0] phi_mul_reg_346;
reg   [5:0] word_cnt_2_reg_357;
wire    ap_CS_fsm_state42;
reg   [31:0] sum2_0_reg_368;
reg   [5:0] x_0_reg_380;
reg   [11:0] phi_mul2_reg_391;
reg   [2:0] word_cnt_3_reg_402;
wire    ap_CS_fsm_state57;
reg   [31:0] sum3_0_reg_413;
reg   [5:0] x1_0_reg_425;
reg   [2:0] word_cnt_4_reg_436;
reg    grp_generic_tanh_double_s_fu_447_ap_start_reg;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state40;
wire   [63:0] zext_ln48_fu_523_p1;
wire   [63:0] zext_ln54_2_fu_576_p1;
wire   [63:0] zext_ln54_1_fu_560_p1;
wire   [63:0] zext_ln65_2_fu_629_p1;
wire   [63:0] zext_ln65_1_fu_613_p1;
wire  signed [63:0] sext_ln75_fu_706_p1;
wire   [63:0] zext_ln75_1_fu_666_p1;
wire   [63:0] zext_ln83_fu_723_p1;
wire   [31:0] grp_fu_470_p1;
reg   [31:0] grp_fu_458_p0;
reg   [31:0] grp_fu_458_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state54;
reg   [31:0] grp_fu_466_p0;
reg   [31:0] grp_fu_466_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state38;
wire   [10:0] add_ln54_fu_571_p2;
wire   [11:0] add_ln65_fu_624_p2;
wire   [8:0] tmp_3_fu_671_p3;
wire   [6:0] tmp_8_fu_683_p3;
wire   [9:0] zext_ln75_2_fu_679_p1;
wire   [9:0] zext_ln75_3_fu_691_p1;
wire   [9:0] sub_ln75_fu_695_p2;
wire   [9:0] add_ln75_fu_701_p2;
reg    grp_fu_470_ce;
reg   [59:0] ap_NS_fsm;
wire    regslice_both_S_AXIS_V_data_U_apdone_blk;
wire   [31:0] S_AXIS_TDATA_int;
wire    S_AXIS_TVALID_int;
reg    S_AXIS_TREADY_int;
wire    regslice_both_S_AXIS_V_data_U_ack_in;
wire    regslice_both_w1_S_AXIS_V_last_U_apdone_blk;
wire    S_AXIS_TLAST_int;
wire    regslice_both_w1_S_AXIS_V_last_U_vld_out;
wire    regslice_both_w1_S_AXIS_V_last_U_ack_in;
reg    M_AXIS_TVALID_int;
wire    M_AXIS_TREADY_int;
wire    regslice_both_M_AXIS_V_data_U_vld_out;
wire    regslice_both_w1_M_AXIS_V_last_U_apdone_blk;
wire    M_AXIS_TLAST_int;
wire    regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy;
wire    regslice_both_w1_M_AXIS_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 60'd1;
#0 grp_generic_tanh_double_s_fu_447_ap_start_reg = 1'b0;
end

myip_v1_0_HLS_weijbC #(
    .DataWidth( 32 ),
    .AddressRange( 1800 ),
    .AddressWidth( 11 ))
weights1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights1_address0),
    .ce0(weights1_ce0),
    .q0(weights1_q0)
);

myip_v1_0_HLS_bias1 #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
bias1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias1_address0),
    .ce0(bias1_ce0),
    .q0(bias1_q0)
);

myip_v1_0_HLS_weikbM #(
    .DataWidth( 32 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
weights2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights2_address0),
    .ce0(weights2_ce0),
    .q0(weights2_q0)
);

myip_v1_0_HLS_bias2 #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
bias2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias2_address0),
    .ce0(bias2_ce0),
    .q0(bias2_q0)
);

myip_v1_0_HLS_weilbW #(
    .DataWidth( 32 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
weights3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights3_address0),
    .ce0(weights3_ce0),
    .q0(weights3_q0)
);

myip_v1_0_HLS_bias3 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
bias3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias3_address0),
    .ce0(bias3_ce0),
    .q0(bias3_q0)
);

myip_v1_0_HLS_v #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v_address0),
    .ce0(v_ce0),
    .we0(v_we0),
    .d0(grp_fu_470_p1),
    .q0(v_q0)
);

myip_v1_0_HLS_v #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
v2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v2_address0),
    .ce0(v2_ce0),
    .we0(v2_we0),
    .d0(grp_fu_470_p1),
    .q0(v2_q0)
);

myip_v1_0_HLS_v3 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
v3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v3_address0),
    .ce0(v3_ce0),
    .we0(v3_we0),
    .d0(grp_fu_458_p2),
    .q0(v3_q0)
);

myip_v1_0_HLS_input #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
input_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_address0),
    .ce0(input_ce0),
    .we0(input_we0),
    .d0(S_AXIS_TDATA_int),
    .q0(input_q0)
);

generic_tanh_double_s grp_generic_tanh_double_s_fu_447(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_generic_tanh_double_s_fu_447_ap_start),
    .ap_done(grp_generic_tanh_double_s_fu_447_ap_done),
    .ap_idle(grp_generic_tanh_double_s_fu_447_ap_idle),
    .ap_ready(grp_generic_tanh_double_s_fu_447_ap_ready),
    .t_in(reg_496),
    .ap_return(grp_generic_tanh_double_s_fu_447_ap_return)
);

myip_v1_0_HLS_fadmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myip_v1_0_HLS_fadmb6_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_458_p0),
    .din1(grp_fu_458_p1),
    .ce(1'b1),
    .dout(grp_fu_458_p2)
);

myip_v1_0_HLS_fmuncg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myip_v1_0_HLS_fmuncg_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_466_p0),
    .din1(grp_fu_466_p1),
    .ce(1'b1),
    .dout(grp_fu_466_p2)
);

myip_v1_0_HLS_fptocq #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
myip_v1_0_HLS_fptocq_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_generic_tanh_double_s_fu_447_ap_return),
    .ce(grp_fu_470_ce),
    .dout(grp_fu_470_p1)
);

myip_v1_0_HLS_fpepcA #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myip_v1_0_HLS_fpepcA_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_491),
    .ce(1'b1),
    .dout(grp_fu_476_p1)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_S_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TDATA),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_data_U_ack_in),
    .data_out(S_AXIS_TDATA_int),
    .vld_out(S_AXIS_TVALID_int),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_S_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_S_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TLAST),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_w1_S_AXIS_V_last_U_ack_in),
    .data_out(S_AXIS_TLAST_int),
    .vld_out(regslice_both_w1_S_AXIS_V_last_U_vld_out),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_w1_S_AXIS_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_M_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(v3_q0),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(M_AXIS_TREADY_int),
    .data_out(M_AXIS_TDATA),
    .vld_out(regslice_both_M_AXIS_V_data_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_M_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TLAST_int),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy),
    .data_out(M_AXIS_TLAST),
    .vld_out(regslice_both_w1_M_AXIS_V_last_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_w1_M_AXIS_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_generic_tanh_double_s_fu_447_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state20))) begin
            grp_generic_tanh_double_s_fu_447_ap_start_reg <= 1'b1;
        end else if ((grp_generic_tanh_double_s_fu_447_ap_ready == 1'b1)) begin
            grp_generic_tanh_double_s_fu_447_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_reg_335 <= i_reg_764;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_528_p2 == 1'd0))) begin
        i_0_reg_335 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        phi_mul2_reg_391 <= add_ln65_1_reg_831;
    end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln62_fu_581_p2 == 1'd0))) begin
        phi_mul2_reg_391 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        phi_mul_reg_346 <= add_ln54_1_reg_769;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_528_p2 == 1'd0))) begin
        phi_mul_reg_346 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sum2_0_reg_368 <= grp_fu_458_p2;
    end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln62_fu_581_p2 == 1'd0))) begin
        sum2_0_reg_368 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        sum3_0_reg_413 <= grp_fu_458_p2;
    end else if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln72_fu_634_p2 == 1'd0))) begin
        sum3_0_reg_413 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_0_reg_323 <= grp_fu_458_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_528_p2 == 1'd0))) begin
        sum_0_reg_323 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln46_fu_506_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_506_p2 == 1'd0))) begin
        word_cnt_0_reg_301 <= word_cnt_fu_512_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        word_cnt_0_reg_301 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln46_fu_506_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_506_p2 == 1'd1))) begin
        word_cnt_1_reg_312 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        word_cnt_1_reg_312 <= word_cnt_5_reg_745;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        word_cnt_2_reg_357 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        word_cnt_2_reg_357 <= word_cnt_6_reg_807;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_581_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        word_cnt_3_reg_402 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        word_cnt_3_reg_402 <= word_cnt_8_reg_869;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        word_cnt_4_reg_436 <= 3'd0;
    end else if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state60))) begin
        word_cnt_4_reg_436 <= word_cnt_7_reg_926;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        x1_0_reg_425 <= x_1_reg_888;
    end else if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln72_fu_634_p2 == 1'd0))) begin
        x1_0_reg_425 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        x_0_reg_380 <= x_reg_826;
    end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln62_fu_581_p2 == 1'd0))) begin
        x_0_reg_380 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln53_fu_548_p2 == 1'd0))) begin
        add_ln54_1_reg_769 <= add_ln54_1_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln64_fu_601_p2 == 1'd0))) begin
        add_ln65_1_reg_831 <= add_ln65_1_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        bias1_load_reg_799 <= bias1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        bias2_load_reg_861 <= bias2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        bias3_load_reg_918 <= bias3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_764 <= i_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_load_reg_794 <= input_q0;
        weights1_load_reg_789 <= weights1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_479 <= grp_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_491 <= grp_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_496 <= grp_fu_476_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state58) & (icmp_ln81_fu_711_p2 == 1'd0))) begin
        tmp_last_reg_936 <= tmp_last_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        v2_load_reg_913 <= v2_q0;
        weights3_load_reg_908 <= weights3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        v_load_reg_856 <= v_q0;
        weights2_load_reg_851 <= weights2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_cnt_5_reg_745 <= word_cnt_5_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        word_cnt_6_reg_807 <= word_cnt_6_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state58))) begin
        word_cnt_7_reg_926 <= word_cnt_7_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        word_cnt_8_reg_869 <= word_cnt_8_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        x_1_reg_888 <= x_1_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        x_reg_826 <= x_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_528_p2 == 1'd0))) begin
        zext_ln53_reg_756[5 : 0] <= zext_ln53_fu_544_p1[5 : 0];
        zext_ln54_reg_750[5 : 0] <= zext_ln54_fu_540_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln62_fu_581_p2 == 1'd0))) begin
        zext_ln64_reg_818[5 : 0] <= zext_ln64_fu_597_p1[5 : 0];
        zext_ln65_reg_812[5 : 0] <= zext_ln65_fu_593_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln72_fu_634_p2 == 1'd0))) begin
        zext_ln74_reg_880[2 : 0] <= zext_ln74_fu_650_p1[2 : 0];
        zext_ln75_reg_874[2 : 0] <= zext_ln75_fu_646_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state59))) begin
        M_AXIS_TVALID_int = 1'b1;
    end else begin
        M_AXIS_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_506_p2 == 1'd0))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_S_AXIS_V_data_U_ack_in == 1'b1) & (1'b1 == S_AXIS_TVALID))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln46_fu_506_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_506_p2 == 1'd0))) begin
        S_AXIS_TREADY_int = 1'b1;
    end else begin
        S_AXIS_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias1_ce0 = 1'b1;
    end else begin
        bias1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        bias2_ce0 = 1'b1;
    end else begin
        bias2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        bias3_ce0 = 1'b1;
    end else begin
        bias3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state49))) begin
        grp_fu_458_p0 = sum3_0_reg_413;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_458_p0 = sum2_0_reg_368;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_458_p0 = sum_0_reg_323;
    end else begin
        grp_fu_458_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_458_p1 = bias3_load_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_458_p1 = bias2_load_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_458_p1 = bias1_load_reg_799;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_458_p1 = reg_479;
    end else begin
        grp_fu_458_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_466_p0 = weights3_load_reg_908;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_466_p0 = weights2_load_reg_851;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_466_p0 = weights1_load_reg_789;
    end else begin
        grp_fu_466_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_466_p1 = v2_load_reg_913;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_466_p1 = v_load_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_466_p1 = input_load_reg_794;
    end else begin
        grp_fu_466_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state22) | ((grp_generic_tanh_double_s_fu_447_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((grp_generic_tanh_double_s_fu_447_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        grp_fu_470_ce = 1'b1;
    end else begin
        grp_fu_470_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_address0 = zext_ln54_1_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_address0 = zext_ln48_fu_523_p1;
    end else begin
        input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln46_fu_506_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        input_ce0 = 1'b1;
    end else begin
        input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln46_fu_506_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_506_p2 == 1'd0))) begin
        input_we0 = 1'b1;
    end else begin
        input_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v2_address0 = zext_ln75_1_fu_666_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        v2_address0 = zext_ln65_reg_812;
    end else begin
        v2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state44))) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        v2_we0 = 1'b1;
    end else begin
        v2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        v3_address0 = zext_ln83_fu_723_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        v3_address0 = zext_ln75_reg_874;
    end else begin
        v3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | ((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state58)))) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        v3_we0 = 1'b1;
    end else begin
        v3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        v_address0 = zext_ln65_1_fu_613_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        v_address0 = zext_ln54_reg_750;
    end else begin
        v_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state24))) begin
        v_ce0 = 1'b1;
    end else begin
        v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        v_we0 = 1'b1;
    end else begin
        v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights1_ce0 = 1'b1;
    end else begin
        weights1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        weights2_ce0 = 1'b1;
    end else begin
        weights2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        weights3_ce0 = 1'b1;
    end else begin
        weights3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln46_fu_506_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_506_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln46_fu_506_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_506_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln51_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln53_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_generic_tanh_double_s_fu_447_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln62_fu_581_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln64_fu_601_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((grp_generic_tanh_double_s_fu_447_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln72_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln74_fu_654_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state58 : begin
            if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (icmp_ln81_fu_711_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state58) & (icmp_ln81_fu_711_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TLAST_int = tmp_last_reg_936;

assign M_AXIS_TVALID = regslice_both_M_AXIS_V_data_U_vld_out;

assign add_ln54_1_fu_565_p2 = (phi_mul_reg_346 + 11'd50);

assign add_ln54_fu_571_p2 = (zext_ln53_reg_756 + phi_mul_reg_346);

assign add_ln65_1_fu_618_p2 = (phi_mul2_reg_391 + 12'd50);

assign add_ln65_fu_624_p2 = (zext_ln64_reg_818 + phi_mul2_reg_391);

assign add_ln75_fu_701_p2 = (sub_ln75_fu_695_p2 + zext_ln74_reg_880);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln46_fu_506_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias1_address0 = zext_ln54_reg_750;

assign bias2_address0 = zext_ln65_reg_812;

assign bias3_address0 = zext_ln75_reg_874;

assign grp_generic_tanh_double_s_fu_447_ap_start = grp_generic_tanh_double_s_fu_447_ap_start_reg;

assign i_fu_554_p2 = (i_0_reg_335 + 6'd1);

assign icmp_ln46_fu_506_p2 = ((word_cnt_0_reg_301 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_528_p2 = ((word_cnt_1_reg_312 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_548_p2 = ((i_0_reg_335 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_581_p2 = ((word_cnt_2_reg_357 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_601_p2 = ((x_0_reg_380 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_634_p2 = ((word_cnt_3_reg_402 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_654_p2 = ((x1_0_reg_425 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_711_p2 = ((word_cnt_4_reg_436 == 3'd6) ? 1'b1 : 1'b0);

assign sext_ln75_fu_706_p1 = $signed(add_ln75_fu_701_p2);

assign sub_ln75_fu_695_p2 = (zext_ln75_2_fu_679_p1 - zext_ln75_3_fu_691_p1);

assign tmp_3_fu_671_p3 = {{x1_0_reg_425}, {3'd0}};

assign tmp_8_fu_683_p3 = {{x1_0_reg_425}, {1'd0}};

assign tmp_last_fu_728_p2 = ((word_cnt_4_reg_436 == 3'd5) ? 1'b1 : 1'b0);

assign weights1_address0 = zext_ln54_2_fu_576_p1;

assign weights2_address0 = zext_ln65_2_fu_629_p1;

assign weights3_address0 = sext_ln75_fu_706_p1;

assign word_cnt_5_fu_534_p2 = (word_cnt_1_reg_312 + 6'd1);

assign word_cnt_6_fu_587_p2 = (word_cnt_2_reg_357 + 6'd1);

assign word_cnt_7_fu_717_p2 = (word_cnt_4_reg_436 + 3'd1);

assign word_cnt_8_fu_640_p2 = (word_cnt_3_reg_402 + 3'd1);

assign word_cnt_fu_512_p2 = (word_cnt_0_reg_301 + 6'd1);

assign x_1_fu_660_p2 = (x1_0_reg_425 + 6'd1);

assign x_fu_607_p2 = (x_0_reg_380 + 6'd1);

assign zext_ln48_fu_523_p1 = word_cnt_0_reg_301;

assign zext_ln53_fu_544_p1 = word_cnt_1_reg_312;

assign zext_ln54_1_fu_560_p1 = i_0_reg_335;

assign zext_ln54_2_fu_576_p1 = add_ln54_fu_571_p2;

assign zext_ln54_fu_540_p1 = word_cnt_1_reg_312;

assign zext_ln64_fu_597_p1 = word_cnt_2_reg_357;

assign zext_ln65_1_fu_613_p1 = x_0_reg_380;

assign zext_ln65_2_fu_629_p1 = add_ln65_fu_624_p2;

assign zext_ln65_fu_593_p1 = word_cnt_2_reg_357;

assign zext_ln74_fu_650_p1 = word_cnt_3_reg_402;

assign zext_ln75_1_fu_666_p1 = x1_0_reg_425;

assign zext_ln75_2_fu_679_p1 = tmp_3_fu_671_p3;

assign zext_ln75_3_fu_691_p1 = tmp_8_fu_683_p3;

assign zext_ln75_fu_646_p1 = word_cnt_3_reg_402;

assign zext_ln83_fu_723_p1 = word_cnt_4_reg_436;

always @ (posedge ap_clk) begin
    zext_ln54_reg_750[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln53_reg_756[10:6] <= 5'b00000;
    zext_ln65_reg_812[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln64_reg_818[11:6] <= 6'b000000;
    zext_ln75_reg_874[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln74_reg_880[9:3] <= 7'b0000000;
end

endmodule //myip_v1_0_HLS
