-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myip_v1_0_HLS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TLAST : IN STD_LOGIC;
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TLAST : OUT STD_LOGIC );
end;


architecture behav of myip_v1_0_HLS is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myip_v1_0_HLS,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.327300,HLS_SYN_LAT=44601,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=43,HLS_SYN_FF=6223,HLS_SYN_LUT=9562,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (59 downto 0) := "000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (59 downto 0) := "000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (59 downto 0) := "000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (59 downto 0) := "000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (59 downto 0) := "000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (59 downto 0) := "000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (59 downto 0) := "000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (59 downto 0) := "000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (59 downto 0) := "000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (59 downto 0) := "001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (59 downto 0) := "010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (59 downto 0) := "100000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv11_32 : STD_LOGIC_VECTOR (10 downto 0) := "00000110010";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal weights1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal weights1_ce0 : STD_LOGIC;
    signal weights1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias1_ce0 : STD_LOGIC;
    signal bias1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights2_ce0 : STD_LOGIC;
    signal weights2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias2_ce0 : STD_LOGIC;
    signal bias2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights3_ce0 : STD_LOGIC;
    signal weights3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias3_ce0 : STD_LOGIC;
    signal bias3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln46_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_496 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_generic_tanh_double_s_fu_447_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_generic_tanh_double_s_fu_447_ap_ready : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_447_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal word_cnt_fu_512_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal word_cnt_5_fu_534_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal word_cnt_5_reg_745 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln54_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_750 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln51_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln53_fu_544_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln53_reg_756 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_554_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_764 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln54_1_fu_565_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln54_1_reg_769 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln53_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights1_load_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias1_load_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal word_cnt_6_fu_587_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal word_cnt_6_reg_807 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal zext_ln65_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_reg_812 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln62_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln64_fu_597_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln64_reg_818 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_fu_607_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_reg_826 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln65_1_fu_618_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_1_reg_831 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln64_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights2_load_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_load_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias2_load_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal word_cnt_8_fu_640_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal word_cnt_8_reg_869 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal zext_ln75_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_874 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln72_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln74_fu_650_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln74_reg_880 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_1_fu_660_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_1_reg_888 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal icmp_ln74_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights3_load_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal v2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_load_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias3_load_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal word_cnt_7_fu_717_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal word_cnt_7_reg_926 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal regslice_both_M_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal icmp_ln81_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_936 : STD_LOGIC_VECTOR (0 downto 0);
    signal v3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal v_ce0 : STD_LOGIC;
    signal v_we0 : STD_LOGIC;
    signal v2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal v2_ce0 : STD_LOGIC;
    signal v2_we0 : STD_LOGIC;
    signal v3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal v3_ce0 : STD_LOGIC;
    signal v3_we0 : STD_LOGIC;
    signal input_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_ce0 : STD_LOGIC;
    signal input_we0 : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_447_ap_start : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_447_ap_idle : STD_LOGIC;
    signal word_cnt_0_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal word_cnt_1_reg_312 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal sum_0_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_335 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_346 : STD_LOGIC_VECTOR (10 downto 0);
    signal word_cnt_2_reg_357 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal sum2_0_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_380 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul2_reg_391 : STD_LOGIC_VECTOR (11 downto 0);
    signal word_cnt_3_reg_402 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal sum3_0_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_0_reg_425 : STD_LOGIC_VECTOR (5 downto 0);
    signal word_cnt_4_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_generic_tanh_double_s_fu_447_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal zext_ln48_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_2_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_2_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_1_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln75_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_458_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_466_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal add_ln54_fu_571_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln65_fu_624_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_671_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_683_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln75_2_fu_679_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln75_3_fu_691_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_fu_695_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_fu_701_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_470_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (59 downto 0);
    signal regslice_both_S_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TVALID_int : STD_LOGIC;
    signal S_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_S_AXIS_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_ack_in : STD_LOGIC;
    signal M_AXIS_TVALID_int : STD_LOGIC;
    signal M_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_M_AXIS_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal M_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_vld_out : STD_LOGIC;

    component generic_tanh_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component myip_v1_0_HLS_fadmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_fmuncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_fptocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_fpepcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component myip_v1_0_HLS_weijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_bias1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_weikbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_bias2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_weilbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_bias3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_v IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_v3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    weights1_U : component myip_v1_0_HLS_weijbC
    generic map (
        DataWidth => 32,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights1_address0,
        ce0 => weights1_ce0,
        q0 => weights1_q0);

    bias1_U : component myip_v1_0_HLS_bias1
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias1_address0,
        ce0 => bias1_ce0,
        q0 => bias1_q0);

    weights2_U : component myip_v1_0_HLS_weikbM
    generic map (
        DataWidth => 32,
        AddressRange => 2500,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights2_address0,
        ce0 => weights2_ce0,
        q0 => weights2_q0);

    bias2_U : component myip_v1_0_HLS_bias2
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias2_address0,
        ce0 => bias2_ce0,
        q0 => bias2_q0);

    weights3_U : component myip_v1_0_HLS_weilbW
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights3_address0,
        ce0 => weights3_ce0,
        q0 => weights3_q0);

    bias3_U : component myip_v1_0_HLS_bias3
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias3_address0,
        ce0 => bias3_ce0,
        q0 => bias3_q0);

    v_U : component myip_v1_0_HLS_v
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => v_address0,
        ce0 => v_ce0,
        we0 => v_we0,
        d0 => grp_fu_470_p1,
        q0 => v_q0);

    v2_U : component myip_v1_0_HLS_v
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => v2_address0,
        ce0 => v2_ce0,
        we0 => v2_we0,
        d0 => grp_fu_470_p1,
        q0 => v2_q0);

    v3_U : component myip_v1_0_HLS_v3
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => v3_address0,
        ce0 => v3_ce0,
        we0 => v3_we0,
        d0 => grp_fu_458_p2,
        q0 => v3_q0);

    input_U : component myip_v1_0_HLS_input
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_address0,
        ce0 => input_ce0,
        we0 => input_we0,
        d0 => S_AXIS_TDATA_int,
        q0 => input_q0);

    grp_generic_tanh_double_s_fu_447 : component generic_tanh_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_generic_tanh_double_s_fu_447_ap_start,
        ap_done => grp_generic_tanh_double_s_fu_447_ap_done,
        ap_idle => grp_generic_tanh_double_s_fu_447_ap_idle,
        ap_ready => grp_generic_tanh_double_s_fu_447_ap_ready,
        t_in => reg_496,
        ap_return => grp_generic_tanh_double_s_fu_447_ap_return);

    myip_v1_0_HLS_fadmb6_U16 : component myip_v1_0_HLS_fadmb6
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_458_p0,
        din1 => grp_fu_458_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_458_p2);

    myip_v1_0_HLS_fmuncg_U17 : component myip_v1_0_HLS_fmuncg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_466_p0,
        din1 => grp_fu_466_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_466_p2);

    myip_v1_0_HLS_fptocq_U18 : component myip_v1_0_HLS_fptocq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_generic_tanh_double_s_fu_447_ap_return,
        ce => grp_fu_470_ce,
        dout => grp_fu_470_p1);

    myip_v1_0_HLS_fpepcA_U19 : component myip_v1_0_HLS_fpepcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_491,
        ce => ap_const_logic_1,
        dout => grp_fu_476_p1);

    regslice_both_S_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TDATA,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_S_AXIS_V_data_U_ack_in,
        data_out => S_AXIS_TDATA_int,
        vld_out => S_AXIS_TVALID_int,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_S_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_S_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TLAST,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_w1_S_AXIS_V_last_U_ack_in,
        data_out => S_AXIS_TLAST_int,
        vld_out => regslice_both_w1_S_AXIS_V_last_U_vld_out,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_w1_S_AXIS_V_last_U_apdone_blk);

    regslice_both_M_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => v3_q0,
        vld_in => M_AXIS_TVALID_int,
        ack_in => M_AXIS_TREADY_int,
        data_out => M_AXIS_TDATA,
        vld_out => regslice_both_M_AXIS_V_data_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_M_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => M_AXIS_TLAST_int,
        vld_in => M_AXIS_TVALID_int,
        ack_in => regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy,
        data_out => M_AXIS_TLAST,
        vld_out => regslice_both_w1_M_AXIS_V_last_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_w1_M_AXIS_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_generic_tanh_double_s_fu_447_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_generic_tanh_double_s_fu_447_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    grp_generic_tanh_double_s_fu_447_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_tanh_double_s_fu_447_ap_ready = ap_const_logic_1)) then 
                    grp_generic_tanh_double_s_fu_447_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_reg_335 <= i_reg_764;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln51_fu_528_p2 = ap_const_lv1_0))) then 
                i_0_reg_335 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                phi_mul2_reg_391 <= add_ln65_1_reg_831;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln62_fu_581_p2 = ap_const_lv1_0))) then 
                phi_mul2_reg_391 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                phi_mul_reg_346 <= add_ln54_1_reg_769;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln51_fu_528_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_346 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    sum2_0_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sum2_0_reg_368 <= grp_fu_458_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln62_fu_581_p2 = ap_const_lv1_0))) then 
                sum2_0_reg_368 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum3_0_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                sum3_0_reg_413 <= grp_fu_458_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln72_fu_634_p2 = ap_const_lv1_0))) then 
                sum3_0_reg_413 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_0_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                sum_0_reg_323 <= grp_fu_458_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln51_fu_528_p2 = ap_const_lv1_0))) then 
                sum_0_reg_323 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    word_cnt_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) then 
                word_cnt_0_reg_301 <= word_cnt_fu_512_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                word_cnt_0_reg_301 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    word_cnt_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_506_p2 = ap_const_lv1_1))) then 
                word_cnt_1_reg_312 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                word_cnt_1_reg_312 <= word_cnt_5_reg_745;
            end if; 
        end if;
    end process;

    word_cnt_2_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                word_cnt_2_reg_357 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                word_cnt_2_reg_357 <= word_cnt_6_reg_807;
            end if; 
        end if;
    end process;

    word_cnt_3_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_581_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                word_cnt_3_reg_402 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                word_cnt_3_reg_402 <= word_cnt_8_reg_869;
            end if; 
        end if;
    end process;

    word_cnt_4_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln72_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                word_cnt_4_reg_436 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = M_AXIS_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                word_cnt_4_reg_436 <= word_cnt_7_reg_926;
            end if; 
        end if;
    end process;

    x1_0_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                x1_0_reg_425 <= x_1_reg_888;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln72_fu_634_p2 = ap_const_lv1_0))) then 
                x1_0_reg_425 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    x_0_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                x_0_reg_380 <= x_reg_826;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln62_fu_581_p2 = ap_const_lv1_0))) then 
                x_0_reg_380 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln53_fu_548_p2 = ap_const_lv1_0))) then
                add_ln54_1_reg_769 <= add_ln54_1_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln64_fu_601_p2 = ap_const_lv1_0))) then
                add_ln65_1_reg_831 <= add_ln65_1_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                bias1_load_reg_799 <= bias1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                bias2_load_reg_861 <= bias2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                bias3_load_reg_918 <= bias3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_764 <= i_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_load_reg_794 <= input_q0;
                weights1_load_reg_789 <= weights1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_479 <= grp_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_491 <= grp_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_496 <= grp_fu_476_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58) and (icmp_ln81_fu_711_p2 = ap_const_lv1_0))) then
                tmp_last_reg_936 <= tmp_last_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                v2_load_reg_913 <= v2_q0;
                weights3_load_reg_908 <= weights3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                v_load_reg_856 <= v_q0;
                weights2_load_reg_851 <= weights2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                word_cnt_5_reg_745 <= word_cnt_5_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                word_cnt_6_reg_807 <= word_cnt_6_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                word_cnt_7_reg_926 <= word_cnt_7_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                word_cnt_8_reg_869 <= word_cnt_8_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                x_1_reg_888 <= x_1_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                x_reg_826 <= x_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln51_fu_528_p2 = ap_const_lv1_0))) then
                    zext_ln53_reg_756(5 downto 0) <= zext_ln53_fu_544_p1(5 downto 0);
                    zext_ln54_reg_750(5 downto 0) <= zext_ln54_fu_540_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln62_fu_581_p2 = ap_const_lv1_0))) then
                    zext_ln64_reg_818(5 downto 0) <= zext_ln64_fu_597_p1(5 downto 0);
                    zext_ln65_reg_812(5 downto 0) <= zext_ln65_fu_593_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln72_fu_634_p2 = ap_const_lv1_0))) then
                    zext_ln74_reg_880(2 downto 0) <= zext_ln74_fu_650_p1(2 downto 0);
                    zext_ln75_reg_874(2 downto 0) <= zext_ln75_fu_646_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln54_reg_750(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln53_reg_756(10 downto 6) <= "00000";
    zext_ln65_reg_812(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln64_reg_818(11 downto 6) <= "000000";
    zext_ln75_reg_874(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln74_reg_880(9 downto 3) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, icmp_ln46_fu_506_p2, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state21, grp_generic_tanh_double_s_fu_447_ap_done, ap_CS_fsm_state41, ap_CS_fsm_state3, icmp_ln51_fu_528_p2, ap_CS_fsm_state4, icmp_ln53_fu_548_p2, ap_CS_fsm_state23, icmp_ln62_fu_581_p2, ap_CS_fsm_state24, icmp_ln64_fu_601_p2, ap_CS_fsm_state43, icmp_ln72_fu_634_p2, ap_CS_fsm_state44, icmp_ln74_fu_654_p2, ap_CS_fsm_state58, regslice_both_M_AXIS_V_data_U_apdone_blk, icmp_ln81_fu_711_p2, S_AXIS_TVALID_int, M_AXIS_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_506_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln51_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln53_fu_548_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_generic_tanh_double_s_fu_447_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln62_fu_581_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln64_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_generic_tanh_double_s_fu_447_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln72_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln74_fu_654_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state58 => 
                if (((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (icmp_ln81_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58) and (icmp_ln81_fu_711_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = M_AXIS_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = M_AXIS_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    M_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state60, M_AXIS_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_TREADY_int;
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TLAST_int <= tmp_last_reg_936(0);
    M_AXIS_TVALID <= regslice_both_M_AXIS_V_data_U_vld_out;

    M_AXIS_TVALID_int_assign_proc : process(ap_CS_fsm_state59, M_AXIS_TREADY_int)
    begin
        if (((ap_const_logic_1 = M_AXIS_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            M_AXIS_TVALID_int <= ap_const_logic_1;
        else 
            M_AXIS_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln46_fu_506_p2, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_TVALID_int;
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    S_AXIS_TREADY_assign_proc : process(S_AXIS_TVALID, regslice_both_S_AXIS_V_data_U_ack_in)
    begin
        if (((regslice_both_S_AXIS_V_data_U_ack_in = ap_const_logic_1) and (ap_const_logic_1 = S_AXIS_TVALID))) then 
            S_AXIS_TREADY <= ap_const_logic_1;
        else 
            S_AXIS_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln46_fu_506_p2, S_AXIS_TVALID_int)
    begin
        if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) then 
            S_AXIS_TREADY_int <= ap_const_logic_1;
        else 
            S_AXIS_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_1_fu_565_p2 <= std_logic_vector(unsigned(phi_mul_reg_346) + unsigned(ap_const_lv11_32));
    add_ln54_fu_571_p2 <= std_logic_vector(unsigned(zext_ln53_reg_756) + unsigned(phi_mul_reg_346));
    add_ln65_1_fu_618_p2 <= std_logic_vector(unsigned(phi_mul2_reg_391) + unsigned(ap_const_lv12_32));
    add_ln65_fu_624_p2 <= std_logic_vector(unsigned(zext_ln64_reg_818) + unsigned(phi_mul2_reg_391));
    add_ln75_fu_701_p2 <= std_logic_vector(unsigned(sub_ln75_fu_695_p2) + unsigned(zext_ln74_reg_880));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(icmp_ln46_fu_506_p2, S_AXIS_TVALID_int)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bias1_address0 <= zext_ln54_reg_750(6 - 1 downto 0);

    bias1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias1_ce0 <= ap_const_logic_1;
        else 
            bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias2_address0 <= zext_ln65_reg_812(6 - 1 downto 0);

    bias2_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            bias2_ce0 <= ap_const_logic_1;
        else 
            bias2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias3_address0 <= zext_ln75_reg_874(3 - 1 downto 0);

    bias3_ce0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            bias3_ce0 <= ap_const_logic_1;
        else 
            bias3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_458_p0_assign_proc : process(sum_0_reg_323, sum2_0_reg_368, sum3_0_reg_413, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state49, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            grp_fu_458_p0 <= sum3_0_reg_413;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_458_p0 <= sum2_0_reg_368;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_458_p0 <= sum_0_reg_323;
        else 
            grp_fu_458_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_458_p1_assign_proc : process(reg_479, bias1_load_reg_799, bias2_load_reg_861, bias3_load_reg_918, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state49, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_458_p1 <= bias3_load_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_458_p1 <= bias2_load_reg_861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_458_p1 <= bias1_load_reg_799;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_458_p1 <= reg_479;
        else 
            grp_fu_458_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_466_p0_assign_proc : process(weights1_load_reg_789, weights2_load_reg_851, weights3_load_reg_908, ap_CS_fsm_state6, ap_CS_fsm_state26, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_466_p0 <= weights3_load_reg_908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_466_p0 <= weights2_load_reg_851;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_466_p0 <= weights1_load_reg_789;
        else 
            grp_fu_466_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_466_p1_assign_proc : process(input_load_reg_794, v_load_reg_856, v2_load_reg_913, ap_CS_fsm_state6, ap_CS_fsm_state26, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_466_p1 <= v2_load_reg_913;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_466_p1 <= v_load_reg_856;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_466_p1 <= input_load_reg_794;
        else 
            grp_fu_466_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_470_ce_assign_proc : process(ap_CS_fsm_state21, grp_generic_tanh_double_s_fu_447_ap_done, ap_CS_fsm_state41, ap_CS_fsm_state22, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((grp_generic_tanh_double_s_fu_447_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_generic_tanh_double_s_fu_447_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_470_ce <= ap_const_logic_1;
        else 
            grp_fu_470_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_generic_tanh_double_s_fu_447_ap_start <= grp_generic_tanh_double_s_fu_447_ap_start_reg;
    i_fu_554_p2 <= std_logic_vector(unsigned(i_0_reg_335) + unsigned(ap_const_lv6_1));
    icmp_ln46_fu_506_p2 <= "1" when (word_cnt_0_reg_301 = ap_const_lv6_24) else "0";
    icmp_ln51_fu_528_p2 <= "1" when (word_cnt_1_reg_312 = ap_const_lv6_32) else "0";
    icmp_ln53_fu_548_p2 <= "1" when (i_0_reg_335 = ap_const_lv6_24) else "0";
    icmp_ln62_fu_581_p2 <= "1" when (word_cnt_2_reg_357 = ap_const_lv6_32) else "0";
    icmp_ln64_fu_601_p2 <= "1" when (x_0_reg_380 = ap_const_lv6_32) else "0";
    icmp_ln72_fu_634_p2 <= "1" when (word_cnt_3_reg_402 = ap_const_lv3_6) else "0";
    icmp_ln74_fu_654_p2 <= "1" when (x1_0_reg_425 = ap_const_lv6_32) else "0";
    icmp_ln81_fu_711_p2 <= "1" when (word_cnt_4_reg_436 = ap_const_lv3_6) else "0";

    input_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln48_fu_523_p1, zext_ln54_1_fu_560_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_address0 <= zext_ln54_1_fu_560_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_address0 <= zext_ln48_fu_523_p1(6 - 1 downto 0);
        else 
            input_address0 <= "XXXXXX";
        end if; 
    end process;


    input_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln46_fu_506_p2, ap_CS_fsm_state4, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            input_ce0 <= ap_const_logic_1;
        else 
            input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln46_fu_506_p2, S_AXIS_TVALID_int)
    begin
        if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_506_p2 = ap_const_lv1_0))) then 
            input_we0 <= ap_const_logic_1;
        else 
            input_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln75_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln75_fu_701_p2),64));

    sub_ln75_fu_695_p2 <= std_logic_vector(unsigned(zext_ln75_2_fu_679_p1) - unsigned(zext_ln75_3_fu_691_p1));
    tmp_3_fu_671_p3 <= (x1_0_reg_425 & ap_const_lv3_0);
    tmp_8_fu_683_p3 <= (x1_0_reg_425 & ap_const_lv1_0);
    tmp_last_fu_728_p2 <= "1" when (word_cnt_4_reg_436 = ap_const_lv3_5) else "0";

    v2_address0_assign_proc : process(zext_ln65_reg_812, ap_CS_fsm_state44, ap_CS_fsm_state42, zext_ln75_1_fu_666_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            v2_address0 <= zext_ln75_1_fu_666_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            v2_address0 <= zext_ln65_reg_812(6 - 1 downto 0);
        else 
            v2_address0 <= "XXXXXX";
        end if; 
    end process;


    v2_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            v2_ce0 <= ap_const_logic_1;
        else 
            v2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v2_we0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            v2_we0 <= ap_const_logic_1;
        else 
            v2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v3_address0_assign_proc : process(zext_ln75_reg_874, ap_CS_fsm_state58, ap_CS_fsm_state57, zext_ln83_fu_723_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            v3_address0 <= zext_ln83_fu_723_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            v3_address0 <= zext_ln75_reg_874(3 - 1 downto 0);
        else 
            v3_address0 <= "XXX";
        end if; 
    end process;


    v3_ce0_assign_proc : process(ap_CS_fsm_state58, regslice_both_M_AXIS_V_data_U_apdone_blk, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or ((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
            v3_ce0 <= ap_const_logic_1;
        else 
            v3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v3_we0_assign_proc : process(ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            v3_we0 <= ap_const_logic_1;
        else 
            v3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_address0_assign_proc : process(zext_ln54_reg_750, ap_CS_fsm_state24, ap_CS_fsm_state22, zext_ln65_1_fu_613_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            v_address0 <= zext_ln65_1_fu_613_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            v_address0 <= zext_ln54_reg_750(6 - 1 downto 0);
        else 
            v_address0 <= "XXXXXX";
        end if; 
    end process;


    v_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            v_ce0 <= ap_const_logic_1;
        else 
            v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            v_we0 <= ap_const_logic_1;
        else 
            v_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_address0 <= zext_ln54_2_fu_576_p1(11 - 1 downto 0);

    weights1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights1_ce0 <= ap_const_logic_1;
        else 
            weights1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights2_address0 <= zext_ln65_2_fu_629_p1(12 - 1 downto 0);

    weights2_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            weights2_ce0 <= ap_const_logic_1;
        else 
            weights2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights3_address0 <= sext_ln75_fu_706_p1(9 - 1 downto 0);

    weights3_ce0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            weights3_ce0 <= ap_const_logic_1;
        else 
            weights3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    word_cnt_5_fu_534_p2 <= std_logic_vector(unsigned(word_cnt_1_reg_312) + unsigned(ap_const_lv6_1));
    word_cnt_6_fu_587_p2 <= std_logic_vector(unsigned(word_cnt_2_reg_357) + unsigned(ap_const_lv6_1));
    word_cnt_7_fu_717_p2 <= std_logic_vector(unsigned(word_cnt_4_reg_436) + unsigned(ap_const_lv3_1));
    word_cnt_8_fu_640_p2 <= std_logic_vector(unsigned(word_cnt_3_reg_402) + unsigned(ap_const_lv3_1));
    word_cnt_fu_512_p2 <= std_logic_vector(unsigned(word_cnt_0_reg_301) + unsigned(ap_const_lv6_1));
    x_1_fu_660_p2 <= std_logic_vector(unsigned(x1_0_reg_425) + unsigned(ap_const_lv6_1));
    x_fu_607_p2 <= std_logic_vector(unsigned(x_0_reg_380) + unsigned(ap_const_lv6_1));
    zext_ln48_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_0_reg_301),64));
    zext_ln53_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_1_reg_312),11));
    zext_ln54_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_335),64));
    zext_ln54_2_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_571_p2),64));
    zext_ln54_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_1_reg_312),64));
    zext_ln64_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_2_reg_357),12));
    zext_ln65_1_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_380),64));
    zext_ln65_2_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_fu_624_p2),64));
    zext_ln65_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_2_reg_357),64));
    zext_ln74_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_3_reg_402),10));
    zext_ln75_1_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_0_reg_425),64));
    zext_ln75_2_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_671_p3),10));
    zext_ln75_3_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_683_p3),10));
    zext_ln75_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_3_reg_402),64));
    zext_ln83_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_4_reg_436),64));
end behav;
