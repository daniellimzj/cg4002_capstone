-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myip_v1_0_HLS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TLAST : IN STD_LOGIC;
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TLAST : OUT STD_LOGIC );
end;


architecture behav of myip_v1_0_HLS is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myip_v1_0_HLS,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.286000,HLS_SYN_LAT=2047,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1059,HLS_SYN_LUT=1152,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal weights1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights1_ce0 : STD_LOGIC;
    signal weights1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias1_ce0 : STD_LOGIC;
    signal bias1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights2_ce0 : STD_LOGIC;
    signal weights2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias2_ce0 : STD_LOGIC;
    signal bias2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln43_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal word_cnt_fu_369_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal word_cnt_4_fu_391_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal word_cnt_4_reg_663 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln51_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_reg_668 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln48_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_fu_401_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_reg_674 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_411_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_682 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln50_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights1_load_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias1_load_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal word_cnt_6_fu_511_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal word_cnt_6_reg_720 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln67_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_725 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln64_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln66_fu_521_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln66_reg_731 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_fu_531_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_739 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln66_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights2_load_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_load_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias2_load_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal word_cnt_5_fu_635_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal word_cnt_5_reg_777 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal regslice_both_M_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal icmp_ln82_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_787 : STD_LOGIC_VECTOR (0 downto 0);
    signal v2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal v_ce0 : STD_LOGIC;
    signal v_we0 : STD_LOGIC;
    signal v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal v2_ce0 : STD_LOGIC;
    signal v2_we0 : STD_LOGIC;
    signal v2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_ce0 : STD_LOGIC;
    signal input_we0 : STD_LOGIC;
    signal word_cnt_0_reg_242 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal word_cnt_1_reg_253 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal sum_0_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_276 : STD_LOGIC_VECTOR (5 downto 0);
    signal word_cnt_2_reg_287 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal sum2_0_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_310 : STD_LOGIC_VECTOR (2 downto 0);
    signal word_cnt_3_reg_321 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln45_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_4_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_1_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln67_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_1_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_7_fu_426_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_2_fu_422_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln51_3_fu_434_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln51_fu_438_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln51_1_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln56_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_458_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln56_fu_468_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln56_1_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_550_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_542_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln67_2_fu_558_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln67_fu_562_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln67_fu_568_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln72_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_582_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_fu_592_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln72_1_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal regslice_both_S_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TVALID_int : STD_LOGIC;
    signal S_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_S_AXIS_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_ack_in : STD_LOGIC;
    signal M_AXIS_TVALID_int : STD_LOGIC;
    signal M_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_M_AXIS_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal M_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_vld_out : STD_LOGIC;

    component myip_v1_0_HLS_faddEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_fmueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_fcmfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component myip_v1_0_HLS_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_bias1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_bias2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_v IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_v2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myip_v1_0_HLS_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    weights1_U : component myip_v1_0_HLS_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 180,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights1_address0,
        ce0 => weights1_ce0,
        q0 => weights1_q0);

    bias1_U : component myip_v1_0_HLS_bias1
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias1_address0,
        ce0 => bias1_ce0,
        q0 => bias1_q0);

    weights2_U : component myip_v1_0_HLS_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights2_address0,
        ce0 => weights2_ce0,
        q0 => weights2_q0);

    bias2_U : component myip_v1_0_HLS_bias2
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias2_address0,
        ce0 => bias2_ce0,
        q0 => bias2_q0);

    v_U : component myip_v1_0_HLS_v
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => v_address0,
        ce0 => v_ce0,
        we0 => v_we0,
        d0 => v_d0,
        q0 => v_q0);

    v2_U : component myip_v1_0_HLS_v2
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => v2_address0,
        ce0 => v2_ce0,
        we0 => v2_we0,
        d0 => v2_d0,
        q0 => v2_q0);

    input_U : component myip_v1_0_HLS_input
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_address0,
        ce0 => input_ce0,
        we0 => input_we0,
        d0 => S_AXIS_TDATA_int,
        q0 => input_q0);

    myip_v1_0_HLS_faddEe_U1 : component myip_v1_0_HLS_faddEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_332_p0,
        din1 => grp_fu_332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    myip_v1_0_HLS_fmueOg_U2 : component myip_v1_0_HLS_fmueOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_338_p0,
        din1 => grp_fu_338_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_338_p2);

    myip_v1_0_HLS_fcmfYi_U3 : component myip_v1_0_HLS_fcmfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_358,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_342_p2);

    regslice_both_S_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TDATA,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_S_AXIS_V_data_U_ack_in,
        data_out => S_AXIS_TDATA_int,
        vld_out => S_AXIS_TVALID_int,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_S_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_S_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TLAST,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_w1_S_AXIS_V_last_U_ack_in,
        data_out => S_AXIS_TLAST_int,
        vld_out => regslice_both_w1_S_AXIS_V_last_U_vld_out,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_w1_S_AXIS_V_last_U_apdone_blk);

    regslice_both_M_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => v2_q0,
        vld_in => M_AXIS_TVALID_int,
        ack_in => M_AXIS_TREADY_int,
        data_out => M_AXIS_TDATA,
        vld_out => regslice_both_M_AXIS_V_data_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_M_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => M_AXIS_TLAST_int,
        vld_in => M_AXIS_TVALID_int,
        ack_in => regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy,
        data_out => M_AXIS_TLAST,
        vld_out => regslice_both_w1_M_AXIS_V_last_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_w1_M_AXIS_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_reg_276 <= i_reg_682;
            elsif (((icmp_ln48_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_276 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    sum2_0_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                sum2_0_reg_298 <= grp_fu_332_p2;
            elsif (((icmp_ln64_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                sum2_0_reg_298 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_0_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                sum_0_reg_264 <= grp_fu_332_p2;
            elsif (((icmp_ln48_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_0_reg_264 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    word_cnt_0_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                word_cnt_0_reg_242 <= word_cnt_fu_369_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                word_cnt_0_reg_242 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    word_cnt_1_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln43_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                word_cnt_1_reg_253 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                word_cnt_1_reg_253 <= word_cnt_4_reg_663;
            end if; 
        end if;
    end process;

    word_cnt_2_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln48_fu_385_p2 = ap_const_lv1_1))) then 
                word_cnt_2_reg_287 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                word_cnt_2_reg_287 <= word_cnt_6_reg_720;
            end if; 
        end if;
    end process;

    word_cnt_3_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln64_fu_505_p2 = ap_const_lv1_1))) then 
                word_cnt_3_reg_321 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = M_AXIS_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                word_cnt_3_reg_321 <= word_cnt_5_reg_777;
            end if; 
        end if;
    end process;

    x_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                x_0_reg_310 <= x_reg_739;
            elsif (((icmp_ln64_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                x_0_reg_310 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                bias1_load_reg_712 <= bias1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                bias2_load_reg_769 <= bias2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_682 <= i_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_load_reg_707 <= input_q0;
                weights1_load_reg_702 <= weights1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_347 <= grp_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_358 <= grp_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_629_p2 = ap_const_lv1_0) and (regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                tmp_last_reg_787 <= tmp_last_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                v_load_reg_764 <= v_q0;
                weights2_load_reg_759 <= weights2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                word_cnt_4_reg_663 <= word_cnt_4_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                word_cnt_5_reg_777 <= word_cnt_5_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                word_cnt_6_reg_720 <= word_cnt_6_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                x_reg_739 <= x_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln50_reg_674(2 downto 0) <= zext_ln50_fu_401_p1(2 downto 0);
                    zext_ln51_reg_668(2 downto 0) <= zext_ln51_fu_397_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    zext_ln66_reg_731(2 downto 0) <= zext_ln66_fu_521_p1(2 downto 0);
                    zext_ln67_reg_725(2 downto 0) <= zext_ln67_fu_517_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln51_reg_668(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln50_reg_674(8 downto 3) <= "000000";
    zext_ln67_reg_725(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln66_reg_731(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, icmp_ln43_fu_363_p2, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state3, icmp_ln48_fu_385_p2, ap_CS_fsm_state4, icmp_ln50_fu_405_p2, ap_CS_fsm_state20, icmp_ln64_fu_505_p2, ap_CS_fsm_state21, icmp_ln66_fu_525_p2, ap_CS_fsm_state37, regslice_both_M_AXIS_V_data_U_apdone_blk, icmp_ln82_fu_629_p2, S_AXIS_TVALID_int, M_AXIS_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln43_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln48_fu_385_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln50_fu_405_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln64_fu_505_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln66_fu_525_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state37 => 
                if (((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln82_fu_629_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln82_fu_629_p2 = ap_const_lv1_0) and (regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = M_AXIS_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = M_AXIS_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    M_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, M_AXIS_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_TREADY_int;
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TLAST_int <= tmp_last_reg_787(0);
    M_AXIS_TVALID <= regslice_both_M_AXIS_V_data_U_vld_out;

    M_AXIS_TVALID_int_assign_proc : process(ap_CS_fsm_state38, M_AXIS_TREADY_int)
    begin
        if (((ap_const_logic_1 = M_AXIS_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            M_AXIS_TVALID_int <= ap_const_logic_1;
        else 
            M_AXIS_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln43_fu_363_p2, S_AXIS_TVALID_int)
    begin
        if (((icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_TVALID_int;
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    S_AXIS_TREADY_assign_proc : process(S_AXIS_TVALID, regslice_both_S_AXIS_V_data_U_ack_in)
    begin
        if (((regslice_both_S_AXIS_V_data_U_ack_in = ap_const_logic_1) and (ap_const_logic_1 = S_AXIS_TVALID))) then 
            S_AXIS_TREADY <= ap_const_logic_1;
        else 
            S_AXIS_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln43_fu_363_p2, S_AXIS_TVALID_int)
    begin
        if ((not(((icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            S_AXIS_TREADY_int <= ap_const_logic_1;
        else 
            S_AXIS_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    add_ln51_1_fu_444_p2 <= std_logic_vector(unsigned(add_ln51_fu_438_p2) + unsigned(zext_ln50_reg_674));
    add_ln51_fu_438_p2 <= std_logic_vector(unsigned(zext_ln51_2_fu_422_p1) + unsigned(zext_ln51_3_fu_434_p1));
    add_ln67_fu_568_p2 <= std_logic_vector(unsigned(sub_ln67_fu_562_p2) + unsigned(zext_ln66_reg_731));
    and_ln56_fu_490_p2 <= (or_ln56_fu_484_p2 and grp_fu_342_p2);
    and_ln72_fu_614_p2 <= (or_ln72_fu_608_p2 and grp_fu_342_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(icmp_ln43_fu_363_p2, S_AXIS_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bias1_address0 <= zext_ln51_reg_668(3 - 1 downto 0);

    bias1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias1_ce0 <= ap_const_logic_1;
        else 
            bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias2_address0 <= zext_ln67_reg_725(3 - 1 downto 0);

    bias2_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            bias2_ce0 <= ap_const_logic_1;
        else 
            bias2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln56_fu_454_p1 <= reg_358;
    bitcast_ln72_fu_578_p1 <= reg_358;

    grp_fu_332_p0_assign_proc : process(sum_0_reg_264, sum2_0_reg_298, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state26, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_332_p0 <= sum2_0_reg_298;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_332_p0 <= sum_0_reg_264;
        else 
            grp_fu_332_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_332_p1_assign_proc : process(reg_347, bias1_load_reg_712, bias2_load_reg_769, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state26, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_332_p1 <= bias2_load_reg_769;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_332_p1 <= bias1_load_reg_712;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_332_p1 <= reg_347;
        else 
            grp_fu_332_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p0_assign_proc : process(weights1_load_reg_702, weights2_load_reg_759, ap_CS_fsm_state6, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_338_p0 <= weights2_load_reg_759;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_338_p0 <= weights1_load_reg_702;
        else 
            grp_fu_338_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p1_assign_proc : process(input_load_reg_707, v_load_reg_764, ap_CS_fsm_state6, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_338_p1 <= v_load_reg_764;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_338_p1 <= input_load_reg_707;
        else 
            grp_fu_338_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_411_p2 <= std_logic_vector(unsigned(i_0_reg_276) + unsigned(ap_const_lv6_1));
    icmp_ln43_fu_363_p2 <= "1" when (word_cnt_0_reg_242 = ap_const_lv6_24) else "0";
    icmp_ln48_fu_385_p2 <= "1" when (word_cnt_1_reg_253 = ap_const_lv3_5) else "0";
    icmp_ln50_fu_405_p2 <= "1" when (i_0_reg_276 = ap_const_lv6_24) else "0";
    icmp_ln56_1_fu_478_p2 <= "1" when (trunc_ln56_fu_468_p1 = ap_const_lv23_0) else "0";
    icmp_ln56_fu_472_p2 <= "0" when (tmp_2_fu_458_p4 = ap_const_lv8_FF) else "1";
    icmp_ln64_fu_505_p2 <= "1" when (word_cnt_2_reg_287 = ap_const_lv3_6) else "0";
    icmp_ln66_fu_525_p2 <= "1" when (x_0_reg_310 = ap_const_lv3_5) else "0";
    icmp_ln72_1_fu_602_p2 <= "1" when (trunc_ln72_fu_592_p1 = ap_const_lv23_0) else "0";
    icmp_ln72_fu_596_p2 <= "0" when (tmp_5_fu_582_p4 = ap_const_lv8_FF) else "1";
    icmp_ln82_fu_629_p2 <= "1" when (word_cnt_3_reg_321 = ap_const_lv3_6) else "0";

    input_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln45_fu_380_p1, zext_ln51_1_fu_417_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_address0 <= zext_ln51_1_fu_417_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_address0 <= zext_ln45_fu_380_p1(6 - 1 downto 0);
        else 
            input_address0 <= "XXXXXX";
        end if; 
    end process;


    input_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln43_fu_363_p2, ap_CS_fsm_state4, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            input_ce0 <= ap_const_logic_1;
        else 
            input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln43_fu_363_p2, S_AXIS_TVALID_int)
    begin
        if ((not(((icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln43_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_we0 <= ap_const_logic_1;
        else 
            input_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln56_fu_484_p2 <= (icmp_ln56_fu_472_p2 or icmp_ln56_1_fu_478_p2);
    or_ln72_fu_608_p2 <= (icmp_ln72_fu_596_p2 or icmp_ln72_1_fu_602_p2);
        sext_ln67_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_fu_568_p2),64));

    sub_ln67_fu_562_p2 <= std_logic_vector(unsigned(tmp_9_fu_542_p3) - unsigned(zext_ln67_2_fu_558_p1));
    tmp_2_fu_458_p4 <= bitcast_ln56_fu_454_p1(30 downto 23);
    tmp_5_fu_582_p4 <= bitcast_ln72_fu_578_p1(30 downto 23);
    tmp_7_fu_426_p3 <= (i_0_reg_276 & ap_const_lv2_0);
    tmp_9_fu_542_p3 <= (x_0_reg_310 & ap_const_lv3_0);
    tmp_last_fu_646_p2 <= "1" when (word_cnt_3_reg_321 = ap_const_lv3_5) else "0";
    tmp_s_fu_550_p3 <= (x_0_reg_310 & ap_const_lv1_0);
    trunc_ln56_fu_468_p1 <= bitcast_ln56_fu_454_p1(23 - 1 downto 0);
    trunc_ln72_fu_592_p1 <= bitcast_ln72_fu_578_p1(23 - 1 downto 0);

    v2_address0_assign_proc : process(zext_ln67_reg_725, ap_CS_fsm_state37, ap_CS_fsm_state36, zext_ln84_fu_641_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            v2_address0 <= zext_ln84_fu_641_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            v2_address0 <= zext_ln67_reg_725(3 - 1 downto 0);
        else 
            v2_address0 <= "XXX";
        end if; 
    end process;


    v2_ce0_assign_proc : process(ap_CS_fsm_state37, regslice_both_M_AXIS_V_data_U_apdone_blk, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or ((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            v2_ce0 <= ap_const_logic_1;
        else 
            v2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_d0 <= 
        ap_const_lv32_0 when (and_ln72_fu_614_p2(0) = '1') else 
        reg_358;

    v2_we0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            v2_we0 <= ap_const_logic_1;
        else 
            v2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_address0_assign_proc : process(zext_ln51_reg_668, ap_CS_fsm_state21, ap_CS_fsm_state19, zext_ln67_1_fu_537_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            v_address0 <= zext_ln67_1_fu_537_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            v_address0 <= zext_ln51_reg_668(3 - 1 downto 0);
        else 
            v_address0 <= "XXX";
        end if; 
    end process;


    v_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            v_ce0 <= ap_const_logic_1;
        else 
            v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v_d0 <= 
        ap_const_lv32_0 when (and_ln56_fu_490_p2(0) = '1') else 
        reg_358;

    v_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            v_we0 <= ap_const_logic_1;
        else 
            v_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_address0 <= zext_ln51_4_fu_449_p1(8 - 1 downto 0);

    weights1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights1_ce0 <= ap_const_logic_1;
        else 
            weights1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights2_address0 <= sext_ln67_fu_573_p1(5 - 1 downto 0);

    weights2_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            weights2_ce0 <= ap_const_logic_1;
        else 
            weights2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    word_cnt_4_fu_391_p2 <= std_logic_vector(unsigned(word_cnt_1_reg_253) + unsigned(ap_const_lv3_1));
    word_cnt_5_fu_635_p2 <= std_logic_vector(unsigned(word_cnt_3_reg_321) + unsigned(ap_const_lv3_1));
    word_cnt_6_fu_511_p2 <= std_logic_vector(unsigned(word_cnt_2_reg_287) + unsigned(ap_const_lv3_1));
    word_cnt_fu_369_p2 <= std_logic_vector(unsigned(word_cnt_0_reg_242) + unsigned(ap_const_lv6_1));
    x_fu_531_p2 <= std_logic_vector(unsigned(x_0_reg_310) + unsigned(ap_const_lv3_1));
    zext_ln45_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_0_reg_242),64));
    zext_ln50_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_1_reg_253),9));
    zext_ln51_1_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_276),64));
    zext_ln51_2_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_276),9));
    zext_ln51_3_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_426_p3),9));
    zext_ln51_4_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_1_fu_444_p2),64));
    zext_ln51_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_1_reg_253),64));
    zext_ln66_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_2_reg_287),6));
    zext_ln67_1_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_310),64));
    zext_ln67_2_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_550_p3),6));
    zext_ln67_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_2_reg_287),64));
    zext_ln84_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_cnt_3_reg_321),64));
end behav;
