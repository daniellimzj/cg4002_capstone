// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generic_tanh_double_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_in,
        ap_return
);

parameter    ap_ST_fsm_state1 = 88'd1;
parameter    ap_ST_fsm_state2 = 88'd2;
parameter    ap_ST_fsm_state3 = 88'd4;
parameter    ap_ST_fsm_state4 = 88'd8;
parameter    ap_ST_fsm_state5 = 88'd16;
parameter    ap_ST_fsm_state6 = 88'd32;
parameter    ap_ST_fsm_state7 = 88'd64;
parameter    ap_ST_fsm_state8 = 88'd128;
parameter    ap_ST_fsm_state9 = 88'd256;
parameter    ap_ST_fsm_state10 = 88'd512;
parameter    ap_ST_fsm_state11 = 88'd1024;
parameter    ap_ST_fsm_state12 = 88'd2048;
parameter    ap_ST_fsm_state13 = 88'd4096;
parameter    ap_ST_fsm_state14 = 88'd8192;
parameter    ap_ST_fsm_state15 = 88'd16384;
parameter    ap_ST_fsm_state16 = 88'd32768;
parameter    ap_ST_fsm_state17 = 88'd65536;
parameter    ap_ST_fsm_state18 = 88'd131072;
parameter    ap_ST_fsm_state19 = 88'd262144;
parameter    ap_ST_fsm_state20 = 88'd524288;
parameter    ap_ST_fsm_state21 = 88'd1048576;
parameter    ap_ST_fsm_state22 = 88'd2097152;
parameter    ap_ST_fsm_state23 = 88'd4194304;
parameter    ap_ST_fsm_state24 = 88'd8388608;
parameter    ap_ST_fsm_state25 = 88'd16777216;
parameter    ap_ST_fsm_state26 = 88'd33554432;
parameter    ap_ST_fsm_state27 = 88'd67108864;
parameter    ap_ST_fsm_state28 = 88'd134217728;
parameter    ap_ST_fsm_state29 = 88'd268435456;
parameter    ap_ST_fsm_state30 = 88'd536870912;
parameter    ap_ST_fsm_state31 = 88'd1073741824;
parameter    ap_ST_fsm_state32 = 88'd2147483648;
parameter    ap_ST_fsm_state33 = 88'd4294967296;
parameter    ap_ST_fsm_state34 = 88'd8589934592;
parameter    ap_ST_fsm_state35 = 88'd17179869184;
parameter    ap_ST_fsm_state36 = 88'd34359738368;
parameter    ap_ST_fsm_state37 = 88'd68719476736;
parameter    ap_ST_fsm_state38 = 88'd137438953472;
parameter    ap_ST_fsm_state39 = 88'd274877906944;
parameter    ap_ST_fsm_state40 = 88'd549755813888;
parameter    ap_ST_fsm_state41 = 88'd1099511627776;
parameter    ap_ST_fsm_state42 = 88'd2199023255552;
parameter    ap_ST_fsm_state43 = 88'd4398046511104;
parameter    ap_ST_fsm_state44 = 88'd8796093022208;
parameter    ap_ST_fsm_state45 = 88'd17592186044416;
parameter    ap_ST_fsm_state46 = 88'd35184372088832;
parameter    ap_ST_fsm_state47 = 88'd70368744177664;
parameter    ap_ST_fsm_state48 = 88'd140737488355328;
parameter    ap_ST_fsm_state49 = 88'd281474976710656;
parameter    ap_ST_fsm_state50 = 88'd562949953421312;
parameter    ap_ST_fsm_state51 = 88'd1125899906842624;
parameter    ap_ST_fsm_state52 = 88'd2251799813685248;
parameter    ap_ST_fsm_state53 = 88'd4503599627370496;
parameter    ap_ST_fsm_state54 = 88'd9007199254740992;
parameter    ap_ST_fsm_state55 = 88'd18014398509481984;
parameter    ap_ST_fsm_state56 = 88'd36028797018963968;
parameter    ap_ST_fsm_state57 = 88'd72057594037927936;
parameter    ap_ST_fsm_state58 = 88'd144115188075855872;
parameter    ap_ST_fsm_state59 = 88'd288230376151711744;
parameter    ap_ST_fsm_state60 = 88'd576460752303423488;
parameter    ap_ST_fsm_state61 = 88'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 88'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 88'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 88'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 88'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 88'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 88'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 88'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 88'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 88'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 88'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 88'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 88'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 88'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 88'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 88'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 88'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 88'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 88'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 88'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 88'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 88'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 88'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 88'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 88'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 88'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 88'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 88'd154742504910672534362390528;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] t_in;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [87:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_98_p2;
reg   [63:0] reg_132;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state82;
wire   [63:0] grp_fu_112_p2;
reg   [63:0] reg_140;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state77;
reg   [0:0] p_Result_s_reg_328;
wire   [10:0] tmp_V_fu_158_p4;
reg   [10:0] tmp_V_reg_333;
wire   [63:0] p_Result_8_fu_177_p3;
reg   [63:0] p_Result_8_reg_338;
wire   [63:0] abst_in_fu_185_p1;
reg   [63:0] abst_in_reg_343;
wire   [0:0] icmp_ln833_fu_191_p2;
reg   [0:0] icmp_ln833_reg_351;
wire   [0:0] icmp_ln849_fu_197_p2;
reg   [0:0] icmp_ln849_reg_355;
wire   [0:0] and_ln75_fu_209_p2;
reg   [0:0] and_ln75_reg_359;
wire   [63:0] select_ln67_fu_215_p3;
wire   [0:0] grp_fu_117_p2;
reg   [0:0] tmp_4_reg_368;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln849_1_fu_223_p2;
reg   [0:0] icmp_ln849_1_reg_372;
wire   [63:0] bitcast_ln84_fu_233_p1;
wire    ap_CS_fsm_state3;
wire   [63:0] x_3_fu_238_p3;
reg   [63:0] x_3_reg_382;
wire    ap_CS_fsm_state7;
wire   [0:0] p_Result_7_fu_249_p3;
reg   [0:0] p_Result_7_reg_389;
wire   [0:0] or_ln10_fu_274_p2;
reg   [0:0] or_ln10_reg_393;
wire   [0:0] or_ln9_fu_286_p2;
reg   [0:0] or_ln9_reg_397;
wire   [63:0] grp_exp_generic_double_s_fu_87_ap_return;
wire    ap_CS_fsm_state14;
wire   [63:0] bitcast_ln95_1_fu_323_p1;
wire    ap_CS_fsm_state56;
wire   [63:0] grp_fu_108_p2;
reg   [63:0] resultf_reg_411;
wire    ap_CS_fsm_state87;
wire    grp_exp_generic_double_s_fu_87_ap_start;
wire    grp_exp_generic_double_s_fu_87_ap_done;
wire    grp_exp_generic_double_s_fu_87_ap_idle;
wire    grp_exp_generic_double_s_fu_87_ap_ready;
reg   [63:0] expx_reg_58;
wire    ap_CS_fsm_state8;
reg   [63:0] ap_phi_mux_resultf_4_phi_fu_74_p10;
reg   [63:0] resultf_4_reg_70;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state51;
reg    grp_exp_generic_double_s_fu_87_ap_start_reg;
reg    ap_predicate_op138_call_state8_state7;
reg   [87:0] ap_NS_fsm;
wire    ap_NS_fsm_state8;
reg   [63:0] grp_fu_98_p0;
reg   [63:0] grp_fu_98_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state83;
reg   [63:0] grp_fu_112_p0;
wire    ap_CS_fsm_state24;
wire   [63:0] grp_fu_117_p0;
wire   [51:0] tmp_V_1_fu_168_p1;
wire   [10:0] tmp_V_2_fu_257_p4;
wire   [63:0] p_Val2_s_fu_146_p1;
wire   [62:0] trunc_ln368_fu_173_p1;
wire   [0:0] icmp_ln833_1_fu_203_p2;
wire   [0:0] grp_fu_122_p2;
wire   [63:0] xor_ln84_fu_228_p2;
wire   [63:0] p_Val2_1_fu_245_p1;
wire   [0:0] icmp_ln10_fu_268_p2;
wire   [0:0] grp_fu_127_p2;
wire   [0:0] icmp_ln9_fu_280_p2;
wire   [63:0] bitcast_ln112_fu_292_p1;
wire   [63:0] xor_ln112_fu_296_p2;
wire   [63:0] bitcast_ln112_1_fu_302_p1;
wire   [63:0] bitcast_ln95_fu_313_p1;
wire   [63:0] xor_ln95_fu_317_p2;
reg   [1:0] grp_fu_98_opcode;
wire   [63:0] select_ln775_fu_306_p3;
reg   [63:0] ap_return_preg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 88'd1;
#0 grp_exp_generic_double_s_fu_87_ap_start_reg = 1'b0;
#0 ap_return_preg = 64'd0;
end

exp_generic_double_s grp_exp_generic_double_s_fu_87(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_generic_double_s_fu_87_ap_start),
    .ap_done(grp_exp_generic_double_s_fu_87_ap_done),
    .ap_idle(grp_exp_generic_double_s_fu_87_ap_idle),
    .ap_ready(grp_exp_generic_double_s_fu_87_ap_ready),
    .x(x_3_reg_382),
    .ap_return(grp_exp_generic_double_s_fu_87_ap_return)
);

myip_v1_0_HLS_dadfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
myip_v1_0_HLS_dadfYi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_98_p0),
    .din1(grp_fu_98_p1),
    .opcode(grp_fu_98_opcode),
    .ce(1'b1),
    .dout(grp_fu_98_p2)
);

myip_v1_0_HLS_dmug8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
myip_v1_0_HLS_dmug8j_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(abst_in_reg_343),
    .din1(reg_132),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

myip_v1_0_HLS_ddihbi #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
myip_v1_0_HLS_ddihbi_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_112_p0),
    .din1(reg_132),
    .ce(1'b1),
    .dout(grp_fu_112_p2)
);

myip_v1_0_HLS_dcmibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
myip_v1_0_HLS_dcmibs_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_117_p0),
    .din1(64'd4626885667169763328),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_117_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state51)) begin
            ap_return_preg <= select_ln775_fu_306_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exp_generic_double_s_fu_87_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_predicate_op138_call_state8_state7 == 1'b1) & (1'b1 == ap_NS_fsm_state8) & (1'b1 == ap_CS_fsm_state7))) begin
            grp_exp_generic_double_s_fu_87_ap_start_reg <= 1'b1;
        end else if ((grp_exp_generic_double_s_fu_87_ap_ready == 1'b1)) begin
            grp_exp_generic_double_s_fu_87_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (or_ln10_reg_393 == 1'd0) & (p_Result_7_reg_389 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (p_Result_7_reg_389 == 1'd1) & (or_ln9_reg_397 == 1'd0)))) begin
        expx_reg_58 <= x_3_reg_382;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        expx_reg_58 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln833_fu_191_p2 == 1'd1))) begin
        resultf_4_reg_70 <= select_ln67_fu_215_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_117_p2 == 1'd0))) begin
        resultf_4_reg_70 <= 64'd4607182418800017408;
    end else if (((1'b1 == ap_CS_fsm_state51) & (tmp_4_reg_368 == 1'd1) & (icmp_ln849_1_reg_372 == 1'd0) & (1'd0 == and_ln75_reg_359) & (icmp_ln849_reg_355 == 1'd0) & (icmp_ln833_reg_351 == 1'd0))) begin
        resultf_4_reg_70 <= reg_132;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        resultf_4_reg_70 <= reg_140;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        resultf_4_reg_70 <= resultf_reg_411;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        abst_in_reg_343[62 : 0] <= abst_in_fu_185_p1[62 : 0];
        icmp_ln833_reg_351 <= icmp_ln833_fu_191_p2;
        p_Result_8_reg_338[62 : 0] <= p_Result_8_fu_177_p3[62 : 0];
        p_Result_s_reg_328 <= p_Val2_s_fu_146_p1[32'd63];
        tmp_V_reg_333 <= {{p_Val2_s_fu_146_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln849_fu_197_p2 == 1'd0) & (icmp_ln833_fu_191_p2 == 1'd0))) begin
        and_ln75_reg_359 <= and_ln75_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_117_p2 == 1'd1))) begin
        icmp_ln849_1_reg_372 <= icmp_ln849_1_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln833_fu_191_p2 == 1'd0))) begin
        icmp_ln849_reg_355 <= icmp_ln849_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (p_Result_7_fu_249_p3 == 1'd0))) begin
        or_ln10_reg_393 <= or_ln10_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (p_Result_7_fu_249_p3 == 1'd1))) begin
        or_ln9_reg_397 <= or_ln9_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Result_7_reg_389 <= p_Val2_1_fu_245_p1[32'd63];
        x_3_reg_382 <= x_3_fu_238_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_132 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state45))) begin
        reg_140 <= grp_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        resultf_reg_411 <= grp_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_4_reg_368 <= grp_fu_117_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (tmp_4_reg_368 == 1'd1) & (icmp_ln849_1_reg_372 == 1'd0) & (1'd0 == and_ln75_reg_359) & (icmp_ln849_reg_355 == 1'd0) & (icmp_ln833_reg_351 == 1'd0))) begin
        ap_phi_mux_resultf_4_phi_fu_74_p10 = reg_132;
    end else begin
        ap_phi_mux_resultf_4_phi_fu_74_p10 = resultf_4_reg_70;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        ap_return = select_ln775_fu_306_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_112_p0 = bitcast_ln95_1_fu_323_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_112_p0 = 64'd4611686018427387904;
    end else begin
        grp_fu_112_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_372 == 1'd1)))) begin
        grp_fu_98_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state19) & (icmp_ln849_1_reg_372 == 1'd0)) | ((1'b1 == ap_CS_fsm_state19) & (icmp_ln849_1_reg_372 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_372 == 1'd0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((icmp_ln849_fu_197_p2 == 1'd1) & (icmp_ln833_fu_191_p2 == 1'd0)) | ((1'd1 == and_ln75_fu_209_p2) & (icmp_ln833_fu_191_p2 == 1'd0)))))) begin
        grp_fu_98_opcode = 2'd0;
    end else begin
        grp_fu_98_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_98_p0 = 64'd4607182418800017408;
    end else if ((((1'b1 == ap_CS_fsm_state19) & (icmp_ln849_1_reg_372 == 1'd0)) | ((1'b1 == ap_CS_fsm_state19) & (icmp_ln849_1_reg_372 == 1'd1)))) begin
        grp_fu_98_p0 = expx_reg_58;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_98_p0 = grp_exp_generic_double_s_fu_87_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_372 == 1'd0))) begin
        grp_fu_98_p0 = abst_in_reg_343;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_372 == 1'd1))) begin
        grp_fu_98_p0 = bitcast_ln84_fu_233_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_98_p0 = abst_in_fu_185_p1;
    end else begin
        grp_fu_98_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_98_p1 = reg_140;
    end else if ((((1'b1 == ap_CS_fsm_state19) & (icmp_ln849_1_reg_372 == 1'd0)) | ((1'b1 == ap_CS_fsm_state19) & (icmp_ln849_1_reg_372 == 1'd1)))) begin
        grp_fu_98_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_98_p1 = 64'd13830554455654793216;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_372 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_372 == 1'd1)))) begin
        grp_fu_98_p1 = abst_in_reg_343;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_98_p1 = 64'd4607182418800017408;
    end else begin
        grp_fu_98_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln833_fu_191_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'd0 == and_ln75_fu_209_p2) & (icmp_ln849_fu_197_p2 == 1'd0) & (icmp_ln833_fu_191_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((icmp_ln849_fu_197_p2 == 1'd1) & (icmp_ln833_fu_191_p2 == 1'd0)) | ((1'd1 == and_ln75_fu_209_p2) & (icmp_ln833_fu_191_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_117_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (((or_ln10_reg_393 == 1'd0) & (p_Result_7_reg_389 == 1'd0)) | ((p_Result_7_reg_389 == 1'd1) & (or_ln9_reg_397 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln849_1_reg_372 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abst_in_fu_185_p1 = p_Result_8_fu_177_p3;

assign and_ln75_fu_209_p2 = (icmp_ln833_1_fu_203_p2 & grp_fu_122_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_NS_fsm_state8 = ap_NS_fsm[32'd7];

always @ (*) begin
    ap_predicate_op138_call_state8_state7 = (((or_ln9_fu_286_p2 == 1'd1) & (p_Result_7_fu_249_p3 == 1'd1)) | ((or_ln10_fu_274_p2 == 1'd1) & (p_Result_7_fu_249_p3 == 1'd0)));
end

assign bitcast_ln112_1_fu_302_p1 = xor_ln112_fu_296_p2;

assign bitcast_ln112_fu_292_p1 = ap_phi_mux_resultf_4_phi_fu_74_p10;

assign bitcast_ln84_fu_233_p1 = xor_ln84_fu_228_p2;

assign bitcast_ln95_1_fu_323_p1 = xor_ln95_fu_317_p2;

assign bitcast_ln95_fu_313_p1 = expx_reg_58;

assign grp_exp_generic_double_s_fu_87_ap_start = grp_exp_generic_double_s_fu_87_ap_start_reg;

assign grp_fu_117_p0 = p_Result_8_fu_177_p3;

assign grp_fu_122_p2 = ((tmp_V_1_fu_168_p1 == 52'd0) ? 1'b1 : 1'b0);

assign grp_fu_127_p2 = ((tmp_V_2_fu_257_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_268_p2 = ((tmp_V_2_fu_257_p4 > 11'd996) ? 1'b1 : 1'b0);

assign icmp_ln833_1_fu_203_p2 = ((tmp_V_fu_158_p4 == 11'd968) ? 1'b1 : 1'b0);

assign icmp_ln833_fu_191_p2 = ((tmp_V_fu_158_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln849_1_fu_223_p2 = ((tmp_V_reg_333 < 11'd1023) ? 1'b1 : 1'b0);

assign icmp_ln849_fu_197_p2 = ((tmp_V_fu_158_p4 < 11'd968) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_280_p2 = ((tmp_V_2_fu_257_p4 > 11'd995) ? 1'b1 : 1'b0);

assign or_ln10_fu_274_p2 = (icmp_ln10_fu_268_p2 | grp_fu_127_p2);

assign or_ln9_fu_286_p2 = (icmp_ln9_fu_280_p2 | grp_fu_127_p2);

assign p_Result_7_fu_249_p3 = p_Val2_1_fu_245_p1[32'd63];

assign p_Result_8_fu_177_p3 = {{1'd0}, {trunc_ln368_fu_173_p1}};

assign p_Val2_1_fu_245_p1 = x_3_fu_238_p3;

assign p_Val2_s_fu_146_p1 = t_in;

assign select_ln67_fu_215_p3 = ((grp_fu_122_p2[0:0] === 1'b1) ? 64'd4607182418800017408 : 64'd9223372036854775807);

assign select_ln775_fu_306_p3 = ((p_Result_s_reg_328[0:0] === 1'b1) ? bitcast_ln112_1_fu_302_p1 : ap_phi_mux_resultf_4_phi_fu_74_p10);

assign tmp_V_1_fu_168_p1 = p_Val2_s_fu_146_p1[51:0];

assign tmp_V_2_fu_257_p4 = {{p_Val2_1_fu_245_p1[62:52]}};

assign tmp_V_fu_158_p4 = {{p_Val2_s_fu_146_p1[62:52]}};

assign trunc_ln368_fu_173_p1 = p_Val2_s_fu_146_p1[62:0];

assign x_3_fu_238_p3 = ((icmp_ln849_1_reg_372[0:0] === 1'b1) ? grp_fu_98_p2 : grp_fu_98_p2);

assign xor_ln112_fu_296_p2 = (bitcast_ln112_fu_292_p1 ^ 64'd9223372036854775808);

assign xor_ln84_fu_228_p2 = (p_Result_8_reg_338 ^ 64'd9223372036854775808);

assign xor_ln95_fu_317_p2 = (bitcast_ln95_fu_313_p1 ^ 64'd9223372036854775808);

always @ (posedge ap_clk) begin
    p_Result_8_reg_338[63] <= 1'b0;
    abst_in_reg_343[63] <= 1'b0;
end

endmodule //generic_tanh_double_s
