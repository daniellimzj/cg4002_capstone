// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myip_v1_0_HLS,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.286000,HLS_SYN_LAT=2047,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1059,HLS_SYN_LUT=1152,HLS_VERSION=2019_2}" *)

module myip_v1_0_HLS (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_state33 = 39'd4294967296;
parameter    ap_ST_fsm_state34 = 39'd8589934592;
parameter    ap_ST_fsm_state35 = 39'd17179869184;
parameter    ap_ST_fsm_state36 = 39'd34359738368;
parameter    ap_ST_fsm_state37 = 39'd68719476736;
parameter    ap_ST_fsm_state38 = 39'd137438953472;
parameter    ap_ST_fsm_state39 = 39'd274877906944;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg S_AXIS_TREADY;

 reg    ap_rst_n_inv;
wire   [7:0] weights1_address0;
reg    weights1_ce0;
wire   [31:0] weights1_q0;
wire   [2:0] bias1_address0;
reg    bias1_ce0;
wire   [31:0] bias1_q0;
wire   [4:0] weights2_address0;
reg    weights2_ce0;
wire   [31:0] weights2_q0;
wire   [2:0] bias2_address0;
reg    bias2_ce0;
wire   [31:0] bias2_q0;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln43_fu_363_p2;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire   [31:0] grp_fu_338_p2;
reg   [31:0] reg_347;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_332_p2;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state29;
reg   [31:0] reg_358;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state34;
wire   [5:0] word_cnt_fu_369_p2;
reg    ap_block_state2;
wire   [2:0] word_cnt_4_fu_391_p2;
reg   [2:0] word_cnt_4_reg_663;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln51_fu_397_p1;
reg   [63:0] zext_ln51_reg_668;
wire   [0:0] icmp_ln48_fu_385_p2;
wire   [8:0] zext_ln50_fu_401_p1;
reg   [8:0] zext_ln50_reg_674;
wire   [5:0] i_fu_411_p2;
reg   [5:0] i_reg_682;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln50_fu_405_p2;
reg   [31:0] weights1_load_reg_702;
wire    ap_CS_fsm_state5;
wire   [31:0] input_q0;
reg   [31:0] input_load_reg_707;
reg   [31:0] bias1_load_reg_712;
wire    ap_CS_fsm_state13;
wire   [2:0] word_cnt_6_fu_511_p2;
reg   [2:0] word_cnt_6_reg_720;
wire    ap_CS_fsm_state20;
wire   [63:0] zext_ln67_fu_517_p1;
reg   [63:0] zext_ln67_reg_725;
wire   [0:0] icmp_ln64_fu_505_p2;
wire   [5:0] zext_ln66_fu_521_p1;
reg   [5:0] zext_ln66_reg_731;
wire   [2:0] x_fu_531_p2;
reg   [2:0] x_reg_739;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln66_fu_525_p2;
reg   [31:0] weights2_load_reg_759;
wire    ap_CS_fsm_state22;
wire   [31:0] v_q0;
reg   [31:0] v_load_reg_764;
reg   [31:0] bias2_load_reg_769;
wire    ap_CS_fsm_state30;
wire   [2:0] word_cnt_5_fu_635_p2;
reg   [2:0] word_cnt_5_reg_777;
wire    ap_CS_fsm_state37;
wire    regslice_both_M_AXIS_V_data_U_apdone_blk;
wire   [0:0] icmp_ln82_fu_629_p2;
wire   [0:0] tmp_last_fu_646_p2;
reg   [0:0] tmp_last_reg_787;
wire   [31:0] v2_q0;
reg   [2:0] v_address0;
reg    v_ce0;
reg    v_we0;
wire   [31:0] v_d0;
reg   [2:0] v2_address0;
reg    v2_ce0;
reg    v2_we0;
wire   [31:0] v2_d0;
reg   [5:0] input_address0;
reg    input_ce0;
reg    input_we0;
reg   [5:0] word_cnt_0_reg_242;
wire    ap_CS_fsm_state1;
reg   [2:0] word_cnt_1_reg_253;
wire    ap_CS_fsm_state19;
reg   [31:0] sum_0_reg_264;
reg   [5:0] i_0_reg_276;
reg   [2:0] word_cnt_2_reg_287;
wire    ap_CS_fsm_state36;
reg   [31:0] sum2_0_reg_298;
reg   [2:0] x_0_reg_310;
reg   [2:0] word_cnt_3_reg_321;
wire   [63:0] zext_ln45_fu_380_p1;
wire   [63:0] zext_ln51_4_fu_449_p1;
wire   [63:0] zext_ln51_1_fu_417_p1;
wire  signed [63:0] sext_ln67_fu_573_p1;
wire   [63:0] zext_ln67_1_fu_537_p1;
wire   [63:0] zext_ln84_fu_641_p1;
reg   [31:0] grp_fu_332_p0;
reg   [31:0] grp_fu_332_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state31;
reg   [31:0] grp_fu_338_p0;
reg   [31:0] grp_fu_338_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state35;
wire   [7:0] tmp_7_fu_426_p3;
wire   [8:0] zext_ln51_2_fu_422_p1;
wire   [8:0] zext_ln51_3_fu_434_p1;
wire   [8:0] add_ln51_fu_438_p2;
wire   [8:0] add_ln51_1_fu_444_p2;
wire   [31:0] bitcast_ln56_fu_454_p1;
wire   [7:0] tmp_2_fu_458_p4;
wire   [22:0] trunc_ln56_fu_468_p1;
wire   [0:0] icmp_ln56_1_fu_478_p2;
wire   [0:0] icmp_ln56_fu_472_p2;
wire   [0:0] or_ln56_fu_484_p2;
wire   [0:0] grp_fu_342_p2;
wire   [0:0] and_ln56_fu_490_p2;
wire   [3:0] tmp_s_fu_550_p3;
wire   [5:0] tmp_9_fu_542_p3;
wire   [5:0] zext_ln67_2_fu_558_p1;
wire   [5:0] sub_ln67_fu_562_p2;
wire   [5:0] add_ln67_fu_568_p2;
wire   [31:0] bitcast_ln72_fu_578_p1;
wire   [7:0] tmp_5_fu_582_p4;
wire   [22:0] trunc_ln72_fu_592_p1;
wire   [0:0] icmp_ln72_1_fu_602_p2;
wire   [0:0] icmp_ln72_fu_596_p2;
wire   [0:0] or_ln72_fu_608_p2;
wire   [0:0] and_ln72_fu_614_p2;
reg   [38:0] ap_NS_fsm;
wire    regslice_both_S_AXIS_V_data_U_apdone_blk;
wire   [31:0] S_AXIS_TDATA_int;
wire    S_AXIS_TVALID_int;
reg    S_AXIS_TREADY_int;
wire    regslice_both_S_AXIS_V_data_U_ack_in;
wire    regslice_both_w1_S_AXIS_V_last_U_apdone_blk;
wire    S_AXIS_TLAST_int;
wire    regslice_both_w1_S_AXIS_V_last_U_vld_out;
wire    regslice_both_w1_S_AXIS_V_last_U_ack_in;
reg    M_AXIS_TVALID_int;
wire    M_AXIS_TREADY_int;
wire    regslice_both_M_AXIS_V_data_U_vld_out;
wire    regslice_both_w1_M_AXIS_V_last_U_apdone_blk;
wire    M_AXIS_TLAST_int;
wire    regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy;
wire    regslice_both_w1_M_AXIS_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
end

myip_v1_0_HLS_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 180 ),
    .AddressWidth( 8 ))
weights1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights1_address0),
    .ce0(weights1_ce0),
    .q0(weights1_q0)
);

myip_v1_0_HLS_bias1 #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
bias1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias1_address0),
    .ce0(bias1_ce0),
    .q0(bias1_q0)
);

myip_v1_0_HLS_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
weights2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights2_address0),
    .ce0(weights2_ce0),
    .q0(weights2_q0)
);

myip_v1_0_HLS_bias2 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
bias2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias2_address0),
    .ce0(bias2_ce0),
    .q0(bias2_q0)
);

myip_v1_0_HLS_v #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v_address0),
    .ce0(v_ce0),
    .we0(v_we0),
    .d0(v_d0),
    .q0(v_q0)
);

myip_v1_0_HLS_v2 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
v2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v2_address0),
    .ce0(v2_ce0),
    .we0(v2_we0),
    .d0(v2_d0),
    .q0(v2_q0)
);

myip_v1_0_HLS_input #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
input_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_address0),
    .ce0(input_ce0),
    .we0(input_we0),
    .d0(S_AXIS_TDATA_int),
    .q0(input_q0)
);

myip_v1_0_HLS_faddEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myip_v1_0_HLS_faddEe_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_332_p0),
    .din1(grp_fu_332_p1),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

myip_v1_0_HLS_fmueOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myip_v1_0_HLS_fmueOg_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_338_p0),
    .din1(grp_fu_338_p1),
    .ce(1'b1),
    .dout(grp_fu_338_p2)
);

myip_v1_0_HLS_fcmfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myip_v1_0_HLS_fcmfYi_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_358),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_342_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_S_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TDATA),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_data_U_ack_in),
    .data_out(S_AXIS_TDATA_int),
    .vld_out(S_AXIS_TVALID_int),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_S_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_S_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TLAST),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_w1_S_AXIS_V_last_U_ack_in),
    .data_out(S_AXIS_TLAST_int),
    .vld_out(regslice_both_w1_S_AXIS_V_last_U_vld_out),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_w1_S_AXIS_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_M_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(v2_q0),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(M_AXIS_TREADY_int),
    .data_out(M_AXIS_TDATA),
    .vld_out(regslice_both_M_AXIS_V_data_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_M_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TLAST_int),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy),
    .data_out(M_AXIS_TLAST),
    .vld_out(regslice_both_w1_M_AXIS_V_last_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_w1_M_AXIS_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_reg_276 <= i_reg_682;
    end else if (((icmp_ln48_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_276 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        sum2_0_reg_298 <= grp_fu_332_p2;
    end else if (((icmp_ln64_fu_505_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        sum2_0_reg_298 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_0_reg_264 <= grp_fu_332_p2;
    end else if (((icmp_ln48_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_0_reg_264 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln43_fu_363_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln43_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        word_cnt_0_reg_242 <= word_cnt_fu_369_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        word_cnt_0_reg_242 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln43_fu_363_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln43_fu_363_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        word_cnt_1_reg_253 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        word_cnt_1_reg_253 <= word_cnt_4_reg_663;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln48_fu_385_p2 == 1'd1))) begin
        word_cnt_2_reg_287 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        word_cnt_2_reg_287 <= word_cnt_6_reg_720;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln64_fu_505_p2 == 1'd1))) begin
        word_cnt_3_reg_321 <= 3'd0;
    end else if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state39))) begin
        word_cnt_3_reg_321 <= word_cnt_5_reg_777;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        x_0_reg_310 <= x_reg_739;
    end else if (((icmp_ln64_fu_505_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        x_0_reg_310 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        bias1_load_reg_712 <= bias1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        bias2_load_reg_769 <= bias2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_682 <= i_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_load_reg_707 <= input_q0;
        weights1_load_reg_702 <= weights1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_347 <= grp_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_358 <= grp_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_fu_629_p2 == 1'd0) & (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
        tmp_last_reg_787 <= tmp_last_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        v_load_reg_764 <= v_q0;
        weights2_load_reg_759 <= weights2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_cnt_4_reg_663 <= word_cnt_4_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
        word_cnt_5_reg_777 <= word_cnt_5_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        word_cnt_6_reg_720 <= word_cnt_6_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        x_reg_739 <= x_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln50_reg_674[2 : 0] <= zext_ln50_fu_401_p1[2 : 0];
        zext_ln51_reg_668[2 : 0] <= zext_ln51_fu_397_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_505_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        zext_ln66_reg_731[2 : 0] <= zext_ln66_fu_521_p1[2 : 0];
        zext_ln67_reg_725[2 : 0] <= zext_ln67_fu_517_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state38))) begin
        M_AXIS_TVALID_int = 1'b1;
    end else begin
        M_AXIS_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_S_AXIS_V_data_U_ack_in == 1'b1) & (1'b1 == S_AXIS_TVALID))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln43_fu_363_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln43_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        S_AXIS_TREADY_int = 1'b1;
    end else begin
        S_AXIS_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias1_ce0 = 1'b1;
    end else begin
        bias1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        bias2_ce0 = 1'b1;
    end else begin
        bias2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_332_p0 = sum2_0_reg_298;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_332_p0 = sum_0_reg_264;
    end else begin
        grp_fu_332_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_332_p1 = bias2_load_reg_769;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_332_p1 = bias1_load_reg_712;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_332_p1 = reg_347;
    end else begin
        grp_fu_332_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_338_p0 = weights2_load_reg_759;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_338_p0 = weights1_load_reg_702;
    end else begin
        grp_fu_338_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_338_p1 = v_load_reg_764;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_338_p1 = input_load_reg_707;
    end else begin
        grp_fu_338_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_address0 = zext_ln51_1_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_address0 = zext_ln45_fu_380_p1;
    end else begin
        input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((icmp_ln43_fu_363_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state2)))) begin
        input_ce0 = 1'b1;
    end else begin
        input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln43_fu_363_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln43_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_we0 = 1'b1;
    end else begin
        input_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        v2_address0 = zext_ln84_fu_641_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        v2_address0 = zext_ln67_reg_725;
    end else begin
        v2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state37)))) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        v2_we0 = 1'b1;
    end else begin
        v2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        v_address0 = zext_ln67_1_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        v_address0 = zext_ln51_reg_668;
    end else begin
        v_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21))) begin
        v_ce0 = 1'b1;
    end else begin
        v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v_we0 = 1'b1;
    end else begin
        v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights1_ce0 = 1'b1;
    end else begin
        weights1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        weights2_ce0 = 1'b1;
    end else begin
        weights2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln43_fu_363_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln43_fu_363_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln43_fu_363_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln43_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln48_fu_385_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln50_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln64_fu_505_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln66_fu_525_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state37 : begin
            if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state37) & (icmp_ln82_fu_629_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln82_fu_629_p2 == 1'd0) & (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TLAST_int = tmp_last_reg_787;

assign M_AXIS_TVALID = regslice_both_M_AXIS_V_data_U_vld_out;

assign add_ln51_1_fu_444_p2 = (add_ln51_fu_438_p2 + zext_ln50_reg_674);

assign add_ln51_fu_438_p2 = (zext_ln51_2_fu_422_p1 + zext_ln51_3_fu_434_p1);

assign add_ln67_fu_568_p2 = (sub_ln67_fu_562_p2 + zext_ln66_reg_731);

assign and_ln56_fu_490_p2 = (or_ln56_fu_484_p2 & grp_fu_342_p2);

assign and_ln72_fu_614_p2 = (or_ln72_fu_608_p2 & grp_fu_342_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((icmp_ln43_fu_363_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias1_address0 = zext_ln51_reg_668;

assign bias2_address0 = zext_ln67_reg_725;

assign bitcast_ln56_fu_454_p1 = reg_358;

assign bitcast_ln72_fu_578_p1 = reg_358;

assign i_fu_411_p2 = (i_0_reg_276 + 6'd1);

assign icmp_ln43_fu_363_p2 = ((word_cnt_0_reg_242 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_385_p2 = ((word_cnt_1_reg_253 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_405_p2 = ((i_0_reg_276 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_478_p2 = ((trunc_ln56_fu_468_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_472_p2 = ((tmp_2_fu_458_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_505_p2 = ((word_cnt_2_reg_287 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_525_p2 = ((x_0_reg_310 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln72_1_fu_602_p2 = ((trunc_ln72_fu_592_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_596_p2 = ((tmp_5_fu_582_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_629_p2 = ((word_cnt_3_reg_321 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln56_fu_484_p2 = (icmp_ln56_fu_472_p2 | icmp_ln56_1_fu_478_p2);

assign or_ln72_fu_608_p2 = (icmp_ln72_fu_596_p2 | icmp_ln72_1_fu_602_p2);

assign sext_ln67_fu_573_p1 = $signed(add_ln67_fu_568_p2);

assign sub_ln67_fu_562_p2 = (tmp_9_fu_542_p3 - zext_ln67_2_fu_558_p1);

assign tmp_2_fu_458_p4 = {{bitcast_ln56_fu_454_p1[30:23]}};

assign tmp_5_fu_582_p4 = {{bitcast_ln72_fu_578_p1[30:23]}};

assign tmp_7_fu_426_p3 = {{i_0_reg_276}, {2'd0}};

assign tmp_9_fu_542_p3 = {{x_0_reg_310}, {3'd0}};

assign tmp_last_fu_646_p2 = ((word_cnt_3_reg_321 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_s_fu_550_p3 = {{x_0_reg_310}, {1'd0}};

assign trunc_ln56_fu_468_p1 = bitcast_ln56_fu_454_p1[22:0];

assign trunc_ln72_fu_592_p1 = bitcast_ln72_fu_578_p1[22:0];

assign v2_d0 = ((and_ln72_fu_614_p2[0:0] === 1'b1) ? 32'd0 : reg_358);

assign v_d0 = ((and_ln56_fu_490_p2[0:0] === 1'b1) ? 32'd0 : reg_358);

assign weights1_address0 = zext_ln51_4_fu_449_p1;

assign weights2_address0 = sext_ln67_fu_573_p1;

assign word_cnt_4_fu_391_p2 = (word_cnt_1_reg_253 + 3'd1);

assign word_cnt_5_fu_635_p2 = (word_cnt_3_reg_321 + 3'd1);

assign word_cnt_6_fu_511_p2 = (word_cnt_2_reg_287 + 3'd1);

assign word_cnt_fu_369_p2 = (word_cnt_0_reg_242 + 6'd1);

assign x_fu_531_p2 = (x_0_reg_310 + 3'd1);

assign zext_ln45_fu_380_p1 = word_cnt_0_reg_242;

assign zext_ln50_fu_401_p1 = word_cnt_1_reg_253;

assign zext_ln51_1_fu_417_p1 = i_0_reg_276;

assign zext_ln51_2_fu_422_p1 = i_0_reg_276;

assign zext_ln51_3_fu_434_p1 = tmp_7_fu_426_p3;

assign zext_ln51_4_fu_449_p1 = add_ln51_1_fu_444_p2;

assign zext_ln51_fu_397_p1 = word_cnt_1_reg_253;

assign zext_ln66_fu_521_p1 = word_cnt_2_reg_287;

assign zext_ln67_1_fu_537_p1 = x_0_reg_310;

assign zext_ln67_2_fu_558_p1 = tmp_s_fu_550_p3;

assign zext_ln67_fu_517_p1 = word_cnt_2_reg_287;

assign zext_ln84_fu_641_p1 = word_cnt_3_reg_321;

always @ (posedge ap_clk) begin
    zext_ln51_reg_668[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln50_reg_674[8:3] <= 6'b000000;
    zext_ln67_reg_725[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln66_reg_731[5:3] <= 3'b000;
end

endmodule //myip_v1_0_HLS
